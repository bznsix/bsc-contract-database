{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.3.2 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"},"IBEP20.sol":{"content":"pragma solidity ^0.8.0;\r\n\r\ninterface IBEP20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external;\r\n}\r\n\r\n"},"Migrations.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract Migrations {\r\n  address public owner;\r\n  uint public last_completed_migration;\r\n\r\n  modifier restricted() {\r\n    if (msg.sender == owner) _;\r\n  }\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function setCompleted(uint completed) public restricted {\r\n    last_completed_migration = completed;\r\n  }\r\n}\r\n\r\n"},"Ownable.sol":{"content":"pragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"},"sale.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\nimport \"./IBEP20.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\n\r\n/**\r\n * THIS IS THE CONTRACT BY PATRON DOGE MEME TOKEN DAO. ALL RIGHTS RESERVED. \r\n */\r\n\r\ncontract Sale_mult_float is Ownable {\r\n\r\n    address public BUSD; //address of the token which creates the price of the security token\r\n    address public SECURITIES; //address of the security token\r\n\r\n    uint256 public basePrice; // price of the secutity token in USD*10\r\n    uint8 public baseDecimals; //decimals of the base price\r\n    address public manager;\r\n    bool public status; // isActive\r\n\r\n    struct Order {\r\n        uint256 securities;\r\n        uint256 BUSD;\r\n        string orderId;\r\n        address payer;\r\n    }\r\n\r\n    Order[] public orders;\r\n    uint256 public ordersCount;\r\n\r\n    event BuyTokensEvent(address buyer, uint256 amountSecurities);\r\n\r\n    constructor(address _BUSD, address _securities) {\r\n        BUSD = _BUSD;\r\n        SECURITIES = _securities;\r\n        manager = _msgSender();\r\n        ordersCount = 0;\r\n        basePrice = 1; //=0,000001 BUSD\r\n        baseDecimals = 6;\r\n        status = true;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(_msgSender() == manager, \"Wrong sender\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyActive() {\r\n        require(status == true, \"Sale: not active\");\r\n        _;\r\n    }\r\n\r\n    function changeManager(address newManager) public onlyOwner {\r\n        manager = newManager;\r\n    }\r\n\r\n    function changeStatus(bool _status) public onlyOwner {\r\n        status = _status;\r\n    }\r\n    \r\n    /// @notice price and its decimals of the secutity token in BUSD\r\n    /// @param priceInBUSD price of Security in BUSD\r\n    /// @param priceDecimals decimals for price in BUSD\r\n    function setPrice(uint256 priceInBUSD, uint8 priceDecimals) public onlyManager {\r\n        basePrice = priceInBUSD;\r\n        baseDecimals = priceDecimals;\r\n    }\r\n\r\n    /// @notice swap of the token to security. \r\n    /// Security has 0 decimals. Formula round amount of securities to get to a whole number\r\n    /// @dev make swap, create and write the order of the operation, emit BuyTokensEvent\r\n    /// @param amountBUSD amount of token to buy securities\r\n    /// Has to be equal to the BUSD in price, in other way formula doesn\u0027t work\r\n    /// @return true if the operation done successfully\r\n    function buyToken(uint256 amountBUSD, string memory orderId) public onlyActive returns(bool) {\r\n        \r\n        uint256 scaledTokenAmount = _scaleAmount(amountBUSD, IBEP20(BUSD).decimals(), baseDecimals);\r\n        uint256 amountSecurities = scaledTokenAmount / basePrice;\r\n        Order memory order;\r\n        IBEP20(BUSD).transferFrom(_msgSender(), address(this), amountBUSD);\r\n        require(IBEP20(SECURITIES).transfer(_msgSender(), amountSecurities * (10 ** IBEP20(SECURITIES).decimals())), \"transfer: SEC error\");\r\n\r\n        order.BUSD = amountBUSD;\r\n        order.securities = amountSecurities;\r\n        order.orderId = orderId;\r\n        order.payer = _msgSender();\r\n        orders.push(order);\r\n        ordersCount += 1;\r\n\r\n        emit BuyTokensEvent(_msgSender(), amountSecurities);\r\n        return true;\r\n    }\r\n    \r\n    /// @notice Owner of the contract has an opportunity to send any tokens from the contract to his/her wallet    \r\n    /// @param amount amount of the tokens to send (18 decimals)\r\n    /// @param token address of the tokens to send\r\n    /// @return true if the operation done successfully\r\n    function sendBack(uint256 amount, address token) public onlyOwner returns(bool) {\r\n        require(IBEP20(token).transfer(_msgSender(), amount), \"Transfer: error\");\r\n        return true;\r\n    }\r\n\r\n    /// @notice function count and return the amount of security to be gotten for the proper amount of tokens \r\n    /// Security has 0 decimals. Formula round amount of securities to get to a whole number    \r\n    /// @param amountBUSD amount of token you want to spend\r\n    /// @return token , securities -  tuple of uintegers - (amount of token to spend, amount of securities to get)    \r\n    function buyTokenView(uint256 amountBUSD) public view returns(uint256 token, uint256 securities) {\r\n        uint256 scaledAmountBUSD = _scaleAmount(amountBUSD, IBEP20(BUSD).decimals(), baseDecimals);\r\n        uint256 amountSecurities = scaledAmountBUSD / basePrice;\r\n        return (\r\n        amountBUSD, amountSecurities * (10 ** IBEP20(SECURITIES).decimals())\r\n         );\r\n    }\r\n\r\n    /// @notice the function reduces the amount to the required decimals      \r\n    /// @param _amount amount of token you want to reduce\r\n    /// @param _amountDecimals decimals which amount has now\r\n    /// @param _decimals decimals you want to get after scaling\r\n    /// @return uint256 the scaled amount with proper decimals\r\n    function _scaleAmount(uint256 _amount, uint8 _amountDecimals, uint8 _decimals)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (_amountDecimals \u003c _decimals) {\r\n            return _amount * (10 ** uint256(_decimals - _amountDecimals));\r\n        } else if (_amountDecimals \u003e _decimals) {\r\n            return _amount / (10 ** uint256(_amountDecimals - _decimals));\r\n        }\r\n        return _amount;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n"}}