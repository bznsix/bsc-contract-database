{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity =0.6.12;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity =0.6.12;\n\ninterface IERC20 {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity =0.6.12;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor(address owner__) public {\n        _owner = owner__;\n        emit OwnershipTransferred(address(0), owner__);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity =0.6.12;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) \u003e= x, \"ds-math-add-overflow\");\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) \u003c= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n}\n"},"Swapgate.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity =0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"./Ownable.sol\";\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\n\ncontract Swapgate is Ownable {\n    using SafeMath for uint256;\n\n    IERC20 gnyToken;\n\n    event Deposit(\n        address indexed _from,\n        string indexed _gnyAddressIndexed,\n        string _gnyAddres,\n        uint256 _value\n    );\n\n    constructor(address tokenAddress) public Ownable(msg.sender) {\n        gnyToken = IERC20(tokenAddress);\n    }\n\n    function transfer(\n        address to,\n        uint256 amount\n    ) public onlyOwner {\n        IERC20(gnyToken).transfer(to, amount);\n    }\n\n    function deposit(uint256 amount, string memory _gnyAddress) public returns (bool) {\n        require(\n            bytes(_gnyAddress).length \u003e 0,\n            \"SWAPGATE: IS NOT AN GNY ADDRESS\"\n        );\n        require(\n            amount \u003e 0,\n            \"SWAPGATE: MUST BE POSITIVE\"\n        );\n\n        gnyToken.transferFrom(msg.sender, address(this), amount);\n        emit Deposit(msg.sender, _gnyAddress, _gnyAddress, amount);\n        return true;\n    }\n\n    // Self-destruct function\n    function destroy() public onlyOwner {\n        require(\n            gnyToken.balanceOf(address(this)) == 0,\n            \"SWAPGATE: owner still has GNY token balance\"\n        );\n        selfdestruct(msg.sender);\n    }\n}\n"}}