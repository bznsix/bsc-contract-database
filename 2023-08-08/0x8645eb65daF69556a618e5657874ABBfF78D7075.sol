{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.13;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.13;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"},"IBoostContract.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IBoostContract {\n    function onRp1PoolUpdate(\n        address _user,\n        uint256 _lockedAmount,\n        uint256 _lockedDuration,\n        uint256 _totalLockedAmount,\n        uint256 _maxLockDuration\n    ) external;\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.13;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"IMasterChefV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IMasterChefV2 {\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    function pendingRp1(uint256 _pid, address _user) external view returns (uint256);\n\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\n\n    function emergencyWithdraw(uint256 _pid) external;\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.13;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"},"Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.13;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}"},"Rp1Pool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"./Ownable.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./Pausable.sol\";\nimport \"./IMasterChefV2.sol\";\nimport \"./IBoostContract.sol\";\n\ncontract Rp1Pool is Ownable, Pausable {\n    using SafeERC20 for IERC20;\n\n    struct UserInfo {\n        uint256 shares; // number of shares for a user.\n        uint256 lastDepositedTime; // keep track of deposited time for potential penalty.\n        uint256 rp1AtLastUserAction; // keep track of rp1 deposited at the last user action.\n        uint256 lastUserActionTime; // keep track of the last user action time.\n        uint256 lockStartTime; // lock start time.\n        uint256 lockEndTime; // lock end time.\n        uint256 userBoostedShare; // boost share, in order to give the user higher reward. The user only enjoys the reward, so the principal needs to be recorded as a debt.\n        bool locked; //lock status.\n        uint256 lockedAmount; // amount deposited during lock period.\n    }\n\n    IERC20 public immutable token; // rp1 token.\n\n    IMasterChefV2 public immutable masterchefV2;\n\n    address public boostContract; // boost contract used in Masterchef.\n\n    mapping(address =\u003e UserInfo) public userInfo;\n    mapping(address =\u003e bool) public freeFeeUsers; // free fee users.\n\n    uint256 public totalShares;\n    uint256 public lastHarvestedTime;\n    address public admin;\n    address public treasury;\n    address public operator;\n    uint256 public rp1PoolPID;\n    uint256 public totalBoostDebt; // total boost debt.\n    uint256 public totalLockedAmount; // total lock amount.\n\n    uint256 public constant MAX_PERFORMANCE_FEE = 2000; // 20%\n    uint256 public constant MAX_CALL_FEE = 100; // 1%\n    uint256 public constant MAX_WITHDRAW_FEE = 500; // 5%\n    uint256 public constant MAX_WITHDRAW_FEE_PERIOD = 1 weeks; // 1 week\n    uint256 public constant MIN_LOCK_DURATION = 1 weeks; // 1 week\n    uint256 public constant MAX_LOCK_DURATION_LIMIT = 1000 days; // 1000 days\n    uint256 public constant BOOST_WEIGHT_LIMIT = 500 * 1e10; // 500%\n    uint256 public constant PRECISION_FACTOR = 1e12; // precision factor.\n    uint256 public constant PRECISION_FACTOR_SHARE = 1e28; // precision factor for share.\n    uint256 public constant MIN_DEPOSIT_AMOUNT = 0.00001 ether;\n    uint256 public constant MIN_WITHDRAW_AMOUNT = 0.00001 ether;\n    uint256 public UNLOCK_FREE_DURATION = 1 weeks; // 1 week\n    uint256 public MAX_LOCK_DURATION = 365 days; // 365 days\n    uint256 public DURATION_FACTOR = 365 days; // 365 days, in order to calculate user additional boost.\n    uint256 public DURATION_FACTOR_OVERDUE = 180 days; // 180 days, in order to calculate overdue fee.\n    uint256 public BOOST_WEIGHT = 100 * 1e10; // 100%\n\n    uint256 public performanceFee = 200; // 2%\n    uint256 public performanceFeeContract = 200; // 2%\n    uint256 public withdrawFee = 10; // 0.1%\n    uint256 public withdrawFeeContract = 10; // 0.1%\n    uint256 public overdueFee = 100 * 1e10; // 100%\n    uint256 public withdrawFeePeriod = 72 hours; // 3 days\n\n    event Deposit(address indexed sender, uint256 amount, uint256 shares, uint256 duration, uint256 lastDepositedTime);\n    event Withdraw(address indexed sender, uint256 amount, uint256 shares);\n    event Harvest(address indexed sender, uint256 amount);\n    event Pause();\n    event Unpause();\n    event Init();\n    event Lock(\n        address indexed sender,\n        uint256 lockedAmount,\n        uint256 shares,\n        uint256 lockedDuration,\n        uint256 blockTimestamp\n    );\n    event Unlock(address indexed sender, uint256 amount, uint256 blockTimestamp);\n\n    /**\n     * @notice Constructor\n     * @param _token: Rp1 token contract\n     * @param _masterchefV2: MasterChefV2 contract\n     * @param _admin: address of the admin\n     * @param _treasury: address of the treasury (collects fees)\n     * @param _operator: address of operator\n     * @param _pid: rp1 pool ID in MasterChefV2\n     */\n    constructor(\n        IERC20 _token,\n        IMasterChefV2 _masterchefV2,\n        address _admin,\n        address _treasury,\n        address _operator,\n        uint256 _pid\n    ) {\n        token = _token;\n        masterchefV2 = _masterchefV2;\n        admin = _admin;\n        treasury = _treasury;\n        operator = _operator;\n        rp1PoolPID = _pid;\n    }\n\n    /**\n     * @notice Deposits a dummy token to `MASTER_CHEF` MCV2.\n     * It will transfer all the `dummyToken` in the tx sender address.\n     * @param dummyToken The address of the token to be deposited into MCV2.\n     */\n    function init(IERC20 dummyToken) external {\n        uint256 balance = dummyToken.balanceOf(msg.sender);\n        require(balance != 0, \"Balance must exceed 0\");\n        dummyToken.safeTransferFrom(msg.sender, address(this), balance);\n        dummyToken.approve(address(masterchefV2), balance);\n        masterchefV2.deposit(rp1PoolPID, balance);\n        emit Init();\n    }\n\n    /**\n     * @notice Checks if the msg.sender is the admin address.\n     */\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"admin: wut?\");\n        _;\n    }\n\n    /**\n     * @notice Checks if the msg.sender is either the rp1 owner address or the operator address.\n     */\n    modifier onlyOperatorOrRp1Owner(address _user) {\n        require(msg.sender == _user || msg.sender == operator, \"Not operator or rp1 owner\");\n        _;\n    }\n\n    /**\n     * @notice Update user info in Boost Contract.\n     * @param _user: User address\n     */\n    function updateBoostContractInfo(address _user) internal {\n        if (boostContract != address(0)) {\n            UserInfo storage user = userInfo[_user];\n            uint256 lockDuration = user.lockEndTime - user.lockStartTime;\n            IBoostContract(boostContract).onRp1PoolUpdate(\n                _user,\n                user.lockedAmount,\n                lockDuration,\n                totalLockedAmount,\n                DURATION_FACTOR\n            );\n        }\n    }\n\n    /**\n     * @notice Update user share When need to unlock or charges a fee.\n     * @param _user: User address\n     */\n    function updateUserShare(address _user) internal {\n        UserInfo storage user = userInfo[_user];\n        if (user.shares \u003e 0) {\n            if (user.locked) {\n                // Calculate the user\u0027s current token amount and update related parameters.\n                uint256 currentAmount = (balanceOf() * (user.shares)) / totalShares - user.userBoostedShare;\n                totalBoostDebt -= user.userBoostedShare;\n                user.userBoostedShare = 0;\n                totalShares -= user.shares;\n                //Charge a overdue fee after the free duration has expired.\n                if (!freeFeeUsers[_user] \u0026\u0026 ((user.lockEndTime + UNLOCK_FREE_DURATION) \u003c block.timestamp)) {\n                    uint256 earnAmount = currentAmount - user.lockedAmount;\n                    uint256 overdueDuration = block.timestamp - user.lockEndTime - UNLOCK_FREE_DURATION;\n                    if (overdueDuration \u003e DURATION_FACTOR_OVERDUE) {\n                        overdueDuration = DURATION_FACTOR_OVERDUE;\n                    }\n                    // Rates are calculated based on the user\u0027s overdue duration.\n                    uint256 overdueWeight = (overdueDuration * overdueFee) / DURATION_FACTOR_OVERDUE;\n                    uint256 currentOverdueFee = (earnAmount * overdueWeight) / PRECISION_FACTOR;\n                    token.safeTransfer(treasury, currentOverdueFee);\n                    currentAmount -= currentOverdueFee;\n                }\n                // Recalculate the user\u0027s share.\n                uint256 pool = balanceOf();\n                uint256 currentShares;\n                if (totalShares != 0) {\n                    currentShares = (currentAmount * totalShares) / (pool - currentAmount);\n                } else {\n                    currentShares = currentAmount;\n                }\n                user.shares = currentShares;\n                totalShares += currentShares;\n                // After the lock duration, update related parameters.\n                if (user.lockEndTime \u003c block.timestamp) {\n                    user.locked = false;\n                    user.lockStartTime = 0;\n                    user.lockEndTime = 0;\n                    totalLockedAmount -= user.lockedAmount;\n                    user.lockedAmount = 0;\n                    emit Unlock(_user, currentAmount, block.timestamp);\n                }\n            } else if (!freeFeeUsers[_user]) {\n                // Calculate Performance fee.\n                uint256 totalAmount = (user.shares * balanceOf()) / totalShares;\n                totalShares -= user.shares;\n                user.shares = 0;\n                uint256 earnAmount = totalAmount - user.rp1AtLastUserAction;\n                uint256 feeRate = performanceFee;\n                if (_isContract(_user)) {\n                    feeRate = performanceFeeContract;\n                }\n                uint256 currentPerformanceFee = (earnAmount * feeRate) / 10000;\n                if (currentPerformanceFee \u003e 0) {\n                    token.safeTransfer(treasury, currentPerformanceFee);\n                    totalAmount -= currentPerformanceFee;\n                }\n                // Recalculate the user\u0027s share.\n                uint256 pool = balanceOf();\n                uint256 newShares;\n                if (totalShares != 0) {\n                    newShares = (totalAmount * totalShares) / (pool - totalAmount);\n                } else {\n                    newShares = totalAmount;\n                }\n                user.shares = newShares;\n                totalShares += newShares;\n            }\n        }\n    }\n\n    /**\n     * @notice Unlock user rp1 funds.\n     * @dev Only possible when contract not paused.\n     * @param _user: User address\n     */\n    function unlock(address _user) external onlyOperatorOrRp1Owner(_user) whenNotPaused {\n        UserInfo storage user = userInfo[_user];\n        require(user.locked \u0026\u0026 user.lockEndTime \u003c block.timestamp, \"Cannot unlock yet\");\n        depositOperation(0, 0, _user);\n    }\n\n    /**\n     * @notice Deposit funds into the Rp1 Pool.\n     * @dev Only possible when contract not paused.\n     * @param _amount: number of tokens to deposit (in RP1)\n     * @param _lockDuration: Token lock duration\n     */\n    function deposit(uint256 _amount, uint256 _lockDuration) external whenNotPaused {\n        require(_amount \u003e 0 || _lockDuration \u003e 0, \"Nothing to deposit\");\n        depositOperation(_amount, _lockDuration, msg.sender);\n    }\n\n    /**\n     * @notice The operation of deposite.\n     * @param _amount: number of tokens to deposit (in RP1)\n     * @param _lockDuration: Token lock duration\n     * @param _user: User address\n     */\n    function depositOperation(\n        uint256 _amount,\n        uint256 _lockDuration,\n        address _user\n    ) internal {\n        UserInfo storage user = userInfo[_user];\n        if (user.shares == 0 || _amount \u003e 0) {\n            require(_amount \u003e MIN_DEPOSIT_AMOUNT, \"Deposit amount must be greater than MIN_DEPOSIT_AMOUNT\");\n        }\n        // Calculate the total lock duration and check whether the lock duration meets the conditions.\n        uint256 totalLockDuration = _lockDuration;\n        if (user.lockEndTime \u003e= block.timestamp) {\n            // Adding funds during the lock duration is equivalent to re-locking the position, needs to update some variables.\n            if (_amount \u003e 0) {\n                user.lockStartTime = block.timestamp;\n                totalLockedAmount -= user.lockedAmount;\n                user.lockedAmount = 0;\n            }\n            totalLockDuration += user.lockEndTime - user.lockStartTime;\n        }\n        require(_lockDuration == 0 || totalLockDuration \u003e= MIN_LOCK_DURATION, \"Minimum lock period is one week\");\n        require(totalLockDuration \u003c= MAX_LOCK_DURATION, \"Maximum lock period exceeded\");\n\n        // Harvest tokens from Masterchef.\n        harvest();\n\n        // Handle stock funds.\n        if (totalShares == 0) {\n            uint256 stockAmount = available();\n            token.safeTransfer(treasury, stockAmount);\n        }\n        // Update user share.\n        updateUserShare(_user);\n\n        // Update lock duration.\n        if (_lockDuration \u003e 0) {\n            if (user.lockEndTime \u003c block.timestamp) {\n                user.lockStartTime = block.timestamp;\n                user.lockEndTime = block.timestamp + _lockDuration;\n            } else {\n                user.lockEndTime += _lockDuration;\n            }\n            user.locked = true;\n        }\n\n        uint256 currentShares;\n        uint256 currentAmount;\n        uint256 userCurrentLockedBalance;\n        uint256 pool = balanceOf();\n        if (_amount \u003e 0) {\n            token.safeTransferFrom(_user, address(this), _amount);\n            currentAmount = _amount;\n        }\n\n        // Calculate lock funds\n        if (user.shares \u003e 0 \u0026\u0026 user.locked) {\n            userCurrentLockedBalance = (pool * user.shares) / totalShares;\n            currentAmount += userCurrentLockedBalance;\n            totalShares -= user.shares;\n            user.shares = 0;\n\n            // Update lock amount\n            if (user.lockStartTime == block.timestamp) {\n                user.lockedAmount = userCurrentLockedBalance;\n                totalLockedAmount += user.lockedAmount;\n            }\n        }\n        if (totalShares != 0) {\n            currentShares = (currentAmount * totalShares) / (pool - userCurrentLockedBalance);\n        } else {\n            currentShares = currentAmount;\n        }\n\n        // Calculate the boost weight share.\n        if (user.lockEndTime \u003e user.lockStartTime) {\n            // Calculate boost share.\n            uint256 boostWeight = ((user.lockEndTime - user.lockStartTime) * BOOST_WEIGHT) / DURATION_FACTOR;\n            uint256 boostShares = (boostWeight * currentShares) / PRECISION_FACTOR;\n            currentShares += boostShares;\n            user.shares += currentShares;\n\n            // Calculate boost share , the user only enjoys the reward, so the principal needs to be recorded as a debt.\n            uint256 userBoostedShare = (boostWeight * currentAmount) / PRECISION_FACTOR;\n            user.userBoostedShare += userBoostedShare;\n            totalBoostDebt += userBoostedShare;\n\n            // Update lock amount.\n            user.lockedAmount += _amount;\n            totalLockedAmount += _amount;\n\n            emit Lock(_user, user.lockedAmount, user.shares, (user.lockEndTime - user.lockStartTime), block.timestamp);\n        } else {\n            user.shares += currentShares;\n        }\n\n        if (_amount \u003e 0 || _lockDuration \u003e 0) {\n            user.lastDepositedTime = block.timestamp;\n        }\n        totalShares += currentShares;\n\n        user.rp1AtLastUserAction = (user.shares * balanceOf()) / totalShares - user.userBoostedShare;\n        user.lastUserActionTime = block.timestamp;\n\n        // Update user info in Boost Contract.\n        updateBoostContractInfo(_user);\n\n        emit Deposit(_user, _amount, currentShares, _lockDuration, block.timestamp);\n    }\n\n    /**\n     * @notice Withdraw funds from the Rp1 Pool.\n     * @param _amount: Number of amount to withdraw\n     */\n    function withdrawByAmount(uint256 _amount) public {\n        require(_amount \u003e MIN_WITHDRAW_AMOUNT, \"Withdraw amount must be greater than MIN_WITHDRAW_AMOUNT\");\n        withdrawOperation(0, _amount);\n    }\n\n    /**\n     * @notice Withdraw funds from the Rp1 Pool.\n     * @param _shares: Number of shares to withdraw\n     */\n    function withdraw(uint256 _shares) public {\n        require(_shares \u003e 0, \"Nothing to withdraw\");\n        withdrawOperation(_shares, 0);\n    }\n\n    /**\n     * @notice The operation of withdraw.\n     * @param _shares: Number of shares to withdraw\n     * @param _amount: Number of amount to withdraw\n     */\n    function withdrawOperation(uint256 _shares, uint256 _amount) internal {\n        UserInfo storage user = userInfo[msg.sender];\n        require(_shares \u003c= user.shares, \"Withdraw amount exceeds balance\");\n        require(user.lockEndTime \u003c block.timestamp, \"Still in lock\");\n\n        // Calculate the percent of withdraw shares, when unlocking or calculating the Performance fee, the shares will be updated.\n        uint256 currentShare = _shares;\n        uint256 sharesPercent = (_shares * PRECISION_FACTOR_SHARE) / user.shares;\n\n        // Harvest token from MasterchefV2.\n        harvest();\n\n        // Update user share.\n        updateUserShare(msg.sender);\n\n        if (_shares == 0 \u0026\u0026 _amount \u003e 0) {\n            uint256 pool = balanceOf();\n            currentShare = (_amount * totalShares) / pool; // Calculate equivalent shares\n            if (currentShare \u003e user.shares) {\n                currentShare = user.shares;\n            }\n        } else {\n            currentShare = (sharesPercent * user.shares) / PRECISION_FACTOR_SHARE;\n        }\n        uint256 currentAmount = (balanceOf() * currentShare) / totalShares;\n        user.shares -= currentShare;\n        totalShares -= currentShare;\n\n        // Calculate withdraw fee\n        if (!freeFeeUsers[msg.sender] \u0026\u0026 (block.timestamp \u003c user.lastDepositedTime + withdrawFeePeriod)) {\n            uint256 feeRate = withdrawFee;\n            if (_isContract(msg.sender)) {\n                feeRate = withdrawFeeContract;\n            }\n            uint256 currentWithdrawFee = (currentAmount * feeRate) / 10000;\n            token.safeTransfer(treasury, currentWithdrawFee);\n            currentAmount -= currentWithdrawFee;\n        }\n\n        token.safeTransfer(msg.sender, currentAmount);\n\n        if (user.shares \u003e 0) {\n            user.rp1AtLastUserAction = (user.shares * balanceOf()) / totalShares;\n        } else {\n            user.rp1AtLastUserAction = 0;\n        }\n\n        user.lastUserActionTime = block.timestamp;\n\n        // Update user info in Boost Contract.\n        updateBoostContractInfo(msg.sender);\n\n        emit Withdraw(msg.sender, currentAmount, currentShare);\n    }\n\n    /**\n     * @notice Withdraw all funds for a user\n     */\n    function withdrawAll() external {\n        withdraw(userInfo[msg.sender].shares);\n    }\n\n    /**\n     * @notice Harvest pending RP1 tokens from MasterChef\n     */\n    function harvest() internal {\n        uint256 pendingRp1 = masterchefV2.pendingRp1(rp1PoolPID, address(this));\n        if (pendingRp1 \u003e 0) {\n            uint256 balBefore = available();\n            masterchefV2.withdraw(rp1PoolPID, 0);\n            uint256 balAfter = available();\n            emit Harvest(msg.sender, (balAfter - balBefore));\n        }\n    }\n\n    /**\n     * @notice Set admin address\n     * @dev Only callable by the contract owner.\n     */\n    function setAdmin(address _admin) external onlyOwner {\n        require(_admin != address(0), \"Cannot be zero address\");\n        admin = _admin;\n    }\n\n    /**\n     * @notice Set treasury address\n     * @dev Only callable by the contract owner.\n     */\n    function setTreasury(address _treasury) external onlyOwner {\n        require(_treasury != address(0), \"Cannot be zero address\");\n        treasury = _treasury;\n    }\n\n    /**\n     * @notice Set operator address\n     * @dev Callable by the contract owner.\n     */\n    function setOperator(address _operator) external onlyOwner {\n        require(_operator != address(0), \"Cannot be zero address\");\n        operator = _operator;\n    }\n\n    /**\n     * @notice Set Boost Contract address\n     * @dev Callable by the contract admin.\n     */\n    function setBoostContract(address _boostContract) external onlyAdmin {\n        require(_boostContract != address(0), \"Cannot be zero address\");\n        boostContract = _boostContract;\n    }\n\n    /**\n     * @notice Set free fee address\n     * @dev Only callable by the contract admin.\n     * @param _user: User address\n     * @param _free: true:free false:not free\n     */\n    function setFreeFeeUser(address _user, bool _free) external onlyAdmin {\n        require(_user != address(0), \"Cannot be zero address\");\n        freeFeeUsers[_user] = _free;\n    }\n\n    /**\n     * @notice Set performance fee\n     * @dev Only callable by the contract admin.\n     */\n    function setPerformanceFee(uint256 _performanceFee) external onlyAdmin {\n        require(_performanceFee \u003c= MAX_PERFORMANCE_FEE, \"performanceFee cannot be more than MAX_PERFORMANCE_FEE\");\n        performanceFee = _performanceFee;\n    }\n\n    /**\n     * @notice Set performance fee for contract\n     * @dev Only callable by the contract admin.\n     */\n    function setPerformanceFeeContract(uint256 _performanceFeeContract) external onlyAdmin {\n        require(\n            _performanceFeeContract \u003c= MAX_PERFORMANCE_FEE,\n            \"performanceFee cannot be more than MAX_PERFORMANCE_FEE\"\n        );\n        performanceFeeContract = _performanceFeeContract;\n    }\n\n    /**\n     * @notice Set withdraw fee\n     * @dev Only callable by the contract admin.\n     */\n    function setWithdrawFee(uint256 _withdrawFee) external onlyAdmin {\n        require(_withdrawFee \u003c= MAX_WITHDRAW_FEE, \"withdrawFee cannot be more than MAX_WITHDRAW_FEE\");\n        withdrawFee = _withdrawFee;\n    }\n\n    /**\n     * @notice Set withdraw fee for contract\n     * @dev Only callable by the contract admin.\n     */\n    function setWithdrawFeeContract(uint256 _withdrawFeeContract) external onlyAdmin {\n        require(_withdrawFeeContract \u003c= MAX_WITHDRAW_FEE, \"withdrawFee cannot be more than MAX_WITHDRAW_FEE\");\n        withdrawFeeContract = _withdrawFeeContract;\n    }\n\n    /**\n     * @notice Set withdraw fee period\n     * @dev Only callable by the contract admin.\n     */\n    function setWithdrawFeePeriod(uint256 _withdrawFeePeriod) external onlyAdmin {\n        require(\n            _withdrawFeePeriod \u003c= MAX_WITHDRAW_FEE_PERIOD,\n            \"withdrawFeePeriod cannot be more than MAX_WITHDRAW_FEE_PERIOD\"\n        );\n        withdrawFeePeriod = _withdrawFeePeriod;\n    }\n\n    /**\n     * @notice Set MAX_LOCK_DURATION\n     * @dev Only callable by the contract admin.\n     */\n    function setMaxLockDuration(uint256 _maxLockDuration) external onlyAdmin {\n        require(\n            _maxLockDuration \u003c= MAX_LOCK_DURATION_LIMIT,\n            \"MAX_LOCK_DURATION cannot be more than MAX_LOCK_DURATION_LIMIT\"\n        );\n        MAX_LOCK_DURATION = _maxLockDuration;\n    }\n\n    /**\n     * @notice Set DURATION_FACTOR\n     * @dev Only callable by the contract admin.\n     */\n    function setDurationFactor(uint256 _durationFactor) external onlyAdmin {\n        require(_durationFactor \u003e 0, \"DURATION_FACTOR cannot be zero\");\n        DURATION_FACTOR = _durationFactor;\n    }\n\n    /**\n     * @notice Set DURATION_FACTOR_OVERDUE\n     * @dev Only callable by the contract admin.\n     */\n    function setDurationFactorOverdue(uint256 _durationFactorOverdue) external onlyAdmin {\n        require(_durationFactorOverdue \u003e 0, \"DURATION_FACTOR_OVERDUE cannot be zero\");\n        DURATION_FACTOR_OVERDUE = _durationFactorOverdue;\n    }\n\n    /**\n     * @notice Set UNLOCK_FREE_DURATION\n     * @dev Only callable by the contract admin.\n     */\n    function setUnlockFreeDuration(uint256 _unlockFreeDuration) external onlyAdmin {\n        require(_unlockFreeDuration \u003e 0, \"UNLOCK_FREE_DURATION cannot be zero\");\n        UNLOCK_FREE_DURATION = _unlockFreeDuration;\n    }\n\n    /**\n     * @notice Set BOOST_WEIGHT\n     * @dev Only callable by the contract admin.\n     */\n    function setBoostWeight(uint256 _boostWeight) external onlyAdmin {\n        require(_boostWeight \u003c= BOOST_WEIGHT_LIMIT, \"BOOST_WEIGHT cannot be more than BOOST_WEIGHT_LIMIT\");\n        BOOST_WEIGHT = _boostWeight;\n    }\n\n    /**\n     * @notice Withdraw unexpected tokens sent to the Rp1 Pool\n     */\n    function inCaseTokensGetStuck(address _token) external onlyAdmin {\n        require(_token != address(token), \"Token cannot be same as deposit token\");\n\n        uint256 amount = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).safeTransfer(msg.sender, amount);\n    }\n\n    /**\n     * @notice Trigger stopped state\n     * @dev Only possible when contract not paused.\n     */\n    function pause() external onlyAdmin whenNotPaused {\n        _pause();\n        emit Pause();\n    }\n\n    /**\n     * @notice Return to normal state\n     * @dev Only possible when contract is paused.\n     */\n    function unpause() external onlyAdmin whenPaused {\n        _unpause();\n        emit Unpause();\n    }\n\n    /**\n     * @notice Calculate Performance fee.\n     * @param _user: User address\n     * @return Returns Performance fee.\n     */\n    function calculatePerformanceFee(address _user) public view returns (uint256) {\n        UserInfo storage user = userInfo[_user];\n        if (user.shares \u003e 0 \u0026\u0026 !user.locked \u0026\u0026 !freeFeeUsers[_user]) {\n            uint256 pool = balanceOf() + calculateTotalPendingRp1Rewards();\n            uint256 totalAmount = (user.shares * pool) / totalShares;\n            uint256 earnAmount = totalAmount - user.rp1AtLastUserAction;\n            uint256 feeRate = performanceFee;\n            if (_isContract(_user)) {\n                feeRate = performanceFeeContract;\n            }\n            uint256 currentPerformanceFee = (earnAmount * feeRate) / 10000;\n            return currentPerformanceFee;\n        }\n        return 0;\n    }\n\n    /**\n     * @notice Calculate overdue fee.\n     * @param _user: User address\n     * @return Returns Overdue fee.\n     */\n    function calculateOverdueFee(address _user) public view returns (uint256) {\n        UserInfo storage user = userInfo[_user];\n        if (\n            user.shares \u003e 0 \u0026\u0026\n            user.locked \u0026\u0026\n            !freeFeeUsers[_user] \u0026\u0026\n            ((user.lockEndTime + UNLOCK_FREE_DURATION) \u003c block.timestamp)\n        ) {\n            uint256 pool = balanceOf() + calculateTotalPendingRp1Rewards();\n            uint256 currentAmount = (pool * (user.shares)) / totalShares - user.userBoostedShare;\n            uint256 earnAmount = currentAmount - user.lockedAmount;\n            uint256 overdueDuration = block.timestamp - user.lockEndTime - UNLOCK_FREE_DURATION;\n            if (overdueDuration \u003e DURATION_FACTOR_OVERDUE) {\n                overdueDuration = DURATION_FACTOR_OVERDUE;\n            }\n            // Rates are calculated based on the user\u0027s overdue duration.\n            uint256 overdueWeight = (overdueDuration * overdueFee) / DURATION_FACTOR_OVERDUE;\n            uint256 currentOverdueFee = (earnAmount * overdueWeight) / PRECISION_FACTOR;\n            return currentOverdueFee;\n        }\n        return 0;\n    }\n\n    /**\n     * @notice Calculate Performance Fee Or Overdue Fee\n     * @param _user: User address\n     * @return Returns  Performance Fee Or Overdue Fee.\n     */\n    function calculatePerformanceFeeOrOverdueFee(address _user) internal view returns (uint256) {\n        return calculatePerformanceFee(_user) + calculateOverdueFee(_user);\n    }\n\n    /**\n     * @notice Calculate withdraw fee.\n     * @param _user: User address\n     * @param _shares: Number of shares to withdraw\n     * @return Returns Withdraw fee.\n     */\n    function calculateWithdrawFee(address _user, uint256 _shares) public view returns (uint256) {\n        UserInfo storage user = userInfo[_user];\n        if (user.shares \u003c _shares) {\n            _shares = user.shares;\n        }\n        if (!freeFeeUsers[msg.sender] \u0026\u0026 (block.timestamp \u003c user.lastDepositedTime + withdrawFeePeriod)) {\n            uint256 pool = balanceOf() + calculateTotalPendingRp1Rewards();\n            uint256 sharesPercent = (_shares * PRECISION_FACTOR) / user.shares;\n            uint256 currentTotalAmount = (pool * (user.shares)) /\n                totalShares -\n                user.userBoostedShare -\n                calculatePerformanceFeeOrOverdueFee(_user);\n            uint256 currentAmount = (currentTotalAmount * sharesPercent) / PRECISION_FACTOR;\n            uint256 feeRate = withdrawFee;\n            if (_isContract(msg.sender)) {\n                feeRate = withdrawFeeContract;\n            }\n            uint256 currentWithdrawFee = (currentAmount * feeRate) / 10000;\n            return currentWithdrawFee;\n        }\n        return 0;\n    }\n\n    /**\n     * @notice Calculates the total pending rewards that can be harvested\n     * @return Returns total pending rp1 rewards\n     */\n    function calculateTotalPendingRp1Rewards() public view returns (uint256) {\n        uint256 amount = masterchefV2.pendingRp1(rp1PoolPID, address(this));\n        return amount;\n    }\n\n    function getPricePerFullShare() external view returns (uint256) {\n        return totalShares == 0 ? 1e18 : (((balanceOf() + calculateTotalPendingRp1Rewards()) * (1e18)) / totalShares);\n    }\n\n    /**\n     * @notice Current pool available balance\n     * @dev The contract puts 100% of the tokens to work.\n     */\n    function available() public view returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Calculates the total underlying tokens\n     * @dev It includes tokens held by the contract and the boost debt amount.\n     */\n    function balanceOf() public view returns (uint256) {\n        return token.balanceOf(address(this)) + totalBoostDebt;\n    }\n\n    /**\n     * @notice Checks if address is a contract\n     */\n    function _isContract(address addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(addr)\n        }\n        return size \u003e 0;\n    }\n}"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.13;\n\nimport \"./IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"}}