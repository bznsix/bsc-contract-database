{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"},"IBEP20.sol":{"content":"pragma solidity \u003e= 0.8.8;\n\ninterface IBEP20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}"},"IPancakePair.sol":{"content":"pragma solidity \u003e= 0.8.8;\n\ninterface IPancakePair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"},"Ownable.sol":{"content":"pragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"},"sale.sol":{"content":"pragma solidity \u003e= 0.8.8;\n\nimport \"IBEP20.sol\";\nimport \"IPancakePair.sol\";\nimport \"Ownable.sol\";\n\ncontract Sale is Ownable {\n\n    IPancakePair public PAIR_WBNB_BUSD;\n    IPancakePair public PAIR_WBNB_LAND;\n    address public TOKEN;\n    address public BUSD;\n    address public SECURITIES;\n\n    uint256 public percentage = 100000;\n    uint256 public percent;\n    uint256 public basePrice;\n    address public manager;\n    bool public status;\n\n    struct Order {\n        uint256 securities;\n        uint256 tokens;\n        uint256 busd;\n        string orderId;\n        address payer;\n    }\n\n    Order[] public orders;\n    uint256 public ordersCount;\n\n    event BuyTokensEvent(address buyer, uint256 amountSecurities);\n\n    constructor(address _pair, address _pair_busd, address _token, address _busd, address _securities) {\n        percent = 10000;\n        PAIR_WBNB_LAND = IPancakePair(_pair);\n        PAIR_WBNB_BUSD = IPancakePair(_pair_busd);\n        TOKEN = _token;\n        BUSD = _busd;\n        SECURITIES = _securities;\n        manager = _msgSender();\n        ordersCount = 0;\n        basePrice = 50;\n        status = false;\n    }\n\n    modifier onlyManager() {\n        require(_msgSender() == manager, \"Wrong sender\");\n        _;\n    }\n\n    modifier onlyActive() {\n        require(status == true, \"Sale: not active\");\n        _;\n    }\n\n    function changeManager(address newManager) public onlyOwner {\n        manager = newManager;\n    }\n\n    function changeStatus(bool _status) public onlyOwner {\n        status = _status;\n    }\n\n    function setPrice(uint256 priceInBUSD) public onlyManager {\n        basePrice = priceInBUSD;\n    }\n\n    function buyToken(uint256 amountBUSD, string memory orderId) public onlyActive returns(bool) {\n        uint256 amountSecurities = (amountBUSD / basePrice) / (10**IBEP20(BUSD).decimals());\n        (uint256 amountA, uint256 amountB) = calculateAmounts(amountBUSD);\n        Order memory order;\n        require(IBEP20(BUSD).transferFrom(_msgSender(), address(this), amountA), \"transferFrom: BUSD error\");\n        require(IBEP20(TOKEN).transferFrom(_msgSender(), address(this), amountB), \"transferFrom: TOKEN error\");\n        require(IBEP20(SECURITIES).transfer(_msgSender(), amountSecurities), \"transfer: SEC error\");\n\n        order.busd = amountA;\n        order.tokens = amountB;\n        order.securities = amountSecurities;\n        order.orderId = orderId;\n        order.payer = _msgSender();\n        orders.push(order);\n        ordersCount += 1;\n\n        emit BuyTokensEvent(_msgSender(), amountSecurities);\n        return true;\n    }\n\n    function sendBack(uint256 amount, address token) public onlyOwner returns(bool) {\n        require(IBEP20(token).transfer(_msgSender(), amount), \"Transfer: error\");\n        return true;\n    }\n\n    function buyTokenView(uint256 amountBUSD) public view returns(uint256 busd, uint256 token, uint256 securities) {\n        uint256 amountSecurities = (amountBUSD / basePrice) / (10**IBEP20(BUSD).decimals());\n        (uint256 amountA, uint256 amountB) = calculateAmounts(amountBUSD);\n        return (\n        amountA, amountB, amountSecurities\n         );\n    }\n\n    function calculatePrice() public view returns(uint256){\n       uint256 price_bnb = getWBNBPrice();\n       uint256 price_land = getLANDPrice();\n       uint256 price_land_busd = (price_land * price_bnb) / 1e18;\n       return price_land_busd;\n    }\n\n    function getWBNBPrice() public view returns(uint256) {\n       (uint256 reserve0, uint256 reserve1,) = PAIR_WBNB_BUSD.getReserves();\n       uint res1 = reserve1*(10**18);\n       uint256 price_bnb = res1 / reserve0;\n       return price_bnb;\n    }\n\n    function getLANDPrice() public view returns(uint256) {\n       (uint256 reserve2, uint256 reserve3,) = PAIR_WBNB_LAND.getReserves();\n       uint res3 = reserve3*(10**IBEP20(TOKEN).decimals());\n       uint256 price_land = res3 / reserve2;\n       return price_land;\n    }\n\n    function calculateAmounts(uint256 amountToken) public view returns(uint256, uint256) {\n        uint256 price = calculatePrice();\n        uint256 amountB = (amountToken * percent) / percentage;\n        uint256 amountA = amountToken - amountB;\n        uint256 amountC = (amountB * 10**IBEP20(TOKEN).decimals()) / price ;\n        return (amountA, amountC);\n    }\n\n}\n"}}