{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity \u003e=0.8.13;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n}"},"IMasterChef.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface IMasterChef {\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    function enterStaking(uint256 _amount) external;\n\n    function leaveStaking(uint256 _amount) external;\n\n    function pendingRp1(uint256 _pid, address _user) external view returns (uint256);\n\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\n\n    function emergencyWithdraw(uint256 _pid) external;\n}"},"MasterChefV2.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\npragma experimental ABIEncoderV2;\n\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\nimport \"./ReentrancyGuard.sol\";\nimport \"./IERC20.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./IMasterChef.sol\";\n\n/// @notice The (older) MasterChef contract gives out a constant number of RP1 tokens per block.\n/// It is the only address with minting rights for RP1.\n/// The idea for this MasterChef V2 (MCV2) contract is therefore to be the owner of a dummy token\n/// that is deposited into the MasterChef V1 (MCV1) contract.\n/// The allocation point for this pool on MCV1 is the total allocation point for all pools that receive incentives.\ncontract MasterChefV2 is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /// @notice Info of each MCV2 user.\n    /// `amount` LP token amount the user has provided.\n    /// `rewardDebt` Used to calculate the correct amount of rewards. See explanation below.\n    ///\n    /// We do some fancy math here. Basically, any point in time, the amount of RP1s\n    /// entitled to a user but is pending to be distributed is:\n    ///\n    ///   pending reward = (user share * pool.accRp1PerShare) - user.rewardDebt\n    ///\n    ///   Whenever a user deposits or withdraws LP tokens to a pool. Here\u0027s what happens:\n    ///   1. The pool\u0027s `accRp1PerShare` (and `lastRewardBlock`) gets updated.\n    ///   2. User receives the pending reward sent to his/her address.\n    ///   3. User\u0027s `amount` gets updated. Pool\u0027s `totalBoostedShare` gets updated.\n    ///   4. User\u0027s `rewardDebt` gets updated.\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt;\n        uint256 boostMultiplier;\n    }\n\n    /// @notice Info of each MCV2 pool.\n    /// `allocPoint` The amount of allocation points assigned to the pool.\n    ///     Also known as the amount of \"multipliers\". Combined with `totalXAllocPoint`, it defines the % of\n    ///     RP1 rewards each pool gets.\n    /// `accRp1PerShare` Accumulated RP1s per share, times 1e12.\n    /// `lastRewardBlock` Last block number that pool update action is executed.\n    /// `isRegular` The flag to set pool is regular or special. See below:\n    ///     In MasterChef V2 farms are \"regular pools\". \"special pools\", which use a different sets of\n    ///     `allocPoint` and their own `totalSpecialAllocPoint` are designed to handle the distribution of\n    ///     the RP1 rewards to all the Rp1Swap products.\n    /// `totalBoostedShare` The total amount of user shares in each pool. After considering the share boosts.\n    struct PoolInfo {\n        uint256 accRp1PerShare;\n        uint256 lastRewardBlock;\n        uint256 allocPoint;\n        uint256 totalBoostedShare;\n        bool isRegular;\n    }\n\n    /// @notice Address of MCV1 contract.\n    IMasterChef public immutable MASTER_CHEF;\n    /// @notice Address of RP1 contract.\n    IERC20 public immutable RP1;\n\n    /// @notice The only address can withdraw all the burn RP1.\n    address public burnAdmin;\n    /// @notice The contract handles the share boosts.\n    address public boostContract;\n\n    /// @notice Info of each MCV2 pool.\n    PoolInfo[] public poolInfo;\n    /// @notice Address of the LP token for each MCV2 pool.\n    IERC20[] public lpToken;\n\n    /// @notice Info of each pool user.\n    mapping(uint256 =\u003e mapping(address =\u003e UserInfo)) public userInfo;\n    /// @notice The whitelist of addresses allowed to deposit in special pools.\n    mapping(address =\u003e bool) public whiteList;\n\n    /// @notice The pool id of the MCV2 mock token pool in MCV1.\n    uint256 public immutable MASTER_PID;\n    /// @notice Total regular allocation points. Must be the sum of all regular pools\u0027 allocation points.\n    uint256 public totalRegularAllocPoint;\n    /// @notice Total special allocation points. Must be the sum of all special pools\u0027 allocation points.\n    uint256 public totalSpecialAllocPoint;\n    ///  @notice 40 rp1s per block in MCV1\n    uint256 public constant MASTERCHEF_RP1_PER_BLOCK = 40 * 1e18;\n    uint256 public constant ACC_RP1_PRECISION = 1e18;\n\n    /// @notice Basic boost factor, none boosted user\u0027s boost factor\n    uint256 public constant BOOST_PRECISION = 100 * 1e10;\n    /// @notice Hard limit for maxmium boost factor, it must greater than BOOST_PRECISION\n    uint256 public constant MAX_BOOST_PRECISION = 200 * 1e10;\n    /// @notice total rp1 rate = toBurn + toRegular + toSpecial\n    uint256 public constant RP1_RATE_TOTAL_PRECISION = 1e12;\n    /// @notice The last block number of RP1 burn action being executed.\n    /// @notice RP1 distribute % for burn\n    uint256 public rp1RateToBurn = 643750000000;\n    /// @notice RP1 distribute % for regular farm pool\n    uint256 public rp1RateToRegularFarm = 62847222222;\n    /// @notice RP1 distribute % for special pools\n    uint256 public rp1RateToSpecialFarm = 293402777778;\n\n    uint256 public lastBurnedBlock;\n\n    event Init();\n    event AddPool(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken, bool isRegular);\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\n    event UpdatePool(uint256 indexed pid, uint256 lastRewardBlock, uint256 lpSupply, uint256 accRp1PerShare);\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    event UpdateRp1Rate(uint256 burnRate, uint256 regularFarmRate, uint256 specialFarmRate);\n    event UpdateBurnAdmin(address indexed oldAdmin, address indexed newAdmin);\n    event UpdateWhiteList(address indexed user, bool isValid);\n    event UpdateBoostContract(address indexed boostContract);\n    event UpdateBoostMultiplier(address indexed user, uint256 pid, uint256 oldMultiplier, uint256 newMultiplier);\n\n    /// @param _MASTER_CHEF The Rp1Swap MCV1 contract address.\n    /// @param _RP1 The RP1 token contract address.\n    /// @param _MASTER_PID The pool id of the dummy pool on the MCV1.\n    /// @param _burnAdmin The address of burn admin.\n    constructor(\n        IMasterChef _MASTER_CHEF,\n        IERC20 _RP1,\n        uint256 _MASTER_PID,\n        address _burnAdmin\n    ) {\n        MASTER_CHEF = _MASTER_CHEF;\n        RP1 = _RP1;\n        MASTER_PID = _MASTER_PID;\n        burnAdmin = _burnAdmin;\n    }\n\n    /**\n     * @dev Throws if caller is not the boost contract.\n     */\n    modifier onlyBoostContract() {\n        require(boostContract == msg.sender, \"Ownable: caller is not the boost contract\");\n        _;\n    }\n\n    /// @notice Deposits a dummy token to `MASTER_CHEF` MCV1. This is required because MCV1 holds the minting permission of RP1.\n    /// It will transfer all the `dummyToken` in the tx sender address.\n    /// The allocation point for the dummy pool on MCV1 should be equal to the total amount of allocPoint.\n    /// @param dummyToken The address of the BEP-20 token to be deposited into MCV1.\n    function init(IERC20 dummyToken) external onlyOwner {\n        uint256 balance = dummyToken.balanceOf(msg.sender);\n        require(balance != 0, \"MasterChefV2: Balance must exceed 0\");\n        dummyToken.safeTransferFrom(msg.sender, address(this), balance);\n        dummyToken.approve(address(MASTER_CHEF), balance);\n        MASTER_CHEF.deposit(MASTER_PID, balance);\n        // MCV2 start to earn RP1 reward from current block in MCV1 pool\n        lastBurnedBlock = block.number;\n        emit Init();\n    }\n\n    /// @notice Returns the number of MCV2 pools.\n    function poolLength() public view returns (uint256 pools) {\n        pools = poolInfo.length;\n    }\n\n    /// @notice Add a new pool. Can only be called by the owner.\n    /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    /// @param _allocPoint Number of allocation points for the new pool.\n    /// @param _lpToken Address of the LP BEP-20 token.\n    /// @param _isRegular Whether the pool is regular or special. LP farms are always \"regular\". \"Special\" pools are\n    /// @param _withUpdate Whether call \"massUpdatePools\" operation.\n    /// only for RP1 distributions within Rp1Swap products.\n    function add(\n        uint256 _allocPoint,\n        IERC20 _lpToken,\n        bool _isRegular,\n        bool _withUpdate\n    ) external onlyOwner {\n        require(_lpToken.balanceOf(address(this)) \u003e= 0, \"None BEP20 tokens\");\n        // stake RP1 token will cause staked token and reward token mixed up,\n        // may cause staked tokens withdraw as reward token,never do it.\n        require(_lpToken != RP1, \"RP1 token can\u0027t be added to farm pools\");\n\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n\n        if (_isRegular) {\n            totalRegularAllocPoint = totalRegularAllocPoint.add(_allocPoint);\n        } else {\n            totalSpecialAllocPoint = totalSpecialAllocPoint.add(_allocPoint);\n        }\n        lpToken.push(_lpToken);\n\n        poolInfo.push(\n            PoolInfo({\n        allocPoint: _allocPoint,\n        lastRewardBlock: block.number,\n        accRp1PerShare: 0,\n        isRegular: _isRegular,\n        totalBoostedShare: 0\n        })\n        );\n        emit AddPool(lpToken.length.sub(1), _allocPoint, _lpToken, _isRegular);\n    }\n\n    /// @notice Update the given pool\u0027s RP1 allocation point. Can only be called by the owner.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    /// @param _allocPoint New number of allocation points for the pool.\n    /// @param _withUpdate Whether call \"massUpdatePools\" operation.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        bool _withUpdate\n    ) external onlyOwner {\n        // No matter _withUpdate is true or false, we need to execute updatePool once before set the pool parameters.\n        updatePool(_pid);\n\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n\n        if (poolInfo[_pid].isRegular) {\n            totalRegularAllocPoint = totalRegularAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        } else {\n            totalSpecialAllocPoint = totalSpecialAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        }\n        poolInfo[_pid].allocPoint = _allocPoint;\n        emit SetPool(_pid, _allocPoint);\n    }\n\n    /// @notice View function for checking pending RP1 rewards.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    /// @param _user Address of the user.\n    function pendingRp1(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo memory pool = poolInfo[_pid];\n        UserInfo memory user = userInfo[_pid][_user];\n        uint256 accRp1PerShare = pool.accRp1PerShare;\n        uint256 lpSupply = pool.totalBoostedShare;\n\n        if (block.number \u003e pool.lastRewardBlock \u0026\u0026 lpSupply != 0) {\n            uint256 multiplier = block.number.sub(pool.lastRewardBlock);\n\n            uint256 rp1Reward = multiplier.mul(rp1PerBlock(pool.isRegular)).mul(pool.allocPoint).div(\n                (pool.isRegular ? totalRegularAllocPoint : totalSpecialAllocPoint)\n            );\n            accRp1PerShare = accRp1PerShare.add(rp1Reward.mul(ACC_RP1_PRECISION).div(lpSupply));\n        }\n\n        uint256 boostedAmount = user.amount.mul(getBoostMultiplier()).div(BOOST_PRECISION);\n        return boostedAmount.mul(accRp1PerShare).div(ACC_RP1_PRECISION).sub(user.rewardDebt);\n    }\n\n    /// @notice Update rp1 reward for all the active pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid \u003c length; ++pid) {\n            PoolInfo memory pool = poolInfo[pid];\n            if (pool.allocPoint != 0) {\n                updatePool(pid);\n            }\n        }\n    }\n\n    /// @notice Calculates and returns the `amount` of RP1 per block.\n    /// @param _isRegular If the pool belongs to regular or special.\n    function rp1PerBlock(bool _isRegular) public view returns (uint256 amount) {\n        if (_isRegular) {\n            amount = MASTERCHEF_RP1_PER_BLOCK.mul(rp1RateToRegularFarm).div(RP1_RATE_TOTAL_PRECISION);\n        } else {\n            amount = MASTERCHEF_RP1_PER_BLOCK.mul(rp1RateToSpecialFarm).div(RP1_RATE_TOTAL_PRECISION);\n        }\n    }\n\n    /// @notice Calculates and returns the `amount` of RP1 per block to burn.\n    function rp1PerBlockToBurn() public view returns (uint256 amount) {\n        amount = MASTERCHEF_RP1_PER_BLOCK.mul(rp1RateToBurn).div(RP1_RATE_TOTAL_PRECISION);\n    }\n\n    /// @notice Update reward variables for the given pool.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    /// @return pool Returns the pool that was updated.\n    function updatePool(uint256 _pid) public returns (PoolInfo memory pool) {\n        pool = poolInfo[_pid];\n        if (block.number \u003e pool.lastRewardBlock) {\n            uint256 lpSupply = pool.totalBoostedShare;\n            uint256 totalAllocPoint = (pool.isRegular ? totalRegularAllocPoint : totalSpecialAllocPoint);\n\n            if (lpSupply \u003e 0 \u0026\u0026 totalAllocPoint \u003e 0) {\n                uint256 multiplier = block.number.sub(pool.lastRewardBlock);\n                uint256 rp1Reward = multiplier.mul(rp1PerBlock(pool.isRegular)).mul(pool.allocPoint).div(\n                    totalAllocPoint\n                );\n                pool.accRp1PerShare = pool.accRp1PerShare.add((rp1Reward.mul(ACC_RP1_PRECISION).div(lpSupply)));\n            }\n            pool.lastRewardBlock = block.number;\n            poolInfo[_pid] = pool;\n            emit UpdatePool(_pid, pool.lastRewardBlock, lpSupply, pool.accRp1PerShare);\n        }\n    }\n\n    /// @notice Deposit LP tokens to pool.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    /// @param _amount Amount of LP tokens to deposit.\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant {\n        PoolInfo memory pool = updatePool(_pid);\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        require(\n            pool.isRegular || whiteList[msg.sender],\n            \"MasterChefV2: The address is not available to deposit in this pool\"\n        );\n\n        uint256 multiplier = getBoostMultiplier();\n\n        if (user.amount \u003e 0) {\n            settlePendingRp1(msg.sender, _pid, multiplier);\n        }\n\n        if (_amount \u003e 0) {\n            uint256 before = lpToken[_pid].balanceOf(address(this));\n            lpToken[_pid].safeTransferFrom(msg.sender, address(this), _amount);\n            _amount = lpToken[_pid].balanceOf(address(this)).sub(before);\n            user.amount = user.amount.add(_amount);\n\n            // Update total boosted share.\n            pool.totalBoostedShare = pool.totalBoostedShare.add(_amount.mul(multiplier).div(BOOST_PRECISION));\n        }\n\n        user.rewardDebt = user.amount.mul(multiplier).div(BOOST_PRECISION).mul(pool.accRp1PerShare).div(\n            ACC_RP1_PRECISION\n        );\n        poolInfo[_pid] = pool;\n\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    /// @notice Withdraw LP tokens from pool.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    /// @param _amount Amount of LP tokens to withdraw.\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\n        PoolInfo memory pool = updatePool(_pid);\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        require(user.amount \u003e= _amount, \"withdraw: Insufficient\");\n\n        uint256 multiplier = getBoostMultiplier();\n\n        settlePendingRp1(msg.sender, _pid, multiplier);\n\n        if (_amount \u003e 0) {\n            user.amount = user.amount.sub(_amount);\n            lpToken[_pid].safeTransfer(msg.sender, _amount);\n        }\n\n        user.rewardDebt = user.amount.mul(multiplier).div(BOOST_PRECISION).mul(pool.accRp1PerShare).div(\n            ACC_RP1_PRECISION\n        );\n        poolInfo[_pid].totalBoostedShare = poolInfo[_pid].totalBoostedShare.sub(\n            _amount.mul(multiplier).div(BOOST_PRECISION)\n        );\n\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    /// @notice Harvests RP1 from `MASTER_CHEF` MCV1 and pool `MASTER_PID` to MCV2.\n    function harvestFromMasterChef() public {\n        MASTER_CHEF.deposit(MASTER_PID, 0);\n    }\n\n    /// @notice Withdraw without caring about the rewards. EMERGENCY ONLY.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        uint256 boostedAmount = amount.mul(getBoostMultiplier()).div(BOOST_PRECISION);\n        pool.totalBoostedShare = pool.totalBoostedShare \u003e boostedAmount ? pool.totalBoostedShare.sub(boostedAmount) : 0;\n\n        // Note: transfer can fail or succeed if `amount` is zero.\n        lpToken[_pid].safeTransfer(msg.sender, amount);\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n    }\n\n    /// @notice Send RP1 pending for burn to `burnAdmin`.\n    /// @param _withUpdate Whether call \"massUpdatePools\" operation.\n    function burnRp1(bool _withUpdate) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n\n        uint256 multiplier = block.number.sub(lastBurnedBlock);\n        uint256 pendingRp1ToBurn = multiplier.mul(rp1PerBlockToBurn());\n\n        // SafeTransfer RP1\n        _safeTransfer(burnAdmin, pendingRp1ToBurn);\n        lastBurnedBlock = block.number;\n    }\n\n    /// @notice Update the % of RP1 distributions for burn, regular pools and special pools.\n    /// @param _burnRate The % of RP1 to burn each block.\n    /// @param _regularFarmRate The % of RP1 to regular pools each block.\n    /// @param _specialFarmRate The % of RP1 to special pools each block.\n    /// @param _withUpdate Whether call \"massUpdatePools\" operation.\n    function updateRp1Rate(\n        uint256 _burnRate,\n        uint256 _regularFarmRate,\n        uint256 _specialFarmRate,\n        bool _withUpdate\n    ) external onlyOwner {\n        require(\n            _burnRate \u003e 0 \u0026\u0026 _regularFarmRate \u003e 0 \u0026\u0026 _specialFarmRate \u003e 0,\n            \"MasterChefV2: Rp1 rate must be greater than 0\"\n        );\n        require(\n            _burnRate.add(_regularFarmRate).add(_specialFarmRate) == RP1_RATE_TOTAL_PRECISION,\n            \"MasterChefV2: Total rate must be 1e12\"\n        );\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        // burn rp1 base on old burn rp1 rate\n        burnRp1(false);\n\n        rp1RateToBurn = _burnRate;\n        rp1RateToRegularFarm = _regularFarmRate;\n        rp1RateToSpecialFarm = _specialFarmRate;\n\n        emit UpdateRp1Rate(_burnRate, _regularFarmRate, _specialFarmRate);\n    }\n\n    /// @notice Update burn admin address.\n    /// @param _newAdmin The new burn admin address.\n    function updateBurnAdmin(address _newAdmin) external onlyOwner {\n        require(_newAdmin != address(0), \"MasterChefV2: Burn admin address must be valid\");\n        require(_newAdmin != burnAdmin, \"MasterChefV2: Burn admin address is the same with current address\");\n        address _oldAdmin = burnAdmin;\n        burnAdmin = _newAdmin;\n        emit UpdateBurnAdmin(_oldAdmin, _newAdmin);\n    }\n\n    /// @notice Update whitelisted addresses for special pools.\n    /// @param _user The address to be updated.\n    /// @param _isValid The flag for valid or invalid.\n    function updateWhiteList(address _user, bool _isValid) external onlyOwner {\n        require(_user != address(0), \"MasterChefV2: The white list address must be valid\");\n\n        whiteList[_user] = _isValid;\n        emit UpdateWhiteList(_user, _isValid);\n    }\n\n    /// @notice Update boost contract address and max boost factor.\n    /// @param _newBoostContract The new address for handling all the share boosts.\n    function updateBoostContract(address _newBoostContract) external onlyOwner {\n        require(\n            _newBoostContract != address(0) \u0026\u0026 _newBoostContract != boostContract,\n            \"MasterChefV2: New boost contract address must be valid\"\n        );\n\n        boostContract = _newBoostContract;\n        emit UpdateBoostContract(_newBoostContract);\n    }\n\n    /// @notice Update user boost factor.\n    /// @param _user The user address for boost factor updates.\n    /// @param _pid The pool id for the boost factor updates.\n    /// @param _newMultiplier New boost multiplier.\n    function updateBoostMultiplier(\n        address _user,\n        uint256 _pid,\n        uint256 _newMultiplier\n    ) external onlyBoostContract nonReentrant {\n        require(_user != address(0), \"MasterChefV2: The user address must be valid\");\n        require(poolInfo[_pid].isRegular, \"MasterChefV2: Only regular farm could be boosted\");\n        require(\n            _newMultiplier \u003e= BOOST_PRECISION \u0026\u0026 _newMultiplier \u003c= MAX_BOOST_PRECISION,\n            \"MasterChefV2: Invalid new boost multiplier\"\n        );\n\n        PoolInfo memory pool = updatePool(_pid);\n        UserInfo storage user = userInfo[_pid][_user];\n\n        uint256 prevMultiplier = getBoostMultiplier();\n        settlePendingRp1(_user, _pid, prevMultiplier);\n\n        user.rewardDebt = user.amount.mul(_newMultiplier).div(BOOST_PRECISION).mul(pool.accRp1PerShare).div(\n            ACC_RP1_PRECISION\n        );\n        pool.totalBoostedShare = pool.totalBoostedShare.sub(user.amount.mul(prevMultiplier).div(BOOST_PRECISION)).add(\n            user.amount.mul(_newMultiplier).div(BOOST_PRECISION)\n        );\n        poolInfo[_pid] = pool;\n        userInfo[_pid][_user].boostMultiplier = _newMultiplier;\n\n        emit UpdateBoostMultiplier(_user, _pid, prevMultiplier, _newMultiplier);\n    }\n\n    /// @notice Get user boost multiplier for specific pool id.\n    function getBoostMultiplier() public pure returns (uint256) {\n        return BOOST_PRECISION;\n    }\n\n    /// @notice Settles, distribute the pending RP1 rewards for given user.\n    /// @param _user The user address for settling rewards.\n    /// @param _pid The pool id.\n    /// @param _boostMultiplier The user boost multiplier in specific pool id.\n    function settlePendingRp1(\n        address _user,\n        uint256 _pid,\n        uint256 _boostMultiplier\n    ) internal {\n        UserInfo memory user = userInfo[_pid][_user];\n\n        uint256 boostedAmount = user.amount.mul(_boostMultiplier).div(BOOST_PRECISION);\n        uint256 accRp1 = boostedAmount.mul(poolInfo[_pid].accRp1PerShare).div(ACC_RP1_PRECISION);\n        uint256 pending = accRp1.sub(user.rewardDebt);\n        // SafeTransfer RP1\n        _safeTransfer(_user, pending);\n    }\n\n    /// @notice Safe Transfer RP1.\n    /// @param _to The RP1 receiver address.\n    /// @param _amount transfer RP1 amounts.\n    function _safeTransfer(address _to, uint256 _amount) internal {\n        if (_amount \u003e 0) {\n            // Check whether MCV2 has enough RP1. If not, harvest from MCV1.\n            if (RP1.balanceOf(address(this)) \u003c _amount) {\n                harvestFromMasterChef();\n            }\n            uint256 balance = RP1.balanceOf(address(this));\n            if (balance \u003c _amount) {\n                _amount = balance;\n            }\n            RP1.safeTransfer(_to, _amount);\n        }\n    }\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.13;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"./IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.13;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) \u003e= x, \"ds-math-add-overflow\");\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) \u003c= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \u0027SafeMath: division by zero\u0027);\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n}"}}