{"Clones.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\r\n * deploying minimal proxy contracts, also known as \"clones\".\r\n *\r\n * \u003e To simply and cheaply clone contract functionality in an immutable way, this standard specifies\r\n * \u003e a minimal bytecode implementation that delegates all calls to a known, fixed address.\r\n *\r\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\r\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\r\n * deterministic method.\r\n *\r\n * _Available since v3.4._\r\n */\r\nlibrary Clones {\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create opcode, which should never revert.\r\n     */\r\n    function clone(address implementation) internal returns (address instance) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create(0, ptr, 0x37)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\r\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\r\n     * the clones cannot be deployed twice at the same address.\r\n     */\r\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create2(0, ptr, 0x37, salt)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create2 failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(\r\n        address implementation,\r\n        bytes32 salt,\r\n        address deployer\r\n    ) internal pure returns (address predicted) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\r\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\r\n            mstore(add(ptr, 0x4c), salt)\r\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\r\n            predicted := keccak256(add(ptr, 0x37), 0x55)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address implementation, bytes32 salt)\r\n        internal\r\n        view\r\n        returns (address predicted)\r\n    {\r\n        return predictDeterministicAddress(implementation, salt, address(this));\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}"},"IArborSwapLock.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IArborSwapLock {\r\n    function createLiquidityLock(\r\n    address _owner,\r\n    address _token,\r\n    uint256 _amount,\r\n    uint256 _unlockDate,\r\n    string memory _logoImage\r\n  ) external payable;\r\n\r\n  function setFreeLock(address sale, bool free) external;\r\n}"},"IDEXFactory.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IDEXFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}"},"IDEXPair.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IDEXPair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"},"IDEXRouter.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * Supports the Uniswap V1 + V2 structure\r\n */\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"PublicSale.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.12;\r\n\r\nimport \"./ERC20.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./IDEXRouter.sol\";\r\nimport \"./IDEXFactory.sol\";\r\nimport \"./IDEXPair.sol\";\r\nimport \"./IArborSwapLock.sol\";\r\n\r\n\r\n\r\ninterface IAdmin {\r\n    function isAdmin(address user) external view returns (bool);\r\n}\r\n\r\ncontract ArborswapPublicSale {\r\n\r\n    IAdmin public admin;\r\n    IDEXRouter public defaultDexRouter;\r\n    IDEXPair public defaultPair;\r\n    IArborSwapLock public ArborSwapLock;\r\n    \r\n    uint256 public lpPercentage;\r\n    address public feeAddr;\r\n    address public factory;\r\n    address immutable dead = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public tokensAmountForLiquidity;\r\n    uint256 public BNBAmountForLiquidity;\r\n    uint256 public pcsListingRate;\r\n    uint256 public wlStartTime;\r\n    uint256 public wlEndTime;\r\n    bool public isWlEnabled;\r\n    bool public isSaleSuccessful;\r\n    bool public saleFinished;\r\n    uint256 public minParticipation;\r\n    uint256 public maxParticipation;\r\n    uint256 public saleStartTime;\r\n    uint256 public serviceFee;\r\n    uint8 public decimals;\r\n    bool public lpWithdrawn;\r\n    bool public leftoverWithdrawnCancelledSale;\r\n    bool public burn;\r\n    bool public isInitialized;\r\n    uint256 public liquidityUnlockTime;\r\n    uint256 public liquidityLockPeriod;\r\n \r\n\r\n    struct Sale {\r\n        // Token being sold\r\n        IERC20 token;\r\n        // Is sale created\r\n        bool isCreated;\r\n        // Are earnings withdrawn\r\n        bool earningsWithdrawn;\r\n        // Is leftover withdrawn\r\n        bool leftoverWithdrawn;\r\n        // Address of sale owner\r\n        address saleOwner; \r\n        // Price of the token quoted in BNB\r\n        uint256 presaleRate;\r\n        // Total tokens being sold\r\n        uint256 totalTokensSold;\r\n        // Total BNB Raised\r\n        uint256 totalBNBRaised;\r\n        // Sale end time\r\n        uint256 saleEnd;\r\n        // Hard cap\r\n        uint256 hardCap;\r\n        // Soft cap\r\n        uint256 softCap;\r\n    }\r\n\r\n    // Participation structure\r\n    struct Participation {\r\n        uint256 amountBought;\r\n        uint256 amountBNBPaid;\r\n        bool areTokensWithdrawn;\r\n        bool areBNBsWithdrawn;\r\n    }\r\n\r\n    // Sale\r\n    Sale public sale;\r\n\r\n    // Number of users participated in the sale.\r\n    uint256 public numberOfParticipants;\r\n\r\n    mapping(address =\u003e Participation) public userToParticipation;\r\n    // mapping if user is participated or not\r\n    mapping(address =\u003e bool) public isParticipated;\r\n\r\n    mapping(address =\u003e bool) public isWl;\r\n   \r\n\r\n    // Restricting calls only to sale owner\r\n    modifier onlySaleOwner() {\r\n        require(msg.sender == sale.saleOwner, \"Restricted to sale owner.\");\r\n        _;\r\n    }\r\n\r\n    // Restricting calls only to factory\r\n    modifier onlyFactory() {\r\n        require(msg.sender == factory, \"Restricted to factory.\");\r\n        _;\r\n    }\r\n\r\n    // Restricting calls only to sale owner or Admin\r\n    modifier onlySaleOwnerOrAdmin() {\r\n        require(\r\n            msg.sender == sale.saleOwner || admin.isAdmin(msg.sender),\r\n            \"Restricted to sale owner and admin.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Restricting calls only to sale admin\r\n    modifier onlyAdmin() {\r\n        require(\r\n            admin.isAdmin(msg.sender),\r\n            \"Only admin can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Events\r\n    event TokensSold(address user, uint256 amount);\r\n    event TokensWithdrawn(address user, uint256 amount);\r\n    event SaleCreated(\r\n        address saleOwner,\r\n        uint256 presaleRate,\r\n        uint256 saleEnd,\r\n        uint256 _hardCap,\r\n        uint256 _softCap\r\n    );\r\n    event LogwithdrawUserFundsIfSaleCancelled(address user, uint256 amount);\r\n    event LogFinishSale(bool isSaleSuccessful);\r\n    event LogWithdrawLP(uint256 amount);\r\n    event LogLockLiquidity(uint256 timeStart, uint256 unlockTime);\r\n    event LogChangeLpPercentage(uint256 _percentage);\r\n    event LogBurn(uint256 _amount);\r\n    event LogEditMaxParticipation(uint256 maxP);\r\n    event LogEditMinParticipation(uint256 minP);\r\n    event LogChangeSaleOwner(address newOwner);\r\n    event LogSetWLEnabled(bool enabled);\r\n    event LogSetAddressWL(bool _isWL);\r\n\r\n    function init(\r\n        address[] memory setupAddys,\r\n        uint256[] memory uints,\r\n        address _feeAddr,\r\n        uint256 _serviceFee,\r\n        bool _burn,\r\n        address lock\r\n    )public{\r\n        require(isInitialized == false, \u0027Already Initialized\u0027);\r\n        require(setupAddys[0] != address(0), \"Address zero validation\");\r\n        require(setupAddys[1] != address(0), \"Address zero validation\");\r\n        require(uints[2] \u003e= 5100 \u0026\u0026 uints[2] \u003c= 10000, \"Min 51%, Max 100%\");\r\n        require(\r\n            uints[0] \u003c uints[1],\r\n            \"Max participation should be greater than min participation\"\r\n        );\r\n        IDEXRouter _dexRouter = IDEXRouter(setupAddys[0]);\r\n        defaultDexRouter = _dexRouter;\r\n        admin = IAdmin(setupAddys[1]);\r\n        ArborSwapLock = IArborSwapLock(lock);\r\n        feeAddr = _feeAddr;\r\n        serviceFee = _serviceFee;\r\n        minParticipation = uints[0];\r\n        maxParticipation = uints[1];\r\n        lpPercentage = uints[2];\r\n        pcsListingRate = uints[3];\r\n        liquidityLockPeriod = uints[4];\r\n        factory = msg.sender;\r\n        burn = _burn;\r\n        isInitialized = true;\r\n        setSaleParams(\r\n            setupAddys[2],\r\n            setupAddys[3],\r\n            uints[5],\r\n            uints[6],\r\n            uints[7],\r\n            uints[8],\r\n            uints[9]\r\n        );\r\n    }\r\n\r\n    /// @notice     Admin function to set sale parameters\r\n    function setSaleParams(\r\n        address _token,\r\n        address _saleOwner,\r\n        uint256 _presaleRate,\r\n        uint256 _saleEnd,\r\n        uint256 _saleStart,\r\n        uint256 _hardCap,\r\n        uint256 _softCap\r\n    ) private {\r\n        require(!sale.isCreated, \"Sale already created.\");\r\n        require(\r\n            _token != address(0),\r\n            \"setSaleParams: Token address can not be 0.\"\r\n        );\r\n        require(_saleOwner != address(0), \"Invalid sale owner address.\");\r\n        require(\r\n            _presaleRate != 0 \u0026\u0026\r\n                _hardCap != 0 \u0026\u0026\r\n                _softCap != 0 \u0026\u0026\r\n                _saleEnd \u003e block.timestamp,\r\n            \"Invalid input.\"\r\n        );\r\n        require(\r\n            _saleEnd \u003c= block.timestamp + 8640000,\r\n            \"Max sale duration is 100 days\"\r\n        );\r\n        require(\r\n            _saleStart \u003e= block.timestamp,\r\n            \"Sale start should be in the future\"\r\n        );\r\n        require(_saleStart \u003c _saleEnd, \"Sale start should be before sale end\");\r\n\r\n        decimals = IERC20Metadata(_token).decimals();\r\n\r\n        // Set params\r\n        sale.token = IERC20(_token);\r\n        sale.isCreated = true;\r\n        sale.saleOwner = _saleOwner;\r\n        sale.presaleRate = _presaleRate;\r\n        sale.saleEnd = _saleEnd;\r\n        sale.hardCap = _hardCap;\r\n        sale.softCap = _softCap;\r\n        saleStartTime = _saleStart;\r\n       \r\n\r\n        // Emit event\r\n        emit SaleCreated(\r\n            sale.saleOwner,\r\n            sale.presaleRate,\r\n            sale.saleEnd,\r\n            sale.hardCap,\r\n            sale.softCap\r\n        );\r\n    }\r\n\r\n\r\n    function changeSaleOwner(address _saleOwner) external onlySaleOwner {\r\n        require(block.timestamp \u003c saleStartTime, \"Sale already started\");\r\n        require(_saleOwner != sale.saleOwner, \"Already set to this value\");\r\n        require(_saleOwner != address(0), \"Address 0 validation\");\r\n        sale.saleOwner = _saleOwner;\r\n        emit LogChangeSaleOwner(_saleOwner);\r\n    }\r\n\r\n\r\n    function calculateMaxTokensForLiquidity() public view returns (uint256) {\r\n        uint256 _tokensAmountForLiquidity = (((sale.hardCap * lpPercentage)/10000) * pcsListingRate);\r\n        _tokensAmountForLiquidity = (_tokensAmountForLiquidity / 10**18);\r\n        return (_tokensAmountForLiquidity);\r\n    }\r\n\r\n    // Function for owner to deposit tokens, can be called only once.\r\n    function depositTokens() external onlyFactory {\r\n        // Require that setSaleParams was called\r\n        require(sale.hardCap \u003e 0, \"Sale parameters not set.\");\r\n\r\n        uint256 lpTokens = calculateMaxTokensForLiquidity();\r\n\r\n        uint256 toSell = (sale.hardCap * sale.presaleRate) /\r\n            10**18;\r\n       \r\n\r\n        uint256 amount = toSell + lpTokens;\r\n\r\n        // Perform safe transfer\r\n        sale.token.transferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    // Participate function for manual participation\r\n    function participate() external payable {\r\n        require(\r\n            msg.value \u003e= minParticipation,\r\n            \"Amount should be greater than minParticipation\"\r\n        );\r\n        require(\r\n            msg.value \u003c= maxParticipation,\r\n            \"Amount should be not greater than maxParticipation\"\r\n        );\r\n        _participate(msg.sender, msg.value);\r\n    }\r\n\r\n    // Function to participate in the sales\r\n    function _participate(\r\n        address user,\r\n        uint256 amountBNB\r\n    ) private {\r\n        require(block.timestamp \u003e= saleStartTime, \"Sale haven\u0027t started yet\");\r\n\r\n        require(\r\n            sale.totalBNBRaised + amountBNB \u003c= sale.hardCap ,\r\n            \"Hard Cap Reached.\"\r\n        );\r\n        \r\n        if(isWlEnabled){\r\n            require(isWl[user] == true, \"Only for whitelisted users\");\r\n        }\r\n\r\n        require(block.timestamp \u003c= sale.saleEnd, \"Sale finished\");\r\n       \r\n        Participation storage p = userToParticipation[msg.sender];\r\n\r\n        if(isParticipated[user]){\r\n           require(p.amountBNBPaid + amountBNB \u003c= maxParticipation, \"Exceeds max participation\");\r\n        }\r\n\r\n        uint256 amountOfTokensBuying = (amountBNB * sale.presaleRate) / 10**18;\r\n\r\n        // Must buy more than 0 tokens\r\n        require(amountOfTokensBuying \u003e 0, \"Can\u0027t buy 0 tokens\");\r\n\r\n        // Increase amount of sold tokens\r\n        sale.totalTokensSold = sale.totalTokensSold + amountOfTokensBuying;\r\n\r\n        // Increase amount of BNB raised\r\n        sale.totalBNBRaised = sale.totalBNBRaised + amountBNB;\r\n\r\n\r\n        p.amountBought = p.amountBought + amountOfTokensBuying;\r\n        p.amountBNBPaid = p.amountBNBPaid + amountBNB;\r\n      \r\n        userToParticipation[user] = p;\r\n  \r\n        // Mark user is participated\r\n        if(!isParticipated[user]){\r\n           isParticipated[user] = true;\r\n        }\r\n       \r\n        // Increment number of participants in the Sale.\r\n        numberOfParticipants++;\r\n\r\n        if (sale.totalBNBRaised \u003e= sale.hardCap) {\r\n            sale.saleEnd = block.timestamp;\r\n        }\r\n\r\n        emit TokensSold(user, amountOfTokensBuying);\r\n\r\n    }\r\n\r\n    // Expose function where user can withdraw sale tokens.\r\n    function withdraw() external {\r\n        // require(block.timestamp \u003e sale.saleEnd, \"Sale is running\");\r\n        require(\r\n            saleFinished == true \u0026\u0026 isSaleSuccessful == true,\r\n            \"Sale was cancelled\"\r\n        );\r\n        require(isParticipated[msg.sender], \"User is not a participant.\");\r\n\r\n        // Retrieve participation from storage\r\n        Participation storage p = userToParticipation[msg.sender];\r\n\r\n        require(p.areTokensWithdrawn == false, \"Already withdrawn\");\r\n\r\n        uint256 amountWithdrawing = p.amountBought;\r\n\r\n        p.areTokensWithdrawn = true;\r\n\r\n        if (amountWithdrawing \u003e 0) {\r\n            // Transfer tokens to user\r\n            sale.token.transfer(msg.sender, amountWithdrawing);\r\n            // Trigger an event\r\n            emit TokensWithdrawn(msg.sender, amountWithdrawing);\r\n        }\r\n    }\r\n\r\n    function setWLEnabled(bool _enabled) external onlySaleOwner {\r\n        require(isWlEnabled != _enabled, \"Already set to this value\");\r\n        isWlEnabled = _enabled;\r\n        emit LogSetWLEnabled(_enabled);\r\n    }\r\n\r\n    function setMultiplyAddressesWL(address[] memory users, bool _isWL) external onlySaleOwner {\r\n        for (uint256 i = 0; i \u003c users.length; i++){\r\n            setAddressWL(users[i], _isWL);\r\n        }\r\n    }\r\n\r\n    function setAddressWL(address user, bool _isWL)  private {\r\n        require(isWl[user] != _isWL, \"Already set to this value\");\r\n        isWl[user] = _isWL;\r\n        emit LogSetAddressWL(_isWL);\r\n    }\r\n\r\n    function finishSale() external onlySaleOwnerOrAdmin {\r\n        require(block.timestamp \u003e= sale.saleEnd, \"Sale is not finished yet\");\r\n        require(saleFinished == false, \"The function can be called only once\");\r\n        if (sale.totalBNBRaised \u003e= sale.softCap) {\r\n            BNBAmountForLiquidity =\r\n                (sale.totalBNBRaised * lpPercentage) /\r\n                10000;\r\n            tokensAmountForLiquidity =\r\n                (BNBAmountForLiquidity * pcsListingRate) /\r\n                10**18;\r\n            isSaleSuccessful = true;\r\n            saleFinished = true;\r\n            addLiquidity(tokensAmountForLiquidity, BNBAmountForLiquidity);\r\n            lockLiquidity();\r\n            if(burn){\r\n              burnTokens();\r\n            }else{\r\n                refundTokens();\r\n            }\r\n        } else {\r\n            isSaleSuccessful = false;\r\n            saleFinished = true;\r\n            withdrawLeftoverIfSaleCancelled();\r\n        }\r\n        emit LogFinishSale(isSaleSuccessful);\r\n    }\r\n\r\n    function cancelSale() external onlySaleOwner {\r\n        require(saleFinished == false, \"The function can be called only once\");\r\n        saleFinished = true;\r\n        isSaleSuccessful = false;\r\n        withdrawLeftoverIfSaleCancelled();\r\n        emit LogFinishSale(isSaleSuccessful);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        sale.token.approve(address(defaultDexRouter), tokenAmount);\r\n        // add the liquidity\r\n        defaultDexRouter.addLiquidityETH{value: ethAmount}(\r\n            address(sale.token),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this),\r\n            block.timestamp + 60\r\n        );\r\n    }\r\n\r\n    function lockLiquidity() private {\r\n        liquidityUnlockTime = block.timestamp + liquidityLockPeriod;\r\n        address _defaultPair = IDEXFactory(defaultDexRouter.factory()).getPair(\r\n            address(sale.token),\r\n            defaultDexRouter.WETH()\r\n        );\r\n        defaultPair = IDEXPair(_defaultPair);\r\n        defaultPair.approve(address(ArborSwapLock), defaultPair.balanceOf(address(this)));\r\n        ArborSwapLock.createLiquidityLock{value: 0}(sale.saleOwner, _defaultPair, defaultPair.balanceOf(address(this)), liquidityUnlockTime,\u0027\u0027);\r\n        emit LogLockLiquidity(block.timestamp, liquidityUnlockTime);\r\n    }\r\n\r\n    // transfers bnb correctly\r\n    function withdrawUserFundsIfSaleCancelled() external {\r\n        require(\r\n            saleFinished == true \u0026\u0026 isSaleSuccessful == false,\r\n            \"Sale wasn\u0027t cancelled.\"\r\n        );\r\n        require(isParticipated[msg.sender], \"Did not participate.\");\r\n        // Retrieve participation from storage\r\n        Participation storage p = userToParticipation[msg.sender];\r\n        require(p.areBNBsWithdrawn == false, \"Already withdrawn\");\r\n        p.areBNBsWithdrawn = true;\r\n        uint256 amountBNBWithdrawing = p.amountBNBPaid;\r\n        safeTransferBNB(msg.sender, amountBNBWithdrawing);\r\n        emit LogwithdrawUserFundsIfSaleCancelled(\r\n            msg.sender,\r\n            amountBNBWithdrawing\r\n        );\r\n    }\r\n\r\n    function burnTokens() private {\r\n        uint256 all = sale.token.balanceOf(address(this));\r\n        uint256 need = sale.totalTokensSold;\r\n        uint256 amountToBurn = all - need;\r\n        if (amountToBurn \u003e 0) {\r\n            sale.token.transfer(dead, amountToBurn);\r\n        }\r\n        emit LogBurn(amountToBurn);\r\n    }\r\n\r\n    function refundTokens() private {\r\n        uint256 all = sale.token.balanceOf(address(this));\r\n        uint256 need = sale.totalTokensSold;\r\n        uint256 amountToRefund = all - need;\r\n        if (amountToRefund \u003e 0) {\r\n            sale.token.transfer(sale.saleOwner, amountToRefund);\r\n        }\r\n    }\r\n\r\n    // Internal function to handle safe transfer\r\n    function safeTransferBNB(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success);\r\n    }\r\n\r\n    // Function to withdraw only earnings\r\n    function withdrawEarnings() external onlySaleOwner {\r\n        withdrawEarningsInternal();\r\n    }\r\n\r\n    // Function to withdraw earnings\r\n    function withdrawEarningsInternal() private {\r\n        require(\r\n            saleFinished == true \u0026\u0026 isSaleSuccessful == true,\r\n            \"Sale was cancelled\"\r\n        );\r\n        // Make sure owner can\u0027t withdraw twice\r\n        require(!sale.earningsWithdrawn, \"can\u0027t withdraw twice\");\r\n        sale.earningsWithdrawn = true;\r\n        // Earnings amount of the owner in BNB\r\n        uint256 totalFee = _calculateServiceFee(sale.totalBNBRaised);\r\n        uint256 totalProfit = sale.totalBNBRaised - BNBAmountForLiquidity;\r\n        uint256 saleOwnerProfit = totalProfit - totalFee;\r\n\r\n        safeTransferBNB(msg.sender, saleOwnerProfit);\r\n        safeTransferBNB(feeAddr, totalFee);\r\n    }\r\n\r\n    function withdrawLeftoverIfSaleCancelled() private {\r\n        require(\r\n            saleFinished == true \u0026\u0026 isSaleSuccessful == false,\r\n            \"Sale wasnt cancelled\"\r\n        );\r\n\r\n\r\n        // Make sure owner can\u0027t withdraw twice\r\n        require(!leftoverWithdrawnCancelledSale, \"can\u0027t withdraw twice\");\r\n        leftoverWithdrawnCancelledSale = true;\r\n\r\n        // Amount of tokens which are not sold\r\n        uint256 leftover = sale.token.balanceOf(address(this));\r\n\r\n        if (leftover \u003e 0) {\r\n            sale.token.transfer(msg.sender, leftover);\r\n        }\r\n    }\r\n\r\n\r\n    function _calculateServiceFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (_amount * serviceFee) / 10000;\r\n    }\r\n\r\n}"},"SaleFactory.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.12;\r\n\r\nimport \"./PublicSale.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./ERC20.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./Clones.sol\";\r\nimport \"./IArborSwapLock.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\n\r\n\r\n\r\ncontract SalesFactory is Ownable {\r\n    IAdmin public admin;\r\n    address payable public feeAddr;\r\n    address public immutable masterSale;\r\n    IArborSwapLock public ArborSwapLock;\r\n    uint256 public fee;\r\n    uint256 public serviceFee;\r\n    mapping(uint256 =\u003e address) public saleIdToAddress;\r\n    mapping(address =\u003e address) public saleAddressToSaleOwner;\r\n\r\n    // Expose so query can be possible only by position as well\r\n    address[] public allSales;\r\n\r\n    event SaleDeployed(address saleContract);\r\n    event SaleOwnerAndTokenSetInFactory(\r\n        address sale,\r\n        address saleOwner,\r\n        address saleToken\r\n    );\r\n    event LogSetFee(uint256 newFee);\r\n    event LogSetFeeAddr(address newAddress);\r\n    event LogWithdrawalBNB(address account, uint256 amount);\r\n\r\n    modifier onlyAdmin() {\r\n        require(admin.isAdmin(msg.sender), \"Only Admin can deploy sales\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _adminContract, address masterSale_) {\r\n        require(_adminContract != address(0), \"Invalid address\");\r\n        admin = IAdmin(_adminContract);\r\n        masterSale = masterSale_;\r\n    }\r\n\r\n    function setFee(uint256 _fee) external onlyAdmin {\r\n        require(fee != _fee, \"Already set to this value\");\r\n        fee = _fee;\r\n        emit LogSetFee(_fee);\r\n    }\r\n\r\n    function setLock(address lock) external onlyAdmin {\r\n        ArborSwapLock = IArborSwapLock(lock);\r\n    }\r\n\r\n    function setServiceFee(uint256 _serviceFee) external onlyAdmin {\r\n        require(serviceFee != _serviceFee, \"Already set to this value\");\r\n        serviceFee = _serviceFee;\r\n        emit LogSetFee(_serviceFee);\r\n    }\r\n\r\n    function setFeeAddr(address payable _feeAddr) external onlyAdmin {\r\n        require(_feeAddr != address(0), \"address zero validation\");\r\n        feeAddr = _feeAddr;\r\n        emit LogSetFeeAddr(_feeAddr);\r\n    }\r\n\r\n    function calculateMaxTokensForLiquidity(\r\n        uint256 hardCap,\r\n        uint256 lpPerc,\r\n        uint256 pcsListingRate,\r\n        uint8 tokenDecimals\r\n    ) public  returns (uint256) {\r\n  \r\n        uint256 _tokensAmountForLiquidity = (((hardCap * lpPerc) / 10000) * pcsListingRate);\r\n        _tokensAmountForLiquidity = (_tokensAmountForLiquidity / (10 ** 18));\r\n        \r\n        return _tokensAmountForLiquidity;\r\n    }\r\n\r\n\r\n    function deployNormalSale(\r\n        address[] memory setupAddys,\r\n        uint256[] memory uints,\r\n        bool burn\r\n    ) external payable{\r\n        require(msg.value \u003e= fee, \"Not enough bnb sent\");\r\n        \r\n        uint8 decimals = IERC20Metadata(setupAddys[2]).decimals();\r\n\r\n        uint256 lpTokens = calculateMaxTokensForLiquidity(\r\n            uints[8],\r\n            uints[2],\r\n            uints[3],\r\n            decimals\r\n        );\r\n\r\n \r\n\r\n        uint256 toSell = (uints[8] * uints[5]) /\r\n            10**18;\r\n       \r\n\r\n        uint256 amount = toSell + lpTokens;\r\n\r\n\r\n\r\n        IERC20(setupAddys[2]).transferFrom(\r\n            setupAddys[3],\r\n            address(this),\r\n            amount\r\n        );\r\n\r\n\r\n        address  clone = Clones.clone(masterSale);\r\n\r\n        ArborswapPublicSale(clone).init(\r\n            setupAddys,\r\n            uints,\r\n            feeAddr,\r\n            serviceFee,\r\n            burn,\r\n            address(ArborSwapLock)\r\n        );\r\n\r\n        \r\n        IERC20(setupAddys[2]).approve(clone, amount);\r\n        ArborswapPublicSale(clone).depositTokens();\r\n        \r\n        uint256 id = allSales.length;\r\n        saleIdToAddress[id] = clone;\r\n        saleAddressToSaleOwner[clone] = msg.sender;\r\n\r\n        allSales.push(clone);\r\n        feeAddr.transfer(msg.value);\r\n        ArborSwapLock.setFreeLock(clone, true);\r\n\r\n        emit SaleDeployed(clone);\r\n    }\r\n\r\n    // Function to return number of pools deployed\r\n    function getNumberOfSalesDeployed() external view returns (uint256) {\r\n        return allSales.length;\r\n    }\r\n\r\n    function getSaleAddress(uint256 id) external view returns (address) {\r\n        return saleIdToAddress[id];\r\n    }\r\n\r\n    // Function\r\n    function getLastDeployedSale() external view returns (address) {\r\n        //\r\n        if (allSales.length \u003e 0) {\r\n            return allSales[allSales.length - 1];\r\n        }\r\n        return address(0);\r\n    }\r\n\r\n    // Function to get all sales\r\n    function getAllSales(uint256 startIndex, uint256 endIndex)\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        require(endIndex \u003e startIndex, \"Bad input\");\r\n        require(endIndex \u003c= allSales.length, \"access out of rage\");\r\n\r\n        address[] memory sales = new address[](endIndex - startIndex);\r\n        uint256 index = 0;\r\n\r\n        for (uint256 i = startIndex; i \u003c endIndex; i++) {\r\n            sales[index] = allSales[i];\r\n            index++;\r\n        }\r\n\r\n        return sales;\r\n    }\r\n\r\n    function withdrawBNB(address payable account, uint256 amount)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        require(amount \u003c= (address(this)).balance, \"Incufficient funds\");\r\n        account.transfer(amount);\r\n        emit LogWithdrawalBNB(account, amount);\r\n    }\r\n}"}}