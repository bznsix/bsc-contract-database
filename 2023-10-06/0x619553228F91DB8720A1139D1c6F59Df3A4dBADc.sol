{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"},"BasicAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\nabstract contract BasicAccessControl is Context {\r\n    struct RoleData {\r\n        mapping(address =\u003e bool) members;\r\n        uint8 adminRole;\r\n    }\r\n\r\n    mapping(uint8 =\u003e RoleData) private _roles;\r\n\r\n    event RoleAdminChanged (uint8 indexed role, uint8 indexed previousAdminRole, uint8 indexed newAdminRole);\r\n    event RoleGranted (uint8 indexed role, address indexed account, address indexed sender);\r\n    event RoleRevoked (uint8 indexed role, address indexed account, address indexed sender);\r\n\r\n    modifier onlyRole(uint8 role) {\r\n        require(hasRole(role, _msgSender()), \"Caller has not the needed Role\");\r\n        _;\r\n    }\r\n\r\n    function hasRole(uint8 role, address account) public view returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    function getRoleAdmin(uint8 role) public view returns (uint8) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    function grantRole(uint8 role, address account) public virtual onlyRole (getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    function revokeRole(uint8 role, address account) public virtual onlyRole (getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    function renounceRole(uint8 role, address account) public virtual {\r\n         require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    function _setupRole(uint8 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    function _setRoleAdmin(uint8 role, uint8 adminRole) internal virtual {\r\n        uint8 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    function _grantRole(uint8 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(uint8 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"},"IBaseToken.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.8.11;\r\n\r\nimport \"./IERC20Metadata.sol\";\r\n\r\ninterface IBaseToken is IERC20Metadata {\r\n\r\n    function maxWalletBalance () external pure returns (uint256);\r\n\r\n    function salesClearance () external;\r\n\r\n    function SendAndFreeze (address _recipient, uint256 _amountToFreeze, uint64 _freezeDuration) external;\r\n\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"},"ILiquidityVault.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\n\r\ninterface ILiquidityVault {\r\n\r\n    function autoLiquidity(uint256 _numTokensToLiquidity) external returns(uint256, uint256);\r\n\r\n    function getTokenPrice() external view returns(uint256);\r\n\r\n    function isInitialized() external view returns (bool);\r\n\r\n    function isAddingLiquidity() external view returns (bool);\r\n\r\n    function liquidityPair() external view returns (address);\r\n\r\n    function baseToken() external view returns (address);\r\n    \r\n    function contractManager() external view returns (address);\r\n\r\n    function externalSafe() external view returns (address);\r\n}"},"Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.11;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\r\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length \u003e 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n"},"SalesVault.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\n\r\nimport \"./Context.sol\";\r\nimport \"./SafeERC20.sol\";\r\nimport \"./Pausable.sol\";\r\nimport \"./ReentrancyGuard.sol\";\r\nimport \"./BasicAccessControl.sol\";\r\n\r\n//    Interfaces   \r\n\r\nimport \"./IBaseToken.sol\";\r\nimport \"./ILiquidityVault.sol\";\r\n\r\n/**\r\n * @title Salesvault\r\n * @dev Salesvault is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. \r\n */\r\ncontract SalesVault is BasicAccessControl, Pausable, ReentrancyGuard {\r\n    using SafeERC20 for IBaseToken;\r\n\r\n    // The token being sold\r\n    address private _baseToken;\r\n\r\n    // Address where funds are collected\r\n    address payable private _liquidityVault;\r\n\r\n    // The Discount Rate is the discount applied to the sales.\r\n    uint256 private _discountRate;\r\n    uint64 private _freezeDuration;\r\n\r\n    // Amount of funds raised and tokens sold\r\n    uint256 private _fundsRaised;\r\n    uint256 private _tokensSold;\r\n\r\n    mapping(address =\u003e uint256) _salesLedger;\r\n\r\n    uint256 _maxInvestPerUser;\r\n\r\n    bool public isSalesActive;\r\n\r\n    uint8 constant Contract_Manager     = 1;\r\n    uint8 constant Financial_Controller = 11;\r\n    uint8 constant Compliance_Auditor   = 12;\r\n\r\n    // ======================\r\n    //    E  V  E  N  T  S\r\n    // ======================\r\n\r\n    event TokensPurchased(address indexed investor, uint256 valueInvested, uint256 tokensReceived);\r\n    event SalesFinalized(address authorizer, uint256 tokensSold, uint256 fundsRaised);\r\n    event SalesInitiated(address authorizer, uint256 tokensToSale);\r\n    event SecurityPause(address authorizer, bool isPause);\r\n\r\n    // ======================\r\n    // Constructor Function\r\n    // ======================\r\n\r\n    constructor (address payable liquidityVault) {\r\n        require(address(liquidityVault) != address(0), \"Vault address invalid\");\r\n        require(ILiquidityVault(liquidityVault).isInitialized(), \"Vault not initialized\");\r\n\r\n        _liquidityVault   = liquidityVault;\r\n        _baseToken        = ILiquidityVault(liquidityVault).baseToken();\r\n        _maxInvestPerUser = IBaseToken(_baseToken).maxWalletBalance() / 5;\r\n\r\n        address contractManager = ILiquidityVault(_liquidityVault).contractManager();\r\n\r\n        _setupRole(Contract_Manager,        contractManager);\r\n        _setupRole(Financial_Controller,    contractManager);\r\n        _setupRole(Compliance_Auditor,      contractManager);\r\n\r\n        _setRoleAdmin(Contract_Manager,     Contract_Manager);\r\n        _setRoleAdmin(Financial_Controller, Contract_Manager);\r\n        _setRoleAdmin(Compliance_Auditor,   Contract_Manager);\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function ***DO NOT OVERRIDE***\r\n     * Note that other contracts will transfer funds with a base gas stipend\r\n     * of 2300, which is not enough to call buyTokens. Consider calling\r\n     * buyTokens directly when purchasing tokens from a contract.\r\n     */\r\n    receive () external payable {\r\n        buyTokens(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev low level token purchase ***DO NOT OVERRIDE***\r\n     * This function has a non-reentrancy guard, so it shouldn\u0027t be called by\r\n     * another `nonReentrant` function.\r\n     * @param investor Recipient of the token purchase\r\n     */\r\n    function buyTokens(address investor) public nonReentrant whenNotPaused payable {\r\n        uint256 coinAmount = msg.value;\r\n        uint256 tokenAmount = _getTokenAmount(coinAmount);\r\n\r\n        _preValidatePurchase(investor, coinAmount, tokenAmount);\r\n\r\n        _processPurchase(investor, tokenAmount);\r\n\r\n        emit TokensPurchased(investor, coinAmount, tokenAmount);\r\n\r\n        _updatePurchasingState(investor, coinAmount, tokenAmount);\r\n\r\n        _transferToVault(coinAmount, _tokensToLiquidity(tokenAmount));\r\n    }\r\n\r\n\r\n    // ===================================\r\n    // I N T E R N A L   F U N C T I O N S \r\n    // ===================================\r\n\r\n    /**\r\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\r\n     */\r\n    function _preValidatePurchase(address investor, uint256 coinAmount, uint256 tokenAmount) internal view {\r\n        require(isSalesActive, \"Salesvault is not active\");\r\n        require(investor != address(0), \"Investor address is invalid\");\r\n        require(coinAmount != 0, \"CoinAmount can not be 0\");\r\n        require(IBaseToken(_baseToken).balanceOf(address(this)) \u003e= tokenAmount, \"Insufficient funds for this transaction\");\r\n        require(getInvestedValue(investor) + tokenAmount \u003c= _maxInvestPerUser, \"Investor already bought the maximum tokens allowed\");\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    } \r\n\r\n    /**\r\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\r\n     * its tokens.\r\n     * @param investor Address performing the token purchase\r\n     * @param tokenAmount Number of tokens to be sent\r\n     */\r\n    function _deliverTokens(address investor, uint256 tokenAmount) internal {\r\n        if (_freezeDuration == 0) {\r\n            IBaseToken(_baseToken).safeTransfer(investor, tokenAmount);\r\n        }\r\n        else {\r\n            IBaseToken(_baseToken).SendAndFreeze(investor, tokenAmount, _freezeDuration);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn\u0027t necessarily emit/send\r\n     * tokens.\r\n     * @param investor Address receiving the tokens\r\n     * @param tokenAmount Number of tokens to be purchased\r\n     */\r\n    function _processPurchase(address investor, uint256 tokenAmount) internal {\r\n        _deliverTokens(investor, tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\r\n     * etc.)\r\n     * @param investor Address receiving the tokens\r\n     * @param coinAmount Value in coin involved in the purchase\r\n     */\r\n    function _updatePurchasingState(address investor, uint256 coinAmount, uint256 tokenAmount) internal {\r\n        _fundsRaised           += coinAmount;\r\n        _tokensSold            += tokenAmount;\r\n        _salesLedger[investor] += tokenAmount;\r\n    }\r\n\r\n    function _tokensToLiquidity(uint256 tokenAmount) internal view returns (uint256 tokensToLiquidity) {\r\n        uint256 _contractBalance = IBaseToken(_baseToken).balanceOf(address(this));\r\n        tokensToLiquidity = (_contractBalance \u003e= tokenAmount) ? tokenAmount : _contractBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Override to extend the way in which ether is converted to tokens.\r\n     * @param coinAmount Value in coin to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified _coinAmount\r\n     */\r\n    function _getTokenAmount(uint256 coinAmount) internal view returns (uint256) {\r\n        return ( (coinAmount * (10 ** 9) ) / salePrice() );\r\n    }\r\n\r\n    /**\r\n     * @dev Determines how funds is stored/forwarded on purchases.\r\n     */\r\n    function _transferToVault(uint256 coinAmount, uint256 tokenAmount) internal {\r\n        _liquidityVault.transfer(coinAmount);\r\n        IBaseToken(_baseToken).safeTransfer(_liquidityVault, _tokensToLiquidity(tokenAmount));\r\n    }\r\n\r\n    function _finalizeSales() internal {\r\n        uint256 _tokenBalance = IBaseToken(_baseToken).balanceOf(address(this));\r\n        uint256 _coinBalance =  address(this).balance;\r\n\r\n        if (_tokenBalance \u003e 0) { \r\n            IBaseToken(_baseToken).salesClearance();\r\n        }\r\n\r\n        if (_coinBalance \u003e 0) {\r\n            _liquidityVault.transfer(_coinBalance);\r\n        } \r\n       \r\n        emit  SalesFinalized(_msgSender(), _tokensSold, _fundsRaised);\r\n\r\n        isSalesActive = false;\r\n    }\r\n\r\n    // ===================================\r\n    // E X T E R N A L   F U N C T I O N S \r\n    // ===================================\r\n\r\n    function initiateSales (uint256 discountRate, uint64  freezeDuration) external onlyRole(Contract_Manager) {\r\n        uint256 _contractBalance = IBaseToken(_baseToken).balanceOf(address(this));\r\n        require (!isSalesActive, \"Sales are already active\");\r\n        require (_contractBalance \u003e= IBaseToken(_baseToken).maxWalletBalance(), \"insufficient balance on the contract\");\r\n        require (discountRate \u003e= 0 \u0026\u0026 discountRate \u003c= 15, \"Invalid discount rate\");\r\n        require (freezeDuration \u003e= 0 \u0026\u0026 freezeDuration \u003c= 1095, \"Freeze duration invalid\");\r\n\r\n        _discountRate   = discountRate;\r\n        _freezeDuration = freezeDuration;\r\n        isSalesActive   = true;\r\n\r\n        emit SalesInitiated(_msgSender(), _contractBalance);\r\n    }\r\n\r\n    function finalizeSales () external whenNotPaused onlyRole(Financial_Controller) {\r\n        require (isSalesActive, \"Sales are not active\");\r\n        _finalizeSales();\r\n    }\r\n\r\n      // Called by the Compliance Auditor on emergency, allow begin or end an emergency stop\r\n    function setSecurityPause (bool isPause) external onlyRole(Compliance_Auditor) {\r\n        if (isPause)  {\r\n            _pause();\r\n        } else {\r\n            _unpause();  \r\n        }\r\n        emit SecurityPause(_msgSender(), isPause);\r\n    }\r\n\r\n\r\n    // ===================================\r\n    // P U B L I C    F U N C T I O N S \r\n    // ===================================\r\n     /**\r\n     * @return the token being sold.\r\n     */\r\n    function baseToken() public view returns (address) {\r\n        return _baseToken;\r\n    }\r\n\r\n    /**\r\n     * @return the address where funds are collected.\r\n     */\r\n    function LiquidityVault() public view returns (address payable) {\r\n        return _liquidityVault;\r\n    }\r\n\r\n    /**\r\n     * @return the original token price.\r\n     */\r\n    function tokenPrice() public view returns (uint256) {\r\n        return ILiquidityVault(_liquidityVault).getTokenPrice();\r\n    }\r\n\r\n    /**\r\n     * @return the number of token units a buyer gets per coin.\r\n     */\r\n    function salePrice() public view returns (uint256) {\r\n        uint256 _tokenPrice =  tokenPrice();\r\n        return _tokenPrice - ((_tokenPrice * _discountRate) / 100);\r\n    }\r\n\r\n    /**\r\n     * @return the max amount of investment per user.\r\n     */\r\n    function maxInvestPerUser() public view returns (uint256) {\r\n        return _maxInvestPerUser;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of coin raised.\r\n     */\r\n    function fundsRaised() public view returns (uint256) {\r\n        return _fundsRaised;\r\n    }\r\n\r\n    /**\r\n     * @return the tokens bought by an investor.\r\n     */\r\n    function getInvestedValue (address investor) public view returns (uint256) {\r\n        return  _salesLedger[investor];\r\n    }\r\n\r\n    function DiscountRate () external view returns (uint256) {\r\n        return _discountRate;\r\n    }\r\n\r\n    function FreezeDuration () external view returns (uint256) {\r\n        return _freezeDuration;\r\n    }\r\n\r\n    /**\r\n\t * @dev Checks the amount of tokens left in the allowance.\r\n\t * @return Amount of tokens left in the allowance\r\n\t */\r\n\tfunction remainingTokens() public view returns (uint256) {\r\n\t\treturn IBaseToken(_baseToken).balanceOf(address(this));\r\n\r\n\t}\r\n}"}}