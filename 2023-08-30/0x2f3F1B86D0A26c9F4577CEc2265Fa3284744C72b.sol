{"IERC20.sol":{"content":"pragma solidity =0.5.16;\r\n\r\ninterface IERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n"},"IUniswapCallee.sol":{"content":"pragma solidity =0.5.16;\r\n\r\ninterface IUniswapCallee {\r\n    function uniswapCall(\r\n        address sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n"},"IUniswapERC20.sol":{"content":"pragma solidity =0.5.16;\r\n\r\ninterface IUniswapERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n"},"IUSDFIFactory.sol":{"content":"pragma solidity =0.5.16;\r\n\r\ninterface IUSDFIFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function feeAmountOwner() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function baseFeeAmount() external view returns (uint256);\r\n\r\n    function baseOwnerFeeShare() external view returns (uint256);\r\n\r\n    function baseProtocolFeeShare() external view returns (uint256);\r\n\r\n    function baseFeeTo() external view returns (address);\r\n\r\n    function baseProtocolVault() external view returns (address);\r\n}\r\n"},"IUSDFIPair.sol":{"content":"pragma solidity =0.5.16;\r\n\r\ninterface IUSDFIPair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function feeAmount() external view returns (uint256);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function setFeeAmount(\r\n        uint256 _newFeeAmount,\r\n        uint256 _newProtocolFeeShare,\r\n        uint256 _newOwnerFeeShare\r\n    ) external;\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n"},"Math.sol":{"content":"pragma solidity =0.5.16;\r\n\r\n// a library for performing various math operations\r\n\r\nlibrary Math {\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x \u003c y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y \u003e 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x \u003c z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"pragma solidity =0.5.16;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) \u003e= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) \u003c= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n}\r\n"},"UniswapERC20.sol":{"content":"pragma solidity =0.5.16;\r\n\r\nimport \"./IUniswapERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract UniswapERC20 is IUniswapERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"USDFI.com Protocol-LPs\";\r\n    string public constant symbol = \"USDFI-LP\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public totalSupply;\r\n    mapping(address =\u003e uint256) public balanceOf;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) public allowance;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH =\r\n        0x97c678e24fcf3a1f85352ca8c5740470d041c3d3e861bbe328390a780699e709;\r\n    mapping(address =\u003e uint256) public nonces;\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    constructor() public {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\r\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n                ),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes(\"1\")),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint256 value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint256 value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 value\r\n    ) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool) {\r\n        if (allowance[from][msg.sender] != uint256(-1)) {\r\n            uint256 remaining = allowance[from][msg.sender].sub(value);\r\n            allowance[from][msg.sender] = remaining;\r\n            emit Approval(from, msg.sender, remaining);\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        require(deadline \u003e= block.timestamp, \"Uniswap: EXPIRED\");\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(\r\n                    abi.encode(\r\n                        PERMIT_TYPEHASH,\r\n                        owner,\r\n                        spender,\r\n                        value,\r\n                        nonces[owner]++,\r\n                        deadline\r\n                    )\r\n                )\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(\r\n            recoveredAddress != address(0) \u0026\u0026 recoveredAddress == owner,\r\n            \"Uniswap: INVALID_SIGNATURE\"\r\n        );\r\n        _approve(owner, spender, value);\r\n    }\r\n}\r\n"},"UQ112x112.sol":{"content":"pragma solidity =0.5.16;\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\n\r\n// range: [0, 2**112 - 1]\r\n// resolution: 1 / 2**112\r\n\r\nlibrary UQ112x112 {\r\n    uint224 constant Q112 = 2**112;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 y) internal pure returns (uint224 z) {\r\n        z = uint224(y) * Q112; // never overflows\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\r\n        z = x / uint224(y);\r\n    }\r\n}\r\n"},"USDFIPair.sol":{"content":"pragma solidity =0.5.16;\r\n\r\nimport \"./IUSDFIPair.sol\";\r\nimport \"./UniswapERC20.sol\";\r\nimport \"./Math.sol\";\r\nimport \"./UQ112x112.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./IUSDFIFactory.sol\";\r\nimport \"./IUniswapCallee.sol\";\r\n\r\ncontract USDFIPair is IUSDFIPair, UniswapERC20 {\r\n    using SafeMath for uint256;\r\n    using UQ112x112 for uint224;\r\n\r\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\r\n    bytes4 private constant SELECTOR =\r\n        bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\r\n\r\n    address public factory;\r\n    address public protocolFeeTo;\r\n    address public token0;\r\n    address public token1;\r\n\r\n    uint256 public constant FEE_DENOMINATOR = 100000; // = 100%\r\n    uint256 public constant MAX_FEE_AMOUNT = 300; // = 0.3%\r\n    uint256 public constant MIN_FEE_AMOUNT = 10; // = 0.01%\r\n    uint256 public constant PROTOCOL_FEE_SHARE_MAX = 90000; // = 90%\r\n    uint256 public constant OWNER_FEE_SHARE_MAX = 90000; // = 90%\r\n\r\n    uint256 public feeAmount;\r\n    uint256 public protocolFeeShare;\r\n    uint256 public ownerFeeShare;\r\n    address public feeTo;\r\n\r\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\r\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\r\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\r\n\r\n    uint256 public price0CumulativeLast;\r\n    uint256 public price1CumulativeLast;\r\n    uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\r\n\r\n    uint256 private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, \"USDFIPair: LOCKED\");\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    function getReserves()\r\n        public\r\n        view\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint32 _blockTimestampLast\r\n        )\r\n    {\r\n        _reserve0 = reserve0;\r\n        _reserve1 = reserve1;\r\n        _blockTimestampLast = blockTimestampLast;\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(SELECTOR, to, value)\r\n        );\r\n        require(\r\n            success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))),\r\n            \"USDFIPair: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    event FeeAmountUpdated(\r\n        uint256 prevFeeAmount,\r\n        uint256 indexed feeAmount,\r\n        uint256 prevProtocolFeeShare,\r\n        uint256 indexed protocolFeeShare,\r\n        uint256 prevNewOwnerFeeShare,\r\n        uint256 indexed ownerFeeShare\r\n    );\r\n\r\n    event DrainWrongToken(address indexed token, address to);\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    constructor() public {\r\n        factory = msg.sender;\r\n        feeAmount = IUSDFIFactory(factory).baseFeeAmount();\r\n        ownerFeeShare = IUSDFIFactory(factory).baseOwnerFeeShare();\r\n        protocolFeeShare = IUSDFIFactory(factory).baseProtocolFeeShare();\r\n        feeTo = IUSDFIFactory(factory).baseFeeTo();\r\n        protocolFeeTo = IUSDFIFactory(factory).baseProtocolVault();\r\n    }\r\n\r\n    // called once by the factory at time of deployment\r\n    function initialize(address _token0, address _token1) external {\r\n        require(msg.sender == factory, \"USDFIPair: FORBIDDEN\");\r\n        // sufficient check\r\n        token0 = _token0;\r\n        token1 = _token1;\r\n    }\r\n\r\n    // update reserves and, on the first call per block, price accumulators\r\n    function _update(\r\n        uint256 balance0,\r\n        uint256 balance1,\r\n        uint112 _reserve0,\r\n        uint112 _reserve1\r\n    ) private {\r\n        require(\r\n            balance0 \u003c= uint112(-1) \u0026\u0026 balance1 \u003c= uint112(-1),\r\n            \"USDFIPair: OVERFLOW\"\r\n        );\r\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n        // overflow is desired\r\n        if (timeElapsed \u003e 0 \u0026\u0026 _reserve0 != 0 \u0026\u0026 _reserve1 != 0) {\r\n            // * never overflows, and + overflow is desired\r\n            price0CumulativeLast +=\r\n                uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\r\n                timeElapsed;\r\n            price1CumulativeLast +=\r\n                uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\r\n                timeElapsed;\r\n        }\r\n        reserve0 = uint112(balance0);\r\n        reserve1 = uint112(balance1);\r\n        blockTimestampLast = blockTimestamp;\r\n        emit Sync(reserve0, reserve1);\r\n    }\r\n\r\n    // if fee is on, mint liquidity equivalent to \"ownerFeeShare\" of the growth in sqrt(k)\r\n    function _mintFee(uint112 _reserve0, uint112 _reserve1)\r\n        private\r\n        returns (bool feeOn)\r\n    {\r\n        feeOn = feeTo != address(0);\r\n        uint256 _kLast = kLast;\r\n        // gas savings\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = Math.sqrt(uint256(_reserve0).mul(_reserve1));\r\n                uint256 rootKLast = Math.sqrt(_kLast);\r\n                if (rootK \u003e rootKLast) {\r\n                    uint256 d = (FEE_DENOMINATOR / ownerFeeShare).sub(1);\r\n                    uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));\r\n                    uint256 denominator = rootK.mul(d).add(rootKLast);\r\n                    uint256 liquidity = numerator / denominator;\r\n                    if (liquidity \u003e 0) _mint(feeTo, liquidity);\r\n                }\r\n            }\r\n        } else if (_kLast != 0) {\r\n            kLast = 0;\r\n        }\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function mint(address to) external lock returns (uint256 liquidity) {\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\r\n        // gas savings\r\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\r\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\r\n        uint256 amount0 = balance0.sub(_reserve0);\r\n        uint256 amount1 = balance1.sub(_reserve1);\r\n\r\n        bool feeOn = _mintFee(_reserve0, _reserve1);\r\n        uint256 _totalSupply = totalSupply;\r\n        // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        if (_totalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\r\n            _mint(address(0), MINIMUM_LIQUIDITY);\r\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\r\n        } else {\r\n            liquidity = Math.min(\r\n                amount0.mul(_totalSupply) / _reserve0,\r\n                amount1.mul(_totalSupply) / _reserve1\r\n            );\r\n        }\r\n        require(liquidity \u003e 0, \"USDFIPair: INSUFFICIENT_LIQUIDITY_MINTED\");\r\n        _mint(to, liquidity);\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1);\r\n        // reserve0 and reserve1 are up-to-date\r\n        emit Mint(msg.sender, amount0, amount1);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function burn(address to)\r\n        external\r\n        lock\r\n        returns (uint256 amount0, uint256 amount1)\r\n    {\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\r\n        // gas savings\r\n        address _token0 = token0;\r\n        // gas savings\r\n        address _token1 = token1;\r\n        // gas savings\r\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\r\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\r\n        uint256 liquidity = balanceOf[address(this)];\r\n\r\n        bool feeOn = _mintFee(_reserve0, _reserve1);\r\n        uint256 _totalSupply = totalSupply;\r\n        // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        amount0 = liquidity.mul(balance0) / _totalSupply;\r\n        // using balances ensures pro-rata distribution\r\n        amount1 = liquidity.mul(balance1) / _totalSupply;\r\n        // using balances ensures pro-rata distribution\r\n        require(\r\n            amount0 \u003e 0 \u0026\u0026 amount1 \u003e 0,\r\n            \"USDFIPair: INSUFFICIENT_LIQUIDITY_BURNED\"\r\n        );\r\n        _burn(address(this), liquidity);\r\n        _safeTransfer(_token0, to, amount0);\r\n        _safeTransfer(_token1, to, amount1);\r\n        balance0 = IERC20(_token0).balanceOf(address(this));\r\n        balance1 = IERC20(_token1).balanceOf(address(this));\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1);\r\n        // reserve0 and reserve1 are up-to-date\r\n        emit Burn(msg.sender, amount0, amount1, to);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external {\r\n        _swap(amount0Out, amount1Out, to, data, protocolFeeTo);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function _swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes memory data,\r\n        address protocol\r\n    ) internal lock {\r\n        require(\r\n            amount0Out \u003e 0 || amount1Out \u003e 0,\r\n            \"USDFIPair: INSUFFICIENT_OUTPUT_AMOUNT\"\r\n        );\r\n        require(\r\n            amount0Out \u003c reserve0 \u0026\u0026 amount1Out \u003c reserve1,\r\n            \"USDFIPair: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        uint256 balance0;\r\n        uint256 balance1;\r\n\r\n        uint256 _feeAmount = feeAmount;\r\n        uint256 feeDenominator = FEE_DENOMINATOR;\r\n\r\n        {\r\n            // scope for _token{0,1}, avoids stack too deep errors\r\n            address _token0 = token0;\r\n            address _token1 = token1;\r\n            require(to != _token0 \u0026\u0026 to != _token1, \"USDFIPair: INVALID_TO\"); // optimistically transfer tokens\r\n            if (amount0Out \u003e 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\r\n            if (amount1Out \u003e 0) _safeTransfer(_token1, to, amount1Out);\r\n            if (data.length \u003e 0)\r\n                IUniswapCallee(to).uniswapCall(\r\n                    msg.sender,\r\n                    amount0Out,\r\n                    amount1Out,\r\n                    data\r\n                );\r\n            balance0 = IERC20(_token0).balanceOf(address(this));\r\n            balance1 = IERC20(_token1).balanceOf(address(this));\r\n        }\r\n        uint256 amount0In = balance0 \u003e reserve0 - amount0Out\r\n            ? balance0 - (reserve0 - amount0Out)\r\n            : 0;\r\n        uint256 amount1In = balance1 \u003e reserve1 - amount1Out\r\n            ? balance1 - (reserve1 - amount1Out)\r\n            : 0;\r\n        require(\r\n            amount0In \u003e 0 || amount1In \u003e 0,\r\n            \"USDFIPair: INSUFFICIENT_INPUT_AMOUNT\"\r\n        );\r\n        {\r\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\r\n            uint256 balance0Adjusted = balance0.mul(feeDenominator).sub(\r\n                amount0In.mul(_feeAmount)\r\n            );\r\n            uint256 balance1Adjusted = balance1.mul(feeDenominator).sub(\r\n                amount1In.mul(_feeAmount)\r\n            );\r\n            require(\r\n                balance0Adjusted.mul(balance1Adjusted) \u003e=\r\n                    uint256(reserve0).mul(reserve1).mul(feeDenominator**2),\r\n                \"USDFIPair: K\"\r\n            );\r\n        }\r\n        {\r\n            // scope for protocol fee management\r\n            uint256 protocolInputFeeAmount = protocol != address(0)\r\n                ? protocolFeeShare.mul(_feeAmount)\r\n                : 0;\r\n            if (protocolInputFeeAmount \u003e 0) {\r\n                if (amount0In \u003e 0) {\r\n                    address _token0 = token0;\r\n                    _safeTransfer(\r\n                        _token0,\r\n                        protocol,\r\n                        amount0In.mul(protocolInputFeeAmount) /\r\n                            (feeDenominator**2)\r\n                    );\r\n                    balance0 = IERC20(_token0).balanceOf(address(this));\r\n                }\r\n                if (amount1In \u003e 0) {\r\n                    address _token1 = token1;\r\n                    _safeTransfer(\r\n                        _token1,\r\n                        protocol,\r\n                        amount1In.mul(protocolInputFeeAmount) /\r\n                            (feeDenominator**2)\r\n                    );\r\n                    balance1 = IERC20(_token1).balanceOf(address(this));\r\n                }\r\n            }\r\n        }\r\n        _update(balance0, balance1, reserve0, reserve1);\r\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\r\n    }\r\n\r\n    // force balances to match reserves\r\n    function skim(address to) external lock {\r\n        address _token0 = token0;\r\n        // gas savings\r\n        address _token1 = token1;\r\n        // gas savings\r\n        _safeTransfer(\r\n            _token0,\r\n            to,\r\n            IERC20(_token0).balanceOf(address(this)).sub(reserve0)\r\n        );\r\n        _safeTransfer(\r\n            _token1,\r\n            to,\r\n            IERC20(_token1).balanceOf(address(this)).sub(reserve1)\r\n        );\r\n    }\r\n\r\n    // force reserves to match balances\r\n    function sync() external lock {\r\n        uint256 token0Balance = IERC20(token0).balanceOf(address(this));\r\n        uint256 token1Balance = IERC20(token1).balanceOf(address(this));\r\n        require(\r\n            token0Balance != 0 \u0026\u0026 token1Balance != 0,\r\n            \"USDFIPair: liquidity ratio not initialized\"\r\n        );\r\n        _update(token0Balance, token1Balance, reserve0, reserve1);\r\n    }\r\n\r\n    /**\r\n     * @dev Allow to recover token sent here by mistake\r\n     *\r\n     * Can only be called by factory\u0027s owner\r\n     */\r\n    function drainWrongToken(address token, address to) external {\r\n        require(\r\n            msg.sender == IUSDFIFactory(factory).owner(),\r\n            \"USDFIPair: only factory\u0027s owner\"\r\n        );\r\n        require(token != token0 \u0026\u0026 token != token1, \"USDFIPair: invalid token\");\r\n        _safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\r\n        emit DrainWrongToken(token, to);\r\n    }\r\n\r\n    ////////////////\r\n\r\n    /**\r\n     * @dev Updates the fees\r\n     *\r\n     * - updates the swap fees amount\r\n     * - updates the share of fees attributed to the given protocol when a swap went through him\r\n     * - updates the share of fees attributed to the FeeToOwner\r\n     *\r\n     * Can only be called by the factory\u0027s owner (feeAmountOwner)\r\n     */\r\n    function setFeeAmount(\r\n        uint256 _newFeeAmount,\r\n        uint256 _newProtocolFeeShare,\r\n        uint256 _newOwnerFeeShare\r\n    ) external {\r\n        require(\r\n            msg.sender == IUSDFIFactory(factory).feeAmountOwner(),\r\n            \"USDFIPair: only factory\u0027s feeAmountOwner\"\r\n        );\r\n        require(\r\n            _newFeeAmount \u003c= MAX_FEE_AMOUNT,\r\n            \"USDFIPair: feeAmount mustn\u0027t exceed the maximum\"\r\n        );\r\n        require(\r\n            _newFeeAmount \u003e= MIN_FEE_AMOUNT,\r\n            \"USDFIPair: feeAmount mustn\u0027t exceed the minimum\"\r\n        );\r\n        uint256 prevFeeAmount = feeAmount;\r\n        feeAmount = _newFeeAmount;\r\n\r\n        require(\r\n            _newProtocolFeeShare.add(_newOwnerFeeShare) \u003c FEE_DENOMINATOR,\r\n            \"USDFIPair: fees mustn\u0027t exceed maximum (FEE_DENOMINATOR)\"\r\n        );\r\n\r\n        require(\r\n            _newProtocolFeeShare \u003c= PROTOCOL_FEE_SHARE_MAX,\r\n            \"USDFIPair: protocolFeeShare mustn\u0027t exceed maximum\"\r\n        );\r\n        uint256 prevProtocolFeeShare = protocolFeeShare;\r\n        protocolFeeShare = _newProtocolFeeShare;\r\n\r\n        require(\r\n            _newOwnerFeeShare \u003e 0,\r\n            \"USDFIPair: ownerFeeShare mustn\u0027t exceed minimum\"\r\n        );\r\n        require(\r\n            _newOwnerFeeShare \u003c= OWNER_FEE_SHARE_MAX,\r\n            \"USDFIPair: ownerFeeShare mustn\u0027t exceed maximum\"\r\n        );\r\n        uint256 prevNewOwnerFeeShare = ownerFeeShare;\r\n        ownerFeeShare = _newOwnerFeeShare;\r\n\r\n        emit FeeAmountUpdated(\r\n            prevFeeAmount,\r\n            feeAmount,\r\n            prevProtocolFeeShare,\r\n            protocolFeeShare,\r\n            prevNewOwnerFeeShare,\r\n            ownerFeeShare\r\n        );\r\n    }\r\n\r\n    ////////////////\r\n\r\n    /**\r\n     * @dev Updates the new mintet LPs (fees) recipient\r\n     *\r\n     * Can only be called by the factory\u0027s owner (feeAmountOwner)\r\n     */\r\n    function setFeeTo(address _feeTo) external {\r\n        require(\r\n            msg.sender == IUSDFIFactory(factory).feeAmountOwner(),\r\n            \"USDFIPair: only factory\u0027s feeAmountOwner\"\r\n        );\r\n        feeTo = _feeTo;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the swap fees recipient\r\n     *\r\n     * Can only be called by the factory\u0027s owner (feeAmountOwner)\r\n     */\r\n    function setProtocolFeeTo(address _protocolFeeTo) external {\r\n        require(\r\n            msg.sender == IUSDFIFactory(factory).feeAmountOwner(),\r\n            \"USDFIPair: only factory\u0027s feeAmountOwner\"\r\n        );\r\n        protocolFeeTo = _protocolFeeTo;\r\n    }\r\n}\r\n"}}