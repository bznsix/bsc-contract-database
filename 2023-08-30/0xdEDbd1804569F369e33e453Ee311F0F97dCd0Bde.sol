{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"},"Context.sol":{"content":"/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"Math.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003e= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003c b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\r\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length \u003e 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c \u003c a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b \u003e a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003e 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003e 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"},"vPoolv6.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n// import \u0027@openzeppelin/contracts/math/Math.sol\u0027;\r\n\r\n// import \u0027@openzeppelin/contracts/math/SafeMath.sol\u0027;\r\n\r\n// import \u0027@openzeppelin/contracts/utils/ReentrancyGuard.sol\u0027;\r\n\r\n// import \u0027@openzeppelin/contracts/access/Ownable.sol\u0027;\r\n\r\n// import \u0027@openzeppelin/contracts/token/ERC20/IERC20.sol\u0027;\r\n\r\n// import \u0027@openzeppelin/contracts/token/ERC20/SafeERC20.sol\u0027;\r\n\r\nimport \u0027./Math.sol\u0027;\r\nimport \u0027./SafeMath.sol\u0027;\r\nimport \u0027./ReentrancyGuard.sol\u0027;\r\nimport \u0027./Ownable.sol\u0027;\r\nimport \u0027./IERC20.sol\u0027;\r\nimport \u0027./SafeERC20.sol\u0027;\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\n\r\ninterface IOracle {\r\n    function R(address token, uint256 amount) external view returns (uint256);\r\n}\r\n\r\ninterface IEIP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint value) external returns (bool);\r\n}\r\n\r\n\r\ncontract vPoolv6 is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    enum StakeType {Day0, Day30, Day90}\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        uint256 pid;\r\n        address token;\r\n        bool isOpen;\r\n        uint256 totalSupply;\r\n        uint256 minAmount;\r\n        uint256 maxbenefit; //apr of day\r\n        mapping(address =\u003e uint256) balances;\r\n        mapping(address =\u003e mapping(StakeType =\u003e uint256)) balanceOfStakedType;\r\n        mapping(StakeType =\u003e uint256[]) benefits;\r\n        uint256 createdAt;\r\n    }\r\n\r\n    struct StakeRecord {\r\n        StakeType stakeType;\r\n        address token;   //stake token\r\n        address account;   //stake account\r\n        uint256 amount;    //stake amount\r\n        uint256 totalValue; //usdt value\r\n        uint256 apy;\r\n        uint256 lockDuration;  //0day, 30day or 90day\r\n        uint256 createdAt;\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint256 deposit;\r\n        uint256 reward;\r\n        uint256 unLockedTime;\r\n        uint256 lastUpdateTime;\r\n        uint256 lockDuration;  //0day, 30day or 90day\r\n        uint256 totalValue;\r\n        uint256 apy;\r\n    }\r\n\r\n    uint256 public stakeRecordIncr = 0;\r\n    mapping(uint256 =\u003e StakeRecord) public stakeRecords;\r\n\r\n    mapping(uint256 =\u003e mapping(StakeType =\u003e mapping(address =\u003e UserInfo))) public userInfos;\r\n\r\n    uint256 constant public denominator = 1000000;\r\n\r\n    uint256 public C_Day0;\r\n    uint256 public C_Day30;\r\n    uint256 public C_Day90;\r\n\r\n    uint256 constant public C_Day0_Number  = 1; //casue one day apy\r\n    uint256 constant public C_Day30_Number = 30;\r\n    uint256 constant public C_Day90_Number = 90;\r\n\r\n    uint256 public poolIncr = 0;\r\n    mapping(uint256 =\u003e PoolInfo) public pools;\r\n\r\n    address public oracle;\r\n    address public funder;\r\n\r\n    //busd\r\n    address public busd;\r\n    // uint256 public busdDecimals;\r\n    // uint256 public oneBusd;\r\n\r\n    //usdt\r\n    address public usdt;\r\n    uint256 public usdtDecimals;\r\n    uint256 public oneUsdt;\r\n\r\n    uint256 public bonusFeeRate = 300000; //30% = 3000 / 10000\r\n\r\n    uint256 private gSalt = 0;\r\n\r\n    address public policyOperator; \r\n\r\n    bool public isRelease;\r\n\r\n    constructor(\r\n        address _oracle,\r\n        address _usdt,\r\n        address _busd,\r\n        address _funder,\r\n        bool _isRelease\r\n    ) public {\r\n        oracle = _oracle;\r\n        usdt = _usdt;\r\n        busd = _busd;\r\n        funder = _funder;\r\n\r\n        usdtDecimals = IEIP20(usdt).decimals();\r\n        // busdDecimals = IEIP20(busd).decimals();\r\n        \r\n        oneUsdt = 10**usdtDecimals;\r\n        // oneBusd = 10**busdDecimals;\r\n\r\n        isRelease = _isRelease;\r\n\r\n        if (isRelease) {\r\n            C_Day0  = 0 days;\r\n            C_Day30 = 30 days;\r\n            C_Day90 = 90 days;\r\n        } else {\r\n            C_Day0  = 0 minutes;\r\n            C_Day30 = 10 minutes;\r\n            C_Day90 = 15 minutes;\r\n        }\r\n    }\r\n\r\n    function withdrawFunds(address _token, uint256 _amount) public payable nonReentrant {\r\n        require(funder == msg.sender, \"vPool: invalid recipient\");\r\n\r\n        if(address(_token) != address(0)) {\r\n            IERC20(_token).safeTransfer(msg.sender, _amount);\r\n        } else {\r\n            safeTransferETH(msg.sender, _amount);\r\n        }\r\n    }\r\n\r\n    function provideFunds(address _token, uint256 _amount) public payable nonReentrant {\r\n        require(funder == msg.sender, \"vPool: invalid recipient\");\r\n\r\n        uint256 amount = _amount;\r\n        if(address(_token) == address(0)) {\r\n            amount = msg.value;\r\n        }\r\n\r\n        if(address(_token) != address(0)) {\r\n            IERC20(_token).safeTransferFrom(msg.sender, address(this), amount);\r\n        }\r\n    }\r\n\r\n\r\n    function getStakeMinimum(uint256 _pid) public view returns(uint256) {\r\n        return pools[_pid].minAmount;\r\n    }\r\n\r\n    function getStakedType() public pure returns (StakeType, StakeType, StakeType) {\r\n        return (StakeType.Day0, StakeType.Day30, StakeType.Day90);\r\n    }\r\n\r\n    function getStakeDays(StakeType _stakeType) public view returns (uint256) {\r\n        if (_stakeType == StakeType.Day0) {\r\n            return C_Day0;\r\n        } else if (_stakeType == StakeType.Day30) {\r\n            return C_Day30;\r\n        } else {\r\n            return C_Day90;\r\n        }\r\n    }\r\n\r\n    //for test\r\n    function benefitIndexLess(uint256 amount_) public view returns (uint256) {\r\n        if (amount_ \u003e= oneUsdt.mul(200)) {\r\n            return 6;\r\n        } else if (amount_ \u003e= oneUsdt.mul(100) \u0026\u0026 amount_ \u003c oneUsdt.mul(200)) {\r\n            return 5;\r\n        }  else if (amount_ \u003e= oneUsdt.mul(50) \u0026\u0026 amount_ \u003c oneUsdt.mul(100)) {\r\n            return 4;\r\n        } else if (amount_ \u003e= oneUsdt.mul(30) \u0026\u0026 amount_ \u003c oneUsdt.mul(50)) {\r\n            return 3;\r\n        } else if (amount_ \u003e= oneUsdt.mul(10) \u0026\u0026 amount_ \u003c oneUsdt.mul(30)) {\r\n            return 2;\r\n        } else if (amount_ \u003e= oneUsdt.mul(5) \u0026\u0026 amount_ \u003c oneUsdt.mul(10)) {\r\n            return 1;\r\n        } else {\r\n            return 0; //[1, 5)\r\n        }\r\n    }\r\n\r\n    //for release\r\n    function benefitIndexMore(uint256 amount_) public view returns (uint256) {\r\n        if (amount_ \u003e= oneUsdt.mul(20000)) {\r\n            return 6;\r\n        } else if (amount_ \u003e= oneUsdt.mul(10000) \u0026\u0026 amount_ \u003c oneUsdt.mul(20000)) {\r\n            return 5;\r\n        }  else if (amount_ \u003e= oneUsdt.mul(5000) \u0026\u0026 amount_ \u003c oneUsdt.mul(10000)) {\r\n            return 4;\r\n        } else if (amount_ \u003e= oneUsdt.mul(3000) \u0026\u0026 amount_ \u003c oneUsdt.mul(5000)) {\r\n            return 3;\r\n        } else if (amount_ \u003e= oneUsdt.mul(1000) \u0026\u0026 amount_ \u003c oneUsdt.mul(3000)) {\r\n            return 2;\r\n        } else if (amount_ \u003e= oneUsdt.mul(500) \u0026\u0026 amount_ \u003c oneUsdt.mul(1000)) {\r\n            return 1;\r\n        } else {\r\n            return 0; //[100, 500)\r\n        }\r\n    }\r\n\r\n    function getBenefitIndex(uint256 amount_) public view returns (uint256) {\r\n        if (isRelease) {\r\n            return benefitIndexMore(amount_);\r\n        } else {\r\n            return benefitIndexLess(amount_);\r\n        }\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == policyOperator, \"vPool: invalid policy operator\");\r\n        \r\n        _;\r\n    }\r\n\r\n    function updateOperator(address _operator) external onlyOwner {\r\n        policyOperator = _operator;\r\n    }\r\n\r\n    function updateOracle(address _newOracle) external onlyOwner {\r\n        oracle = _newOracle;\r\n    }\r\n\r\n    function updateFunder(address _funder) external onlyOwner {\r\n        funder = _funder;\r\n    }\r\n\r\n    function addPool(address token, uint256 _minAmount, uint256 _maxbenefit) external onlyOperator {\r\n        poolIncr = poolIncr.add(1);\r\n        \r\n        PoolInfo memory info = PoolInfo({\r\n            pid: poolIncr,\r\n            token: token,\r\n            isOpen: true,\r\n            totalSupply: 0,\r\n            minAmount: _minAmount,\r\n            maxbenefit: _maxbenefit,\r\n            createdAt: block.timestamp\r\n        });\r\n        pools[poolIncr] = info;\r\n    }\r\n\r\n    function setPool(uint256 _pid, StakeType _stakeType, uint256[] calldata _benefits) external onlyOperator {\r\n        require(_pid != 0, \"vPool: invalid pid\");\r\n        require(_benefits.length == 7, \"vPool: invalid benefits length\");\r\n\r\n        PoolInfo storage poolInfo = pools[_pid];\r\n        require(poolInfo.pid != 0, \"vPool: invalid pool\");\r\n        require(poolInfo.benefits[_stakeType].length == 0, \"vPool: benefits has set\");\r\n\r\n        for(uint i = 0; i \u003c _benefits.length; i++) {\r\n            uint256 apyM = _benefits[i].mul(getDayNumber(_stakeType));\r\n            poolInfo.benefits[_stakeType].push(apyM);\r\n        }\r\n    }\r\n\r\n    function getPoolInfo(uint256 _pid) public view returns(address, uint256[] memory, uint256[] memory, uint256[] memory) {\r\n        return (\r\n            pools[_pid].token,\r\n            pools[_pid].benefits[StakeType.Day0],\r\n            pools[_pid].benefits[StakeType.Day30],\r\n            pools[_pid].benefits[StakeType.Day90]\r\n        );\r\n    }\r\n\r\n    function balanceOf(uint256 _pid, address _account) public view returns(uint256) {\r\n        return pools[_pid].balances[_account];\r\n    }\r\n\r\n    function getBalanceOfStakedType(uint256 _pid, address _account, StakeType _stakeType) public view returns(uint256) {\r\n        return pools[_pid].balanceOfStakedType[_account][_stakeType];\r\n    }\r\n\r\n    function totalSupply(uint256 _pid) public view returns(uint256) {\r\n        return pools[_pid].totalSupply;\r\n    }\r\n\r\n    function getUserInfo(uint256 _pid, StakeType _stakeType, address _account) public view returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        UserInfo memory userInfo = userInfos[_pid][_stakeType][_account];\r\n        return (\r\n            userInfo.deposit,\r\n            userInfo.reward,\r\n            userInfo.unLockedTime,\r\n            userInfo.lastUpdateTime,\r\n            userInfo.lockDuration,\r\n            userInfo.totalValue,\r\n            userInfo.apy\r\n        );\r\n    }\r\n\r\n    function getRecordInfo(uint256 _recordId) public view returns (StakeType, address, address, uint256, uint256, uint256, uint256, uint256) {\r\n        StakeRecord memory record = stakeRecords[_recordId];\r\n        return (\r\n            record.stakeType,\r\n            record.token,\r\n            record.account,\r\n            record.amount,\r\n            record.totalValue,\r\n            record.apy,\r\n            record.lockDuration,\r\n            record.createdAt);\r\n    }\r\n\r\n    function earned(uint256 _pid, StakeType _stakeType, address _account) public view returns(uint256) {\r\n        UserInfo memory userInfo = userInfos[_pid][_stakeType][_account];\r\n        uint256 bonus = calcBonus(_pid, _stakeType, _account);\r\n        return userInfo.reward.add(bonus);\r\n    }\r\n\r\n    function calcBonusWithoutLimit(uint256 _pid, StakeType _stakeType, address _account) public view returns(uint256) {\r\n        UserInfo memory userInfo = userInfos[_pid][_stakeType][_account];\r\n\r\n        //here\u0027s apy is apy per day\r\n        uint256 apy = userInfo.apy;\r\n        uint256 lastUpdateTime = userInfo.lastUpdateTime;\r\n        uint256 bonusRate = userInfo.totalValue.mul(apy).div(denominator).div(86400); // 1 day == 86400 seconds \r\n        if (block.timestamp \u003e lastUpdateTime) {\r\n            return bonusRate.mul(block.timestamp - lastUpdateTime);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function calcBonusLimit(uint256 _pid, StakeType _stakeType, address _account) public view returns(uint256) {\r\n        UserInfo memory userInfo = userInfos[_pid][_stakeType][_account];\r\n        uint256 lockDuration = userInfo.lockDuration;\r\n        if (lockDuration == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 lastUpdateTime = userInfo.lastUpdateTime;\r\n        uint256 unLockedTime = userInfo.unLockedTime;\r\n        uint256 apy = userInfo.apy;\r\n        uint256 totalBonus = userInfo.totalValue.mul(apy).div(denominator);\r\n        uint256 bonusRate = totalBonus.div(lockDuration);\r\n\r\n        if (block.timestamp \u003e unLockedTime) {\r\n            return bonusRate.mul(unLockedTime - lastUpdateTime);\r\n        } else {\r\n            return bonusRate.mul(block.timestamp - lastUpdateTime);\r\n        }\r\n    }\r\n\r\n    function calcBonus(uint256 _pid, StakeType _stakeType, address _account) public view returns(uint256) {\r\n        if (_stakeType == StakeType.Day0) {\r\n            return calcBonusWithoutLimit(_pid, _stakeType, _account);\r\n        } else {\r\n            return calcBonusLimit(_pid, _stakeType, _account);\r\n        }\r\n    }\r\n\r\n    function calcBenefit(uint256 _benefit, uint256 _random) internal pure returns(uint256) {\r\n        // r*0.9 + RAND()*r*19%\r\n        uint256 a = _benefit.mul(9).div(10);\r\n        uint256 b = _benefit.mul(19).div(100);\r\n        uint256 c = b.mul(_random).div(denominator);\r\n        return a + c;\r\n    }\r\n\r\n    //random: [0, 10000]\r\n    function doRand() internal returns(uint256) {\r\n        uint256 h = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, gSalt)));\r\n        uint256 random = h % denominator;\r\n        gSalt = gSalt.add(1);\r\n        return random;\r\n    }\r\n\r\n    function calcMaxbenefit(StakeType _stakeType, uint256 _maxbenefit) public pure returns(uint256) {\r\n        if (_stakeType == StakeType.Day0) {\r\n            return C_Day0_Number.mul(_maxbenefit);\r\n        } else if (_stakeType == StakeType.Day30) {\r\n            return C_Day30_Number.mul(_maxbenefit);\r\n        } else {\r\n            return C_Day90_Number.mul(_maxbenefit);\r\n        }\r\n    }\r\n\r\n    function getDayNumber(StakeType _stakeType) public pure returns(uint256) {\r\n        if (_stakeType == StakeType.Day0) {\r\n            return C_Day0_Number;\r\n        } else if (_stakeType == StakeType.Day30) {\r\n            return C_Day30_Number;\r\n        } else {\r\n            return C_Day90_Number;\r\n        }\r\n    }\r\n\r\n    function deposit(uint256 _pid, StakeType _stakeType, uint256 _amount) public payable nonReentrant {\r\n        require(_pid != 0, \"vPool: invalid pid\");\r\n\r\n        PoolInfo storage poolInfo = pools[_pid];\r\n        require(poolInfo.pid != 0, \"vPool: invalid pool\");\r\n        require(poolInfo.isOpen == true, \"vPool: pool is not opened\");\r\n\r\n        address token = poolInfo.token;\r\n        uint256 amount = _amount;\r\n        if (token == address(0)) {\r\n            amount = msg.value;\r\n        }\r\n        require(amount \u003e 0, \u0027vPool: cannot stake 0\u0027);\r\n\r\n        uint256 totalValue = IOracle(oracle).R(token, amount);\r\n        require(totalValue \u003e= poolInfo.minAmount, \"vPool: stake amount must \u003e min\");\r\n\r\n        uint256 benefit = poolInfo.benefits[_stakeType][getBenefitIndex(totalValue)];\r\n        require(benefit \u003e 0, \"vPool: benefit must \u003e 0\");\r\n        uint256 lockDuration = getStakeDays(_stakeType);\r\n\r\n        uint256 random = doRand();\r\n        uint256 randBenefit = calcBenefit(benefit, random);\r\n        if (poolInfo.maxbenefit \u003e 0) {\r\n            randBenefit = Math.min(randBenefit, calcMaxbenefit(_stakeType, poolInfo.maxbenefit));\r\n        }\r\n\r\n        UserInfo storage userInfo = userInfos[_pid][_stakeType][msg.sender];\r\n\r\n        //Collect the obtained rewards\r\n        uint256 bonus = calcBonus(_pid, _stakeType, msg.sender);\r\n        userInfo.reward = userInfo.reward.add(bonus);\r\n\r\n        //reset apy\r\n        if (userInfo.deposit == 0) {\r\n            userInfo.apy = randBenefit;\r\n        }\r\n\r\n        userInfo.totalValue = userInfo.totalValue.add(totalValue);\r\n        userInfo.deposit = userInfo.deposit.add(amount);\r\n\r\n        userInfo.lastUpdateTime = block.timestamp;\r\n        userInfo.unLockedTime = block.timestamp.add(lockDuration);\r\n        userInfo.lockDuration = lockDuration;\r\n\r\n        poolInfo.balances[msg.sender] = poolInfo.balances[msg.sender].add(amount);\r\n        poolInfo.balanceOfStakedType[msg.sender][_stakeType] = poolInfo.balanceOfStakedType[msg.sender][_stakeType].add(amount);\r\n        poolInfo.totalSupply = poolInfo.totalSupply.add(amount);\r\n\r\n        //new record\r\n        uint256 apy = userInfo.apy;\r\n        StakeRecord memory record = StakeRecord({\r\n            stakeType: _stakeType, \r\n            token: token,\r\n            account: msg.sender,\r\n            amount: amount,\r\n            totalValue: totalValue,\r\n            apy: apy,\r\n            lockDuration: lockDuration,\r\n            createdAt: block.timestamp\r\n        });\r\n        stakeRecordIncr = stakeRecordIncr.add(1);\r\n        stakeRecords[stakeRecordIncr] = record;\r\n\r\n        //transfer token to a recipient\r\n        // if(address(token) != address(0)) {\r\n        //     IERC20(token).safeTransferFrom(msg.sender, tokenRecipient, amount);\r\n        // } else {\r\n        //     safeTransferETH(tokenRecipient, amount);\r\n        // }\r\n\r\n        if (address(token) != address(0)) {\r\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n        }\r\n    }\r\n\r\n    function claimReward(uint256 _pid, StakeType _stakeType) public nonReentrant {\r\n        require(_pid != 0, \"vPool: invalid pid\");\r\n\r\n        PoolInfo storage poolInfo = pools[_pid];\r\n        require(poolInfo.isOpen == true, \"vPool: pool is not opened\");\r\n\r\n        UserInfo storage userInfo = userInfos[_pid][_stakeType][msg.sender];\r\n\r\n        //Collect the obtained rewards\r\n        uint256 lastBonus = calcBonus(_pid, _stakeType, msg.sender);\r\n        userInfo.reward = userInfo.reward.add(lastBonus);\r\n\r\n        uint256 bonus = userInfo.reward;\r\n        require(bonus \u003e 0, \"vPool: bonus is 0\");\r\n        uint256 fee = bonus.mul(bonusFeeRate).div(denominator);\r\n        uint256 actualBonus = bonus.sub(fee);\r\n\r\n        if (_stakeType == StakeType.Day0) {\r\n            userInfo.lastUpdateTime = block.timestamp;\r\n        } else {\r\n            userInfo.lastUpdateTime = Math.min(block.timestamp, userInfo.unLockedTime);\r\n        }\r\n        userInfo.reward = 0;\r\n\r\n        if (poolInfo.token == busd) {\r\n            IERC20(busd).safeTransfer(msg.sender, actualBonus);\r\n        } else {\r\n            IERC20(usdt).safeTransfer(msg.sender, actualBonus);\r\n        }\r\n    }\r\n\r\n    function reStake(uint256 _pid, StakeType _stakeType) public nonReentrant {\r\n        require(_pid != 0, \"vPool: invalid pid\");\r\n        require(_stakeType != StakeType.Day0, \"vPool: invalid stakeType\");\r\n\r\n        PoolInfo storage poolInfo = pools[_pid];\r\n        require(poolInfo.isOpen == true, \"vPool: pool is not opened\");\r\n\r\n        UserInfo storage userInfo = userInfos[_pid][_stakeType][msg.sender];\r\n        require(userInfo.unLockedTime \u003c= block.timestamp, \"vPool: stake is locked\");\r\n\r\n        //Collect the obtained rewards\r\n        uint256 lastBonus = calcBonus(_pid, _stakeType, msg.sender);\r\n        userInfo.reward = userInfo.reward.add(lastBonus);\r\n\r\n        //restake\r\n        uint256 lockDuration = userInfo.lockDuration;\r\n        userInfo.lastUpdateTime = block.timestamp;\r\n        userInfo.unLockedTime = block.timestamp.add(lockDuration);\r\n\r\n        //new record\r\n        address token = poolInfo.token;\r\n        uint256 amount = userInfo.deposit;\r\n        uint256 totalValue = userInfo.totalValue;\r\n        uint256 apy = userInfo.apy;\r\n        StakeRecord memory record = StakeRecord({\r\n            stakeType: _stakeType, \r\n            token: token,\r\n            account: msg.sender,\r\n            amount: amount,\r\n            totalValue: totalValue,\r\n            apy: apy,\r\n            lockDuration: lockDuration,\r\n            createdAt: block.timestamp\r\n        });\r\n        stakeRecordIncr = stakeRecordIncr.add(1);\r\n        stakeRecords[stakeRecordIncr] = record;\r\n    }\r\n\r\n    //restake (principal + reward)\r\n    function reStakeWithReward(uint256 _pid, StakeType _stakeType) public nonReentrant {\r\n        require(_pid != 0, \"vPool: invalid pid\");\r\n\r\n        PoolInfo storage poolInfo = pools[_pid];\r\n        address token = poolInfo.token;\r\n\r\n        require(token == busd || token == usdt, \"vPool: invalid token\");\r\n        require(poolInfo.isOpen == true, \"vPool: pool is not opened\");\r\n\r\n        UserInfo storage userInfo = userInfos[_pid][_stakeType][msg.sender];\r\n\r\n        //Collect the obtained rewards\r\n        uint256 lastBonus = calcBonus(_pid, _stakeType, msg.sender);\r\n        userInfo.reward = userInfo.reward.add(lastBonus);\r\n\r\n        //restake: principal + reward(100%-30%)\r\n        uint256 bonus = userInfo.reward;\r\n        uint256 fee = bonus.mul(bonusFeeRate).div(denominator);\r\n        uint256 actualBonus = bonus.sub(fee);\r\n\r\n        userInfo.deposit = userInfo.deposit.add(actualBonus);\r\n        userInfo.totalValue = userInfo.totalValue.add(actualBonus); //deposit:totalValue = 1:1\r\n\r\n        uint256 lockDuration = userInfo.lockDuration;\r\n        userInfo.lastUpdateTime = block.timestamp;\r\n        userInfo.unLockedTime = block.timestamp.add(lockDuration);\r\n\r\n        poolInfo.balances[msg.sender] = poolInfo.balances[msg.sender].add(actualBonus);\r\n        poolInfo.balanceOfStakedType[msg.sender][_stakeType] = poolInfo.balanceOfStakedType[msg.sender][_stakeType].add(actualBonus);\r\n        poolInfo.totalSupply = poolInfo.totalSupply.add(actualBonus);\r\n\r\n        //clean reward\r\n        userInfo.reward = 0;\r\n\r\n        //new record\r\n        uint256 amount = userInfo.deposit;\r\n        uint256 totalValue = userInfo.totalValue;\r\n        uint256 apy = userInfo.apy;\r\n        StakeRecord memory record = StakeRecord({\r\n            stakeType: _stakeType,\r\n            token: token,\r\n            account: msg.sender,\r\n            amount: amount,\r\n            totalValue: totalValue,\r\n            apy: apy,\r\n            lockDuration: lockDuration,\r\n            createdAt: block.timestamp\r\n        });\r\n        stakeRecordIncr = stakeRecordIncr.add(1);\r\n        stakeRecords[stakeRecordIncr] = record;\r\n    }\r\n\r\n    function exit(uint256 _pid, StakeType _stakeType) public nonReentrant {\r\n        require(_pid != 0, \"vPool: invalid pid\");\r\n\r\n        PoolInfo storage poolInfo = pools[_pid];\r\n        require(poolInfo.isOpen == true, \"vPool: pool is not opened\");\r\n\r\n        UserInfo storage userInfo = userInfos[_pid][_stakeType][msg.sender];\r\n        require(userInfo.unLockedTime \u003c= block.timestamp, \"vPool: stake is locked\");\r\n\r\n        //Collect the obtained rewards\r\n        uint256 lastBonus = calcBonus(_pid, _stakeType, msg.sender);\r\n        userInfo.reward = userInfo.reward.add(lastBonus);\r\n\r\n        uint256 bonus = userInfo.reward;\r\n        uint256 fee = bonus.mul(bonusFeeRate).div(denominator);\r\n        uint256 actualBonus = bonus.sub(fee);\r\n        \r\n        uint256 amount = userInfo.deposit;\r\n\r\n        if (_stakeType == StakeType.Day0) {\r\n            userInfo.lastUpdateTime = block.timestamp;\r\n        } else {\r\n            userInfo.lastUpdateTime = userInfo.unLockedTime;\r\n        }\r\n        \r\n        userInfo.deposit = 0;\r\n        userInfo.totalValue = 0;\r\n        userInfo.reward = 0;\r\n        userInfo.apy = 0;\r\n\r\n        poolInfo.balances[msg.sender] = poolInfo.balances[msg.sender].sub(amount);\r\n        poolInfo.balanceOfStakedType[msg.sender][_stakeType] = poolInfo.balanceOfStakedType[msg.sender][_stakeType].sub(amount);\r\n        poolInfo.totalSupply = poolInfo.totalSupply.sub(amount);\r\n\r\n        address token = poolInfo.token;\r\n\r\n        // bonus\r\n        if (token == busd) {\r\n            IERC20(busd).safeTransfer(msg.sender, actualBonus);\r\n        } else {\r\n            IERC20(usdt).safeTransfer(msg.sender, actualBonus);\r\n        }\r\n\r\n        // principal\r\n        if(address(token) != address(0)) {\r\n            IERC20(token).safeTransfer(msg.sender, amount);\r\n        } else {\r\n            safeTransferETH(msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, \u0027ETH_TRANSFER_FAILED\u0027);\r\n    }\r\n\r\n    receive() external payable {}\r\n}"}}