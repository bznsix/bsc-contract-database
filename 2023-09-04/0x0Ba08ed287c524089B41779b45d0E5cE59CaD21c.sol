{"ERC20.sol":{"content":"// SPDX-License-Identifier: SimPL-2.0\npragma solidity ^0.5.10;\n\nimport \"./ERC20Interface.sol\";  // \nimport \"./Ownable.sol\";  //\n\ncontract ERC20 is ERC20Interface,Ownable{\n    \n    mapping (address =\u003e uint256) public balanceOf;  // \n    mapping (address =\u003e mapping (address =\u003e uint256)) internal allowed;  //  \n    \n    // \n    constructor() public{\n        totalSupply = 100000000000000000000000000;  \n        name = \"Super Car\";  \n        symbol = \"SPA\";  // \n        decimals = 18;  // \n        balanceOf[msg.sender] = totalSupply;  //\n        emit Transfer(address(0), msg.sender, totalSupply); \n    }\n    \n    // \n    function balance(address _owner) public view returns(uint256){\n        return balanceOf[_owner];\n    }\n    \n    function transfer(address _to, uint _value) public returns(bool success){\n        require(_to != address(0),\"to error\");\n        require(balanceOf[msg.sender] \u003e= _value,\"balance not enough\");\n        require(balanceOf[_to] + _value \u003e= balanceOf[_to],\"value error\");  // \n        \n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint _value) public returns(bool success){\n        require(_to != address(0),\"to error\");\n        require(balanceOf[_from] \u003e= _value,\"balance not enough\");\n        require(allowed[_from][msg.sender] \u003e= _value,\"allowed not enough\");  // \n        require(balanceOf[_to] + _value \u003e= balanceOf[_to],\"value error\");  // \n        \n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        allowed[_from][msg.sender] -= _value;\n        \n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    // \n    function approve(address _spender, uint256 _value) public returns(bool success){\n        allowed[msg.sender][_spender] += _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) public view returns(uint256){\n        return allowed[_owner][_spender];\n    }\n\n}"},"ERC20Interface.sol":{"content":"// SPDX-License-Identifier: SimPL-2.0\npragma solidity ^0.5.10;\ncontract ERC20Interface{\n    string public name;  // \n    string public symbol;  // \n    uint8 public decimals;  // \n    uint256 public totalSupply;  // \n    \n    // \n    function transfer(address _to, uint256 _value) public returns (bool success);\n    // \n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    // \n    function approve(address _spender, uint256 _value) public returns (bool success);\n    // \n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n    \n  \n    // \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    // \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);    \n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: SimPL-2.0\npragma solidity ^0.5.10;\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner,\"not owner\");\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0),\"newOwner error\");\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n"}}