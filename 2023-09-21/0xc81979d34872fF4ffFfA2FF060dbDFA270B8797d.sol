{"Address.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"},"AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.2 \u003c0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"axBNB.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\npragma solidity 0.7.4;\n\nimport \"./WrappedERC20.sol\";\nimport \"./IWETH.sol\";\nimport \"./SafeMath.sol\";\nimport \"./IFloorCalculator.sol\";\n\n\ninterface IERC31337BNB is IWrappedERC20\n{\n    function floorCalculator() external view returns (IFloorCalculator);\n    function sweepers(address _sweeper) external view returns (bool);\n    \n    function setFloorCalculator(IFloorCalculator _floorCalculator) external;\n    function setSweeper(address _sweeper, bool _allow) external;\n    function sweepFloor(address _to) external returns (uint256 amountSwept);\n}\n\nabstract contract ERC31337 is WrappedERC20, IERC31337BNB\n{\n    using SafeERC20 for IERC20;\n\n    IFloorCalculator public override floorCalculator;\n    \n    mapping (address =\u003e bool) public override sweepers;\n\n    constructor(IERC20 _wrappedToken, string memory _name, string memory _symbol)\n        WrappedERC20(_wrappedToken, _name, _symbol)\n    {}\n\n    function setFloorCalculator(IFloorCalculator _floorCalculator) public override ownerOnly()\n    {\n        floorCalculator = _floorCalculator;\n    }\n\n    function setSweeper(address sweeper, bool allow) public override ownerOnly()\n    {\n        sweepers[sweeper] = allow;\n    }\n\n    function sweepFloor(address to) public override returns (uint256 amountSwept)\n    {\n        require (to != address(0));\n        require (sweepers[msg.sender], \"Sweepers only\");\n        amountSwept = floorCalculator.calculateSubFloorAXBNB(wrappedToken, this);\n\n        if (amountSwept \u003e 0) {\n            wrappedToken.safeTransfer(to, amountSwept);\n        }\n    }\n}\n\n\ncontract axBNB is ERC31337, IWETH\n{\n    using SafeMath for uint256;\n    uint256 public FEE=0; // 0%\n    address public FEE_ADDRESS;\n    mapping(address=\u003ebool) IGNORED_ADDRESSES;\n    event FeeSet(address feeAddress, uint256 fee);\n\n    constructor (address wethAddress)\n        ERC31337(IWETH(wethAddress), \"AXBNB\", \"AXBNB\")\n    {\n        FEE_ADDRESS = msg.sender;\n    }\n\n    receive() external payable\n    {\n        if (msg.sender != address(wrappedToken)) {\n            deposit();\n        }\n    }\n\n    function setFee(address feeAddress, uint256 _fee) external ownerOnly{\n        FEE_ADDRESS = feeAddress;\n        FEE=_fee;\n        emit FeeSet(FEE_ADDRESS,FEE);\n    }\n\n    function setIgnoredAddresses(address _ignoredAddress, bool ignore)external ownerOnly{\n        IGNORED_ADDRESSES[_ignoredAddress]=ignore;\n    }\n    \n    function setIgnoredAddressBulk(address[] memory _ignoredAddressBulk, bool ignore)external ownerOnly{\n        \n        for(uint i=0;i\u003c_ignoredAddressBulk.length;i++){\n            address _ignoredAddress = _ignoredAddressBulk[i];\n            IGNORED_ADDRESSES[_ignoredAddress] = ignore;\n        }\n    }\n\n    function isIgnored(address _ignoredAddress) public view returns (bool) {\n        return IGNORED_ADDRESSES[_ignoredAddress];\n    }\n   \n   // 100 axbnb =\u003e 100 bnb is deposited to wbnb contract by this AXBNB contract =\u003e 100 AXBNB\n    function deposit() public payable override \n    {\n        uint256 amount = msg.value;\n        if(IGNORED_ADDRESSES[msg.sender]){\n\n            IWETH(address(wrappedToken)).deposit{ value: amount }();\n            _mint(msg.sender, amount);\n            emit Deposit(msg.sender, amount); \n        }\n        else{\n            uint256 feeAmount = amount.mul(FEE).div(100000);\n            IWETH(address(wrappedToken)).deposit{ value: amount }();\n\n            uint256 amountAfterFee = amount.sub(feeAmount);\n            _mint(msg.sender, amountAfterFee);\n            emit Deposit(msg.sender, amountAfterFee); \n            if(feeAmount\u003e0){\n                _mint(FEE_ADDRESS, feeAmount);\n                emit Deposit(FEE_ADDRESS, feeAmount); \n            }\n        }\n    }\n\n    function withdraw(uint256 _amount) public override\n    {\n        if(IGNORED_ADDRESSES[msg.sender]){\n            _burn(msg.sender, _amount);\n\n            IWETH(address(wrappedToken)).withdraw(_amount);\n            \n            msg.sender.transfer(_amount);\n            emit Withdrawal(msg.sender, _amount);\n        }\n        else{\n            uint256 feeAmount = _amount.mul(FEE).div(100000);\n            if(feeAmount\u003e0){\n                _balanceOf[FEE_ADDRESS] = _balanceOf[FEE_ADDRESS].add(feeAmount);\n                _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(feeAmount);\n                emit Transfer(msg.sender, FEE_ADDRESS, feeAmount);\n            }\n            uint256 amountAfterFee = _amount.sub(feeAmount);\n            _burn(msg.sender, amountAfterFee);\n            IWETH(address(wrappedToken)).withdraw(amountAfterFee);\n            (bool success,) = msg.sender.call{ value: amountAfterFee }(\"\");\n            require (success, \"Transfer failed\");\n\n            emit Withdrawal(msg.sender, amountAfterFee);\n\n        }\n    }\n\n    \n\n    function _transfer(address sender, address recipient, uint256 amount) internal override virtual {\n        require(sender != address(0), \"axBNB: transfer from the zero address\");\n        require(recipient != address(0), \"axBNB: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        // cut no FEE\n        if(IGNORED_ADDRESSES[recipient]){\n            _balanceOf[sender] = _balanceOf[sender].sub(amount, \"axBNB: transfer amount exceeds balance\");\n            _balanceOf[recipient] = _balanceOf[recipient].add(amount);\n            emit Transfer(sender, recipient, amount);\n        }\n        else{\n\n            // apply fee if there\n            _balanceOf[sender] = _balanceOf[sender].sub(amount, \"axBNB: transfer amount exceeds balance\");\n\n            uint256 axBNBFee = amount.mul(FEE).div(100000); \n            uint256 remAmount = amount.sub(axBNBFee);\n\n            if(axBNBFee\u003e0){\n                _balanceOf[FEE_ADDRESS] = _balanceOf[FEE_ADDRESS].add(axBNBFee);\n                emit Transfer(sender, FEE_ADDRESS, axBNBFee);\n            }\n                \n            _balanceOf[recipient] = _balanceOf[recipient].add(remAmount);\n\n            emit Transfer(sender, recipient, remAmount);            \n\n        }\n\n        \n    }\n}"},"axBNBDirect.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\npragma solidity 0.7.4;\n\nimport \"./IMagic.sol\";\nimport \"./IAxBNB.sol\";\nimport \"./TokensRecoverable.sol\";\nimport \"./Owned.sol\";\nimport \"./UniswapV2Library.sol\";\nimport \"./IUniswapV2Factory.sol\";\nimport \"./IMagicTransferGate.sol\";\nimport \"./IUniswapV2Router02.sol\";\nimport \"./ReentrancyGuard.sol\";\n\ncontract axBNBDirect is Owned, TokensRecoverable, ReentrancyGuard\n{\n    using SafeMath for uint256;\n\n    IAxBNB immutable axBNB;\n    IGatedERC20 immutable magic;\n    IUniswapV2Router02 private uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    IUniswapV2Factory private uniswapV2Factory = IUniswapV2Factory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\n\n    uint slippage = 5000; // 5000 for 5%\n    event SlippageSet(uint slippage);\n\n    constructor(address payable _axBNB, address payable _magic)\n    {\n        axBNB = IAxBNB(_axBNB);\n        magic = IGatedERC20(_magic);\n\n        IAxBNB(_axBNB).approve(address(uniswapV2Router), uint256(-1));\n        IGatedERC20(_magic).approve(address(uniswapV2Router), uint256(-1));\n    }\n\n    receive() external payable\n    {\n        require (msg.sender == address(axBNB));\n    }\n\n    // 3 decimal =\u003e1000 = 1% =\u003e \n    function setSlippage(uint _slippage) external ownerOnly{\n        require(_slippage\u003c100000,\"Cant be more than 100%\");\n        slippage=_slippage;\n        emit SlippageSet(slippage);\n    }\n\n    function estimateBuy(uint256 axBNBAmountIn) public view returns (uint256 magicAmount)\n    {\n        address[] memory path = new address[](2);\n        path[0] = address(axBNB);\n        path[1] = address(magic);\n        (uint256[] memory amounts) = UniswapV2Library.getAmountsOut(address(uniswapV2Factory), axBNBAmountIn, path);\n        return amounts[1];\n    }\n\n    function estimateSell(uint256 magicAmountIn) public view returns (uint256 ethAmount)\n    {\n        address[] memory path = new address[](2);\n        path[0] = address(magic);\n        path[1] = address(axBNB);\n        (uint256[] memory amounts) = UniswapV2Library.getAmountsOut(address(uniswapV2Factory), magicAmountIn, path);\n        return amounts[1];\n    }\n\n    function easyBuy() public payable returns (uint256 magicAmount)\n    {\n        uint slippageFactor=(SafeMath.sub(100000,slippage)).div(1000); // 100 - slippage =\u003e will return like 98000/1000 = 98 for default\n        return buy(estimateBuy(msg.value).mul(slippageFactor).div(100));\n    }\n\n     function easyBuyFromAXBNB(uint256 axBNBIn) public returns (uint256 magicAmount)\n    {\n        uint slippageFactor=(SafeMath.sub(100000,slippage)).div(1000); // 100 - slippage =\u003e will return like 98000/1000 = 98 for default\n        return buyFromAXBNB(axBNBIn, (estimateBuy(axBNBIn).mul(slippageFactor).div(100)));\n    }\n\n    function easySell(uint256 magicAmountIn) public returns (uint256 axBNBAmount)\n    {\n        uint slippageFactor=(SafeMath.sub(100000,slippage)).div(1000); // 100 - slippage =\u003e will return like 98000/1000 = 98 for default\n        return sell(magicAmountIn, estimateSell(magicAmountIn).mul(slippageFactor).div(100));\n    }\n\n    function easySellToAXBNB(uint256 magicAmountIn) public returns (uint256 axBNBAmount)\n    {\n        uint slippageFactor=(SafeMath.sub(100000,slippage)).div(1000); // 100 - slippage =\u003e will return like 98000/1000 = 98 for default\n        return sellForAXBNB(magicAmountIn, estimateSell(magicAmountIn).mul(slippageFactor).div(100));\n    }\n\n    function buy(uint256 magicOutMin) public payable nonReentrant returns (uint256 magicAmount)\n    {\n        uint256 amount = msg.value;\n        require (amount \u003e 0, \"Send BNB In to buy\");\n        uint256 magicPrev=magic.balanceOf(address(this));\n\n        axBNB.deposit{ value: amount}();\n\n        address[] memory path = new address[](2);\n        path[0] = address(axBNB);\n        path[1] = address(magic);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amount, magicOutMin, path, address(this), block.timestamp);\n        uint256 magicCurr=magic.balanceOf(address(this));\n\n        magicAmount = magicCurr.sub(magicPrev);\n        magic.transfer(msg.sender, magicAmount);// transfer magic swapped\n\n        return magicAmount; // fee will cut on this if not IGNORED_ADDRESS;\n    }\n\n    function buyFromAXBNB(uint256 axBNBIn, uint256 magicOutMin) public nonReentrant returns (uint256 magicAmount)\n    {\n\n        uint256 magicPrev=magic.balanceOf(address(this));\n\n        axBNB.transferFrom(msg.sender,address(this),axBNBIn);\n        \n        address[] memory path = new address[](2);\n        path[0] = address(axBNB);\n        path[1] = address(magic);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(axBNBIn, magicOutMin, path, address(this), block.timestamp);\n        uint256 magicCurr=magic.balanceOf(address(this));\n\n        magicAmount = magicCurr.sub(magicPrev);\n        magic.transfer(msg.sender, magicAmount);// transfer magic swapped\n        \n        return magicAmount; // fee will cut on this if not IGNORED_ADDRESS;\n     }\n\n\n\n    function sell(uint256 magicAmountIn, uint256 axBNBOutMin) public nonReentrant returns (uint256 bnbAmount)\n    {\n        require (magicAmountIn \u003e 0, \"Nothing to sell\");\n        IMagicTransferGate gate = IMagicTransferGate(address(magic.transferGate()));\n\n        uint256 prevaxBNBAmount = axBNB.balanceOf(address(this));\n\n        // to avoid double taxation\n        gate.setUnrestricted(true);\n        magic.transferFrom(msg.sender, address(this), magicAmountIn);\n        gate.setUnrestricted(false);\n\n        address[] memory path = new address[](2);\n        path[0] = address(magic);\n        path[1] = address(axBNB);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(magicAmountIn, axBNBOutMin, path, address(this), block.timestamp);\n        uint256 currAXBNBAmount = axBNB.balanceOf(address(this));\n\n        uint256 axBNBAmount = currAXBNBAmount.sub(prevaxBNBAmount);\n    \n        // will be applied only if BNB payout is happening \n        //else IGNORED_ADDRESSES in axBNB will handle\n        if(!axBNB.isIgnored(msg.sender)){\n\n            uint feeAXBNB = axBNB.FEE();\n            address feeAddress = axBNB.FEE_ADDRESS();\n\n            uint feeAmount= axBNBAmount.mul(feeAXBNB).div(100000);\n            uint remAmount = axBNBAmount.sub(feeAmount);\n            axBNB.transfer(feeAddress, feeAmount);\n            axBNB.withdraw(remAmount);\n            msg.sender.transfer(remAmount);\n            return remAmount;\n        }\n        else{\n            axBNB.withdraw(axBNBAmount);\n            msg.sender.transfer(axBNBAmount);\n            return axBNBAmount;\n        }\n    }\n\n\n    function sellForAXBNB(uint256 magicAmountIn, uint256 axBNBOutMin) public nonReentrant returns (uint256 axBNBAmount)\n    {\n        require (magicAmountIn \u003e 0, \"Nothing to sell\");\n        IMagicTransferGate gate = IMagicTransferGate(address(magic.transferGate()));\n        uint256 prevaxBNBAmount = axBNB.balanceOf(address(this));\n\n        // to avoid double taxation\n        gate.setUnrestricted(true);\n        magic.transferFrom(msg.sender, address(this), magicAmountIn);\n        gate.setUnrestricted(false);\n\n        address[] memory path = new address[](2);\n        path[0] = address(magic);\n        path[1] = address(axBNB);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(magicAmountIn, axBNBOutMin, path, address(this), block.timestamp);\n        uint256 currAXBNBAmount = axBNB.balanceOf(address(this));\n        axBNBAmount = currAXBNBAmount.sub(prevaxBNBAmount);\n        axBNB.transfer(msg.sender, axBNBAmount);\n        \n        return axBNBAmount;\n    }\n\n}"},"axBNBLiquidity.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\npragma solidity 0.7.4;\n\nimport \"./IUniswapV2Pair.sol\";\nimport \"./IWrappedERC20.sol\";\n\nimport \"./IWETH.sol\";\nimport \"./IFloorCalculator.sol\";\nimport \"./IWrappedERC20Events.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./IWizardEventGate.sol\";\nimport \"./IMagicTransferGate.sol\";\n\nimport \".//ERC20Upgradeable.sol\";\nimport \"./OwnableUpgradeable.sol\";\nimport \"./SafeMathUpgradeable.sol\";\nimport \"./SafeERC20Upgradeable.sol\";\nimport \"./TokensRecoverableUpg.sol\";\n\n\n\ninterface IERC31337 is IWrappedERC20Events\n{\n\n    function addLPpair(address _wrappedToken) external ;\n\n    function removeLPpair(address _wrappedToken) external ;\n    function depositTokens(address _wrappedToken, uint256 _amount) external; \n\n    function floorCalculator() external view returns (IFloorCalculator);\n    function sweepers(address _sweeper) external view returns (bool);\n    \n    function setFloorCalculator(IFloorCalculator _floorCalculator) external;\n    function setSweeper(address _sweeper, bool _allow) external;\n    function sweepFloor(IERC20[] memory wrappedTokens, address to)  external returns (uint256 amountSwept);\n}\n\n\ncontract axBNBLiquidity is ERC20Upgradeable, IWrappedERC20Events, OwnableUpgradeable, TokensRecoverableUpg\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using SafeERC20 for IERC20;\n    using SafeMathUpgradeable for uint256;\n\n    mapping(address=\u003ebool) wrappedTokens;\n    mapping(address=\u003euint256) supplyFrom;\n\n\n    address stakeAddress;\n    address treasuryAddress;\n    uint256 stakeFee;//0.0 %\n    uint256 treasuryFee;//0.0 %\n    mapping(address=\u003ebool) IGNORED_ADDRESSES;\n    address public wizardZapper;\n    \n    IWizardEventGate public wizardEventGate;\n    address public LPAddress; // Wizard \u003c-\u003e Magic SLP\n\n    IFloorCalculator public floorCalculator;\n    mapping (address =\u003e bool) public sweepers;\n    \n    event TransferParamsSet(address stakeAddress, address treasuryAddress, uint256 stakeFee, uint256 treasuryFee);\n    event LPAddressSet(address LPAddress);\n    event ZapperSet(address wizardZapper);\n\n    function initialize(IWrappedERC20 _wrappedToken) public initializer  {\n\n        __Ownable_init_unchained();\n        __ERC20_init(\"Vein\",\"VEIN\");\n\n        if (_wrappedToken.decimals() != 18) {\n            _setupDecimals(_wrappedToken.decimals());\n        }\n        wrappedTokens[address(_wrappedToken)]=true;\n        stakeFee = 1000; //1%\n        treasuryFee = 1000; //1%\n    }\n\n    function addLPpair(IERC20 _wrappedToken) external onlyOwner{\n        if (_wrappedToken.decimals() != 18 || _wrappedToken.decimals()\u003edecimals()) {\n            _setupDecimals(_wrappedToken.decimals());\n        }\n        wrappedTokens[address(_wrappedToken)]=true;\n    }\n\n    function removeLPpair(address _wrappedToken) external onlyOwner{\n        wrappedTokens[_wrappedToken]=false;\n    }\n\n    function depositTokens(address _wrappedToken, uint256 _amount) public \n    {\n        _beforeDepositTokens(_amount);\n        require(wrappedTokens[_wrappedToken],\"This token cannot be used to deposit\");\n\n        IERC20 wrappedToken=IERC20(_wrappedToken);\n        uint256 myBalance = wrappedToken.balanceOf(address(this));\n\n        wrappedToken.safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 received = wrappedToken.balanceOf(address(this)).sub(myBalance);\n        \n        supplyFrom[_wrappedToken]=supplyFrom[_wrappedToken].add(_amount);\n\n        _mint(msg.sender, received);\n        emit Deposit(msg.sender, _amount);\n    }\n\n    // function withdrawTokens(uint256 _amount) public override\n    // {\n    //     _beforeWithdrawTokens(_amount);\n    //     _burn(msg.sender, _amount);\n    //     uint256 myBalance = wrappedToken.balanceOf(address(this));\n    //     wrappedToken.safeTransfer(msg.sender, _amount);\n    //     require (wrappedToken.balanceOf(address(this)) == myBalance.sub(_amount), \"Transfer not exact\");\n\n    //     emit Withdrawal(msg.sender, _amount);\n    // }\n\n    function setFloorCalculator(IFloorCalculator _floorCalculator) public  onlyOwner()\n    {\n        floorCalculator = _floorCalculator;\n    }\n\n    function setSweeper(address sweeper, bool allow) public  onlyOwner()\n    {\n        sweepers[sweeper] = allow;\n    }\n\n    //wrappedTokens are all the axBNB\u003c-\u003edMagic pair addresses \n    function sweepFloor(IERC20[] memory _wrappedTokens, address to) public  returns (uint256 amountSwept)\n    {\n        require (to != address(0));\n        require (sweepers[msg.sender], \"Sweepers only\");\n\n        amountSwept = floorCalculator.calculateSubFloorWizard(_wrappedTokens, IERC20(address(this)));// its always constant for Wizard or any LP pairs\n        if (amountSwept \u003e 0) {\n            _wrappedTokens[0].safeTransfer(to, amountSwept);\n        }\n    }\n\n    function _beforeWithdrawTokens(uint256) internal pure\n    { \n        revert(\"liquidity is locked\");\n    }\n\n    function setEventGate(IWizardEventGate _wizardEventGate) external onlyOwner()\n    {\n        wizardEventGate = _wizardEventGate;\n    }\n\n    function setLPAddress(address _LPAddress) external onlyOwner()\n    {\n        require(_LPAddress != address(0), \"axBNBLiquidity: _LPAddress cannot be zero address\");\n        LPAddress = _LPAddress;\n        emit LPAddressSet(LPAddress);\n    }\n\n    function setZapper(address _wizardZapper) external onlyOwner() {\n        require(_wizardZapper != address(0), \"axBNBLiquidity: _wizardZapper cannot be zero address\");\n        wizardZapper = _wizardZapper;   \n        emit ZapperSet(wizardZapper);     \n    }\n\n    function setIgnoredAddresses(address _ignoredAddress, bool ignore)external onlyOwner{\n        IGNORED_ADDRESSES[_ignoredAddress]=ignore;\n    }\n\n    function setIgnoredAddressBulk(address[] memory _ignoredAddressBulk, bool ignore)external onlyOwner{\n        \n        for(uint i=0;i\u003c_ignoredAddressBulk.length;i++){\n            address _ignoredAddress = _ignoredAddressBulk[i];\n            IGNORED_ADDRESSES[_ignoredAddress] = ignore;\n        }\n    }\n\n    function isIgnored(address _ignoredAddress) public view returns (bool) {\n        return IGNORED_ADDRESSES[_ignoredAddress];\n    }\n   \n    function setTransferParameters(address _stakeAddress, address _treasuryAddress, uint256 _stakeFee, uint256 _treasuryFee) onlyOwner external{\n        require(_stakeAddress != address(0), \"axBNBLiquidity: _stakeAddress cannot be zero address\");\n        require(_treasuryAddress != address(0), \"axBNBLiquidity: _treasuryAddress cannot be zero address\");\n        stakeAddress=_stakeAddress;\n        treasuryAddress=_treasuryAddress;\n        stakeFee=_stakeFee;\n        treasuryFee=_treasuryFee;\n        emit TransferParamsSet(_stakeAddress, _treasuryAddress, _stakeFee, _treasuryFee);\n\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\n        require(sender != address(0), \"Wizard: transfer from the zero address\");\n        require(recipient != address(0), \"Wizard: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"Wizard: transfer amount exceeds balance\");\n\n        if(sender == wizardZapper \u0026\u0026 recipient != address(wizardEventGate) \u0026\u0026 recipient != LPAddress ) \n        {    \n           _balances[address(wizardEventGate)] = _balances[address(wizardEventGate)].add(amount);\n            emit Transfer(sender, address(wizardEventGate), amount);\n            wizardEventGate.lockWizard(sender, recipient, amount); \n        }\n        else if(sender == LPAddress \u0026\u0026 recipient != address(wizardEventGate) \u0026\u0026 recipient != wizardZapper)\n        {   \n            uint256 stakingFeeAmt = amount.mul(stakeFee).div(100000); \n            uint256 treasuryFeeAmt = amount.mul(treasuryFee).div(100000); \n            uint256 remAmount = amount.sub(stakingFeeAmt).sub(treasuryFeeAmt);\n\n            _balances[stakeAddress] = _balances[stakeAddress].add(stakingFeeAmt);\n            _balances[treasuryAddress] = _balances[treasuryAddress].add(treasuryFeeAmt);\n            \n            emit Transfer(sender, stakeAddress, stakingFeeAmt);\n            emit Transfer(sender, treasuryAddress, treasuryFeeAmt);\n\n            _balances[address(wizardEventGate)] = _balances[address(wizardEventGate)].add(remAmount);\n            emit Transfer(sender, address(wizardEventGate), remAmount);\n            wizardEventGate.lockWizard(sender, recipient, remAmount); \n        }\n\n        else if(IGNORED_ADDRESSES[recipient]){\n            _balances[recipient]=_balances[recipient].add(amount);\n            emit Transfer(sender, recipient, amount);\n        }\n        else{\n            uint256 stakingFeeAmt = amount.mul(stakeFee).div(100000); \n            uint256 treasuryFeeAmt = amount.mul(treasuryFee).div(100000); \n            uint256 remAmount = amount.sub(stakingFeeAmt).sub(treasuryFeeAmt);\n\n            _balances[stakeAddress] = _balances[stakeAddress].add(stakingFeeAmt);\n            _balances[treasuryAddress] = _balances[treasuryAddress].add(treasuryFeeAmt);\n            _balances[recipient] = _balances[recipient].add(remAmount);\n            \n            emit Transfer(sender, stakeAddress, stakingFeeAmt);\n            emit Transfer(sender, treasuryAddress, treasuryFeeAmt);\n            emit Transfer(sender, recipient, remAmount);\n        }\n    }\n\n\n    function _beforeDepositTokens(uint256 _amount) internal virtual view { }\n}\n\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\nimport \"./Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"},"EnumerableSet.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value\u0027s index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as \u0027swap and pop\u0027).\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \u0027if\u0027 statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length \u003e index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\n/* ROOTKIT:\r\nSimplified thanks to higher solidity version\r\nBut same functionality\r\n*/\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\nabstract contract ERC20 is IERC20 \r\n{\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address =\u003e uint256) internal _balanceOf;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) public override allowance;\r\n\r\n    uint256 public override totalSupply;\r\n\r\n    string public override name;\r\n    string public override symbol;\r\n    uint8 public override decimals = 18;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory _name, string memory _symbol) \r\n    {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function balanceOf(address a) public virtual override view returns (uint256) { return _balanceOf[a]; }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 oldAllowance = allowance[sender][msg.sender];\r\n        if (oldAllowance != uint256(-1)) {\r\n            _approve(sender, msg.sender, oldAllowance.sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balanceOf[sender] = _balanceOf[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balanceOf[recipient] = _balanceOf[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        totalSupply = totalSupply.add(amount);\r\n        _balanceOf[account] = _balanceOf[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balanceOf[account] = _balanceOf[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        totalSupply = totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowance[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 _decimals) internal {\r\n        decimals = _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}"},"ERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\nimport \"./ContextUpgradeable.sol\";\nimport \"./IERC20Upgradeable.sol\";\nimport \"./SafeMathUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    mapping (address =\u003e uint256) internal _balances;\n\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n\n    uint256 internal _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n    uint256[44] private __gap;\n}\n"},"FloorCalculator.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\npragma solidity 0.7.4;\n\nimport \"./IFloorCalculator.sol\";\nimport \"./IMagic.sol\";\nimport \"./SafeMath.sol\";\nimport \"./UniswapV2Library.sol\";\nimport \"./IUniswapV2Factory.sol\";\nimport \"./TokensRecoverable.sol\";\nimport \"./EnumerableSet.sol\";\n\ncontract FloorCalculator is TokensRecoverable\n{\n\n    using SafeMath for uint256;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    IMagic immutable Magic;\n    IUniswapV2Factory[] uniswapV2Factories;\n    EnumerableSet.AddressSet ignoredAddresses;\n\n    constructor(IMagic _Magic)\n    {\n        Magic = _Magic;\n    }\n\n    function addUniswapV2Factory(IUniswapV2Factory _uniswapV2Factory) public ownerOnly  {\n        uniswapV2Factories.push(_uniswapV2Factory);\n    }\n\n    function resetV2Factories() public ownerOnly {\n         delete uniswapV2Factories;\n     }\n    \n    function getUniV2Factories() public view returns(IUniswapV2Factory[] memory) {\n        return uniswapV2Factories;\n    }\n\n    \n    function allowedUniswapFactories() public view returns (uint256) { return uniswapV2Factories.length; }\n\n    // add addresses that you have just locked Magic permanently and wont ask for Wizard or axBNB from pool\n    function setIgnore(address ignoredAddress, bool add) public ownerOnly\n    {\n        if (add) \n        { \n            ignoredAddresses.add(ignoredAddress); \n        } \n        else \n        { \n            ignoredAddresses.remove(ignoredAddress); \n        }\n    }\n\n    function isIgnoredAddress(address ignoredAddress) public view returns (bool)\n    {\n        return ignoredAddresses.contains(ignoredAddress);\n    }\n\n    function ignoredAddressCount() public view returns (uint256)\n    {\n        return ignoredAddresses.length();\n    }\n\n    function ignoredAddressAt(uint256 index) public view returns (address)\n    {\n        return ignoredAddresses.at(index);\n    }\n\n    function ignoredAddressesTotalBalance() public view returns (uint256)\n    {\n        uint256 total = 0;\n        for (uint i = 0; i \u003c ignoredAddresses.length(); i++) {\n            total = total.add(Magic.balanceOf(ignoredAddresses.at(i)));\n        }\n\n        return total;\n    }\n\n\n    //  _wrappedTokens is all lp pairs axBNB\u003c-\u003eMagic\n    //  backing token is Wizard\n    function calculateSubFloorWizard(IERC20[] memory wrappedTokens, IERC20 backingToken) public view returns ( uint256){\n    \n        uint256 backingInPool = 0;\n        uint256 sellAllProceeds = 0;\n        address[] memory path = new address[](2);\n        path[0] = address(Magic);\n        path[1] = address(backingToken);\n        uint256 subFloor=0;\n    \n        for(uint i=0;i\u003cuniswapV2Factories.length;i++){\n\n            address pair = UniswapV2Library.pairFor(address(uniswapV2Factories[i]), address(Magic), address(backingToken));\n            \n            uint256 freeMagic = Magic.totalSupply().sub(Magic.balanceOf(pair)).sub(ignoredAddressesTotalBalance()) ;\n\n            if (freeMagic \u003e 0) {\n                uint256[] memory amountsOut = UniswapV2Library.getAmountsOut(address(uniswapV2Factories[i]), freeMagic, path);\n                sellAllProceeds = sellAllProceeds.add(amountsOut[1]);\n            }\n        \n            backingInPool = backingInPool.add(backingToken.balanceOf(pair));           \n        }\n\n        if (backingInPool \u003c= sellAllProceeds) { return 0; }\n        uint256 excessInPool = SafeMath.sub(backingInPool, sellAllProceeds);\n\n        uint256 requiredBacking = backingToken.totalSupply().sub(excessInPool);\n        uint256 currentBacking = 0;\n        \n        for(uint i=0;i\u003cwrappedTokens.length;i++){\n            currentBacking=currentBacking.add(wrappedTokens[i].balanceOf(address(backingToken)));\n        }\n\n        if (requiredBacking \u003e= currentBacking) { return 0; }\n        \n        subFloor = currentBacking.sub(requiredBacking);\n\n        return subFloor; // convert back to uniV2 \n        \n    }\n\n\n    // wrapped MATIC = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270 \n    // wrapped BNB = ? \n\n    // backing token is axBNB \n   \n    function calculateSubFloorAXBNB(IERC20 wrappedToken, IERC20 backingToken) public view returns (uint256)\n    {\n        uint256 backingInPool = 0;\n        uint256 sellAllProceeds = 0;\n        address[] memory path = new address[](2);\n        path[0] = address(Magic);\n        path[1] = address(backingToken);\n        uint256 subFloor=0;\n    \n        for(uint i=0;i\u003cuniswapV2Factories.length;i++){\n\n            address pair = UniswapV2Library.pairFor(address(uniswapV2Factories[i]), address(Magic), address(backingToken));\n            \n            uint256 freeMagic = Magic.totalSupply().sub(Magic.balanceOf(pair)).sub(ignoredAddressesTotalBalance());\n\n            if (freeMagic \u003e 0) {\n                uint256[] memory amountsOut = UniswapV2Library.getAmountsOut(address(uniswapV2Factories[i]), freeMagic, path);\n                sellAllProceeds = sellAllProceeds.add(amountsOut[1]);\n            }\n        \n            backingInPool = backingInPool.add(backingToken.balanceOf(pair));           \n                    \n        }\n\n        if (backingInPool \u003c= sellAllProceeds) { return 0; }\n        uint256 excessInPool = SafeMath.sub(backingInPool, sellAllProceeds);\n\n        uint256 requiredBacking = backingToken.totalSupply().sub(excessInPool);\n        uint256 currentBacking = wrappedToken.balanceOf(address(backingToken));\n        if (requiredBacking \u003e= currentBacking) { return 0; }\n        \n        subFloor = SafeMath.sub(currentBacking, requiredBacking); \n        return subFloor;           \n        \n    }\n}"},"IAxBNB.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\npragma solidity ^0.7.4;\nimport \"./IWETH.sol\";\n\ninterface IAxBNB is IWETH\n{\n    \n    function FEE() external view returns (uint256);\n    function FEE_ADDRESS() external view returns (address);\n    function isIgnored(address _ignoredAddress) external view returns (bool);\n    \n}\n"},"IaxBNB_Direct.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\npragma solidity ^0.7.4;\n\ninterface IaxBNB_Direct \n{\n\n\n    function estimateBuy(uint256 axBNBAmountIn) external view returns (uint256 darkMagicAmount);\n\n    function estimateSell(uint256 darkMagicAmountIn) external view returns (uint256 ethAmount);\n\n    function easyBuy() external payable returns (uint256 darkMagicAmount);\n    function easyBuyFromAXBNB(uint256 axBNBIn) external  returns (uint256 darkMagicAmount);\n\n    function easySell(uint256 darkMagicAmountIn) external returns (uint256 axBNBAmount);\n    function easySellToAXBNB(uint256 darkMagicAmountIn) external returns (uint256 axBNBAmount);\n\n    function buyFromAXBNB(uint256 axBNBIn, uint256 dMagicOutMin) external returns (uint256 darkMagicAmount);\n    function buy(uint256 axBNBIn, uint256 dMagicOutMin) external payable returns (uint256 darkMagicAmount);\n\n    function sell(uint256 darkMagicAmountIn, uint256 axBNBOutMin) external returns (uint256 axBNBAmount);\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\ninterface IERC20 \r\n{\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _account) external view returns (uint256);\r\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function approve(address _spender, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}"},"IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"IERC31337.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\nimport \"./IWrappedERC20Multiple.sol\";\r\nimport \"./IFloorCalculator.sol\";\r\n\r\ninterface IERC31337 is IWrappedERC20Multiple\r\n{\r\n    function floorCalculator() external view returns (IFloorCalculator);\r\n    function sweepers(address _sweeper) external view returns (bool);\r\n    \r\n    function setFloorCalculator(IFloorCalculator _floorCalculator) external;\r\n    function setSweeper(address _sweeper, bool _allow) external;\r\n    function sweepFloor(address _to) external returns (uint256 amountSwept);\r\n}"},"IEventGate.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\npragma solidity ^0.7.4;\n\ninterface IEventGate\n{\n\n    function handleZap(address sender, address recipient, uint256 amount) external returns(uint256);\n\n}\n"},"IFloorCalculator.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\n\npragma solidity ^0.7.4;\nimport \"./IERC20.sol\";\n\ninterface IFloorCalculator\n{\n    function calculateSubFloorAXBNB(IERC20 wrappedToken, IERC20 backingToken) external view returns (uint256);\n    function calculateSubFloorWizard(IERC20[] memory wrappedTokens, IERC20 backingToken) external view returns ( uint256);\n}\n"},"IGatedERC20.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IMagicTransferGate.sol\";\r\n\r\ninterface IGatedERC20 is IERC20\r\n{\r\n    function transferGate() external view returns (IMagicTransferGate);\r\n\r\n    function setTransferGate(IMagicTransferGate _transferGate) external;\r\n}"},"IMagic.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\npragma solidity ^0.7.4;\nimport \"./IGatedERC20.sol\";\n\ninterface IMagic is IGatedERC20\n{\n    \n    function FEE() external view returns (uint256);\n    function FEE_ADDRESS() external view returns (address);\n    function isIgnored(address _ignoredAddress) external view returns (bool);\n    \n}\n"},"IMagicTransferGate.sol":{"content":"\n\n// SPDX-License-Identifier: J-J-J-JENGA!!!\npragma solidity ^0.7.4;\npragma experimental ABIEncoderV2;\n\nimport \"./IOwned.sol\";\nimport \"./ITokensRecoverable.sol\";\nimport \"./IUniswapV2Router02.sol\";\nimport \"./IUniswapV2Factory.sol\";\n\n\nenum AddressState\n{\n    Unknown,\n    NotPool,\n    DisallowedPool,\n    AllowedPool\n} \nstruct TransferGateTarget\n{\n    address destination;\n    uint256 amount;\n}\n\ninterface IMagicTransferGate is IOwned, ITokensRecoverable\n{   \n\n\n    function allowedPoolTokensCount() external view returns (uint256);\n    function setUnrestrictedController(address unrestrictedController, bool allow) external;\n\n    function setFreeParticipant(address participant, bool free) external;\n\n    function setUnrestricted(bool _unrestricted) external;\n\n    function setParameters(address _dev, address _stake, uint16 _stakeRate, uint16 _burnRate, uint16 _devRate) external;\n    function allowPool(IUniswapV2Factory _uniswapV2Factory, IERC20 token) external;\n\n    function safeAddLiquidity(IUniswapV2Router02 _uniswapRouter02, IERC20 token, uint256 tokenAmount, uint256 MagicAmount//, uint256 minTokenAmount, uint256 minMagicAmount\n// ,uint256 deadline //stack deep issue coming so had to use fix values\n    ) external returns (uint256 MagicUsed, uint256 tokenUsed, uint256 liquidity);\n\n    function handleTransfer(address msgSender, address from, address to, uint256 amount) external\n    returns (uint256 burn, TransferGateTarget[] memory targets);\n\n  \n}"},"Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity \u003e=0.4.24 \u003c0.8.0;\n\nimport \"./AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can\u0027t have a constructor, it\u0027s common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"},"IOwned.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\ninterface IOwned\r\n{\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function transferOwnership(address newOwner) external;\r\n    function claimOwnership() external;\r\n}"},"ITokensRecoverable.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ninterface ITokensRecoverable\r\n{\r\n    function recoverTokens(IERC20 token) external;\r\n    function recoverETH(uint256 amount) external; \r\n}"},"IUniSwapPair.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\npragma solidity ^0.7.4;\n\ncontract UniswapV2Pair {\n\n    function name() external pure returns (string memory){}\n    function symbol() external pure returns (string memory){}\n    function decimals() external pure returns (uint8){}\n    function totalSupply() external view returns (uint){}\n    function balanceOf(address owner) external view returns (uint){}\n    function allowance(address owner, address spender) external view returns (uint){}\n\n    function approve(address spender, uint value) external returns (bool){}\n    function transfer(address to, uint value) external returns (bool){}\n    function transferFrom(address from, address to, uint value) external returns (bool){}\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32){}\n    function PERMIT_TYPEHASH() external pure returns (bytes32){}\n    function nonces(address owner) external view returns (uint){}\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external{}\n\n\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint){}\n    function factory() external view returns (address){}\n    function token0() external view returns (address){}\n    function token1() external view returns (address){}\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast){}\n    function price0CumulativeLast() external view returns (uint){}\n    function price1CumulativeLast() external view returns (uint){}\n    function kLast() external view returns (uint){}\n\n    function mint(address to) external returns (uint liquidity){}\n    function burn(address to) external returns (uint amount0, uint amount1){}\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external{}\n    function skim(address to) external{}\n    function sync() external{}\n\n    function initialize(address, address) external{}\n}"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"},"IUniswapV2Pair.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"},"IUniswapV2Router01.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}"},"IUniswapV2Router02.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\nimport \u0027./IUniswapV2Router01.sol\u0027;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"},"IWETH.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IWrappedERC20Events.sol\";\r\n\r\ninterface IWETH is IERC20, IWrappedERC20Events\r\n{    \r\n    function deposit() external payable;\r\n    function withdraw(uint256 _amount) external;\r\n}\r\n"},"IWizardEventGate.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\npragma solidity ^0.7.4;\n\ninterface IWizardEventGate\n{\n\n    function lockWizard(address sender, address recipient, uint256 amount) external returns(uint256);\n\n}\n"},"IWizardZapper.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\npragma solidity ^0.7.4;\n\ninterface IWizardZapper\n{\n\n    function easyBuy() external payable ;\n    function easyBuyFromAXBNB(uint256 axBNBIn) external  returns (uint256 wizAmount);\n\n    function easySell(uint256 darkMagicAmountIn) external;\n    function easySellToAXBNB(uint256 darkMagicAmountIn) external;\n\n}\n"},"IWrappedERC20.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IWrappedERC20Events.sol\";\r\n\r\ninterface IWrappedERC20 is IERC20, IWrappedERC20Events\r\n{\r\n    function wrappedToken() external view returns (IERC20);\r\n    function depositTokens(uint256 _amount) external;\r\n    function withdrawTokens(uint256 _amount) external;\r\n}"},"IWrappedERC20Events.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\ninterface IWrappedERC20Events\r\n{\r\n    event Deposit(address indexed from, uint256 amount);\r\n    event Withdrawal(address indexed to, uint256 amount);\r\n}\r\n"},"IWrappedERC20Multiple.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\npragma solidity ^0.7.4;\n\nimport \"./IERC20.sol\";\nimport \"./IWrappedERC20Events.sol\";\n\ninterface IWrappedERC20Multiple is IERC20, IWrappedERC20Events\n{\n    function depositTokens(address LPAddress, uint256 _amount) external;\n}"},"Magic.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity 0.7.4;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \".//ERC20Upgradeable.sol\";\r\nimport \"./OwnableUpgradeable.sol\";\r\nimport \"./SafeMathUpgradeable.sol\";\r\nimport \"./SafeERC20Upgradeable.sol\";\r\n\r\nimport \"./IMagicTransferGate.sol\";\r\nimport \"./IGatedERC20.sol\";\r\nimport \"./IEventGate.sol\";\r\n\r\n\r\ncontract Magic is Initializable, ERC20Upgradeable, OwnableUpgradeable\r\n{\r\n\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    IMagicTransferGate public transferGate;\r\n    IEventGate public eventGate;\r\n    address public LPAddress; // axBNB \u003c-\u003e Magic SLP\r\n\r\n\r\n    mapping(address=\u003ebool) IGNORED_ADDRESSES;\r\n    address public magicZapper;\r\n    address public wizardZapper;\r\n    event TransferGateSet(address transferGate, address eventGate);\r\n    event LPAddressSet(address _LPAddress);\r\n    event ZapperSet(address magicZapper, address wizardZapper);\r\n\r\n    function initialize()  public initializer  {\r\n\r\n        __Ownable_init_unchained();\r\n        __ERC20_init(\"Magic\",\"MAGIC\");\r\n\r\n        _mint(msg.sender, 4000000 ether);\r\n        \r\n    }\r\n\r\n\r\n    function setIgnoredAddressBulk(address[] memory _ignoredAddressBulk, bool ignore)external onlyOwner{\r\n        \r\n        for(uint i=0;i\u003c_ignoredAddressBulk.length;i++){\r\n            address _ignoredAddress = _ignoredAddressBulk[i];\r\n            IGNORED_ADDRESSES[_ignoredAddress] = ignore;\r\n        }\r\n    }\r\n\r\n    function setIgnoredAddresses(address _ignoredAddress, bool ignore)external onlyOwner{\r\n        IGNORED_ADDRESSES[_ignoredAddress]=ignore;\r\n    }\r\n    \r\n    function setTransferGates(IMagicTransferGate _transferGate, IEventGate _eventGate) external onlyOwner()\r\n    {\r\n        transferGate = _transferGate;\r\n        eventGate = _eventGate;\r\n        emit TransferGateSet(address(transferGate),address(eventGate));\r\n    }\r\n\r\n    function setLPAddress(address _LPAddress) external onlyOwner()\r\n    {\r\n        require(_LPAddress != address(0), \"Magic: _LPAddress cannot be zero address\");\r\n        LPAddress = _LPAddress;\r\n        emit LPAddressSet(_LPAddress);\r\n    }\r\n\r\n\r\n    function setZapper(address _magicZapper, address _wizardZapper) external onlyOwner() {\r\n        require(_magicZapper != address(0), \"Magic: _magicZapper cannot be zero address\");\r\n        require(_wizardZapper != address(0), \"Magic: _wizardZapper cannot be zero address\");\r\n\r\n        magicZapper = _magicZapper;\r\n        wizardZapper = _wizardZapper;   \r\n\r\n        emit ZapperSet(magicZapper, wizardZapper);     \r\n    }\r\n\r\n \r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override \r\n    {\r\n        require(sender != address(0), \"Magic: transfer from the zero address\");\r\n        require(recipient != address(0), \"Magic: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        IMagicTransferGate _transferGate = transferGate;\r\n        uint256 remaining = amount;\r\n        _balances[sender] = _balances[sender].sub(amount, \"Magic: transfer amount exceeds balance\");\r\n\r\n        if(sender == magicZapper \u0026\u0026 recipient != address(eventGate) \u0026\u0026 recipient != LPAddress \u0026\u0026 recipient != address(transferGate) \u0026\u0026 recipient != wizardZapper) \r\n        {   \r\n            _balances[address(eventGate)] = _balances[address(eventGate)].add(remaining);\r\n            emit Transfer(sender, address(eventGate), remaining);\r\n            eventGate.handleZap(sender, recipient, remaining); // to lock and transfer remaining Magic after zapRates to recipient\r\n        }\r\n\r\n        else if(sender == LPAddress \u0026\u0026 recipient != address(eventGate) \u0026\u0026 recipient != magicZapper \u0026\u0026 recipient != wizardZapper)\r\n        {   \r\n            if (address(_transferGate) != address(0)) {\r\n                (uint256 burn, TransferGateTarget[] memory targets) = _transferGate.handleTransfer(msg.sender, sender, recipient, amount);            \r\n                if (burn \u003e 0) {\r\n                    remaining = remaining.sub(burn, \"Magic: Burn too much for zapper\");\r\n                    _totalSupply = _totalSupply.sub(burn);\r\n                    emit Transfer(sender, address(0), burn);\r\n                }\r\n                for (uint256 x = 0; x \u003c targets.length; ++x) {\r\n                    (address dest, uint256 amt) = (targets[x].destination, targets[x].amount);\r\n                    remaining = remaining.sub(amt, \"Magic: Transfer too much for zapper\");\r\n                    _balances[dest] = _balances[dest].add(amt);\r\n                    emit Transfer(sender, dest, amt);\r\n                }\r\n            }\r\n            _balances[address(eventGate)] = _balances[address(eventGate)].add(remaining);\r\n            emit Transfer(sender, address(eventGate), remaining);\r\n            eventGate.handleZap(sender, recipient, remaining); // to lock and transfer remaining Magic after zapRates to recipient\r\n        }\r\n        else \r\n        if(IGNORED_ADDRESSES[recipient]){// || sender == address(eventGate)) {\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        } \r\n        else\r\n        {\r\n            if (address(_transferGate) != address(0)) {\r\n                (uint256 burn, TransferGateTarget[] memory targets) = _transferGate.handleTransfer(msg.sender, sender, recipient, amount);            \r\n                if (burn \u003e 0) {\r\n                    remaining = remaining.sub(burn, \"Magic: Burn too much\");\r\n                    _totalSupply = _totalSupply.sub(burn);\r\n                    emit Transfer(sender, address(0), burn);\r\n                }\r\n                for (uint256 x = 0; x \u003c targets.length; ++x) {\r\n                    (address dest, uint256 amt) = (targets[x].destination, targets[x].amount);\r\n                    remaining = remaining.sub(amt, \"Magic: Transfer too much\");\r\n                    _balances[dest] = _balances[dest].add(amt);\r\n                    emit Transfer(sender, dest, amt);\r\n                }\r\n            }\r\n            _balances[recipient] = _balances[recipient].add(remaining);\r\n            emit Transfer(sender, recipient, remaining);\r\n\r\n        }\r\n    }\r\n}\r\n\r\n"},"MagicEventGate.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\npragma solidity 0.7.4;\npragma experimental ABIEncoderV2;\n\nimport \"./IMagicTransferGate.sol\";\nimport \"./IGatedERC20.sol\";\n\nimport \"./UniswapV2Library.sol\";\nimport \"./IUniswapV2Factory.sol\";\nimport \"./IUniswapV2Router02.sol\";\nimport \"./IERC31337.sol\";\nimport \"./IAxBNB.sol\";\nimport \"./IMagic.sol\";\n\nimport \"./OwnableUpgradeable.sol\";\nimport \"./SafeMathUpgradeable.sol\";\nimport \"./TokensRecoverableUpg.sol\";\n\n\ncontract MagicEventGate is Initializable, OwnableUpgradeable, TokensRecoverableUpg\n{\n    using SafeMathUpgradeable for uint256;\n\n    IMagicTransferGate public transferGate;\n    address public LPAddress; // axBNB \u003c-\u003e Magic UniV2 LP token address\n    uint256 public slippage; // 10%\n    bool public enabledGate;\n\n    address public axBNBToken;\n    address public magicToken;\n    address public wizardToken;\n    uint256 public MIN_MAGIC;\n\n    uint256 public FEE_PERCENT_LOCKED;// this fees is locked on contract and not claimaable =\u003e If fees_locked = 3000 (3%) =\u003e 97% of User\u0027s magic is claimable\n\n    mapping(address=\u003euint256) public balanceLocked; // for each holder how much balance is locked\n    uint256 public totalLockedMagic; // total Magic that is still unclaimed (of total Magic contract once had and was swapped to Wizard) \n    uint256 public totalAvailableWizard; // how much Wizard is available after swaps\n    uint256 public totalSwappedMagic; // how much Magic is swapped\n\n    bool public allowClaimByHolder;\n\n    mapping(uint256 =\u003e address) public holdersAddresses;    \n    mapping(address =\u003e bool) public isHolderAddress;    \n\n    uint256 public totalHolders;\n\n    struct ZapParameters{\n        uint256 startZapTime;\n        uint256 startingZapFeePercent;\n        uint256 totalEventGateTime;\n        uint256 reductionSector;\n        uint256 reductionRate;\n    }\n\n    ZapParameters public zapParams;\n    IUniswapV2Router02 private uniswapV2Router; \n    IUniswapV2Factory private uniswapV2Factory; \n\n    address[] public Admins;\n    mapping(address =\u003e bool) public AdminByAddress;\n\n    event SetAdmins(address[] Admins);\n    event MagicLockedForWizard(address holder, uint256 MagicAmountIn, uint256 MagicAmountClaimable);\n    event WizardBuy(uint256 magicAmt, uint256 wizardAmt);\n    event Claimed(address holder, uint256 MagicAmount, uint256 wizardReceived);\n    event SlippageSet(uint slippage);\n    event FeesForLockSet(uint FEE_PERCENT_LOCKED);\n    event TokenAddressesSet(address axBNBToken, address wizardToken, address magicToken, address transferGate);\n    event ZapParamsSet( uint startZapTime, uint startingZapFeePercent, uint totalEventGateTime, uint reductionSector, uint reductionRate);\n\n    function initialize(address _axBNBToken, address _wizardToken, address _magicToken, IMagicTransferGate _transferGate)  public initializer  {\n\n        __Ownable_init_unchained();\n        \n        require(_axBNBToken != address(0), \"MagicEventGate: _axBNBToken cannot be zero address\");\n        require(_wizardToken != address(0), \"MagicEventGate: _wizardToken cannot be zero address\");\n        require(_magicToken != address(0), \"MagicEventGate: _magicToken cannot be zero address\");\n        require(address(_transferGate) != address(0), \"MagicEventGate: _transferGate cannot be zero address\");\n\n        AdminByAddress[msg.sender] = true; // owner is also admin by default\n\n        axBNBToken = _axBNBToken;\n        wizardToken = _wizardToken;\n        magicToken = _magicToken;\n        transferGate = _transferGate;\n\n        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n        uniswapV2Factory = IUniswapV2Factory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\n\n        LPAddress = uniswapV2Factory.getPair(axBNBToken, magicToken);\n        \n        zapParams.startZapTime = block.timestamp + 60; // time from which this will start\n        zapParams.startingZapFeePercent = 90000; // starting base, 90% fee from startTime =\u003e will reduce gradually every sector\n        zapParams.totalEventGateTime = 288000; // 80 hrs this reduction will happen, after that no zapping/adding liquidity mechanism\n        zapParams.reductionSector = 18000; // will change fee% every 5 hrs\n        zapParams.reductionRate = 5000; //will reduce fee% by 5% every sector on current fee\n\n        slippage = 99000;\n        MIN_MAGIC = 1 ether; // 1 Magic\n        FEE_PERCENT_LOCKED = 3000; // 3% Fee locked, non claimable by user for worth of Wizard token\n\n        totalLockedMagic = 0; // total Magic that is still unclaimed (of total Magic contract once had and was swapped to Wizard) \n        totalAvailableWizard = 0; // how much Wizard is available after swaps\n        totalSwappedMagic = 0; // how much Magic is swapped\n\n        allowClaimByHolder = false; // only owner can claim\n        totalHolders = 0;\n        enabledGate = true;\n\n\n        IAxBNB(axBNBToken).approve(address(_transferGate), uint256(-1));\n        IMagic(magicToken).approve(address(_transferGate), uint256(-1));\n        IMagic(magicToken).approve(LPAddress, uint256(-1));\n        IAxBNB(axBNBToken).approve(LPAddress, uint256(-1));\n \n        IERC20(LPAddress).approve(_wizardToken, uint256(-1));\n\n        // approve Routers\n        IAxBNB(axBNBToken).approve(0x10ED43C718714eb63d5aA57B78B54704E256024E, uint256(-1));\n        IMagic(magicToken).approve(0x10ED43C718714eb63d5aA57B78B54704E256024E, uint256(-1));\n        \n    }\n\n\n    function availableMagicToBuyWizard() public view returns(uint256){\n        return IMagic(magicToken).balanceOf(address(this));\n    }\n\n\n    function setSlippage(uint256 _slippage) external onlyAdmin{\n        slippage = _slippage;\n        emit SlippageSet(slippage);\n    }\n\n    function setMinimumAmountToTransfer(uint256 min_magic_amt) external onlyOwner{\n        MIN_MAGIC = min_magic_amt;\n    }\n\n    function setFeesForLock(uint256 fee_percent_locked) external onlyOwner{\n        FEE_PERCENT_LOCKED = fee_percent_locked;\n        emit FeesForLockSet(FEE_PERCENT_LOCKED);\n    }\n\n    // Wizard token address \u0026 axBNB token address\n    function setTokenAddresses(address _axBNBToken, address _wizardToken, address _magicToken, IMagicTransferGate _transferGate) external onlyOwner{\n        require(_axBNBToken != address(0), \"MagicEventGate: _axBNBToken cannot be zero address\");\n        require(_wizardToken != address(0), \"MagicEventGate: _wizardToken cannot be zero address\");\n        require(_magicToken != address(0), \"MagicEventGate: _magicToken cannot be zero address\");\n        require(address(_transferGate) != address(0), \"MagicEventGate: _transferGate cannot be zero address\");\n \n        axBNBToken = _axBNBToken;\n        wizardToken = _wizardToken;\n        magicToken = _magicToken;\n        transferGate = _transferGate;\n        emit TokenAddressesSet(axBNBToken, wizardToken, magicToken, address(transferGate));\n    }\n\n    // _startZapTime = unix timestamp from when to start =\u003e 1221223\n    // _startingZapFeePercent = 90% =\u003e 90000\n    // _totalEventGateTime (x)= overall time for which this will apply in seconds, 12 hrs =\u003e 60*60*12 =\u003e owner responsible to set this correct!\n    // _reductionSector (y) = reduce x every y seconds, 15 minutes =\u003e 60*15\n    // _reductionRate = 85% =\u003e 85000\n    function setZapParams(uint256 _startZapTime, uint256 _startingZapFeePercent, uint256 _totalEventGateTime, uint256 _reductionSector, \n                            uint256 _reductionRate) external onlyOwner{\n\n        uint256 powerPercent = _totalEventGateTime.div(_reductionSector);\n        uint256 reductionFeeMultiplier = SafeMath.sub(100000,_reductionRate);\n\n        uint256 factor = reductionFeeMultiplier;\n        uint256 prevFactor = reductionFeeMultiplier;\n        for(uint256 i=1;i\u003c=powerPercent;i++){\n            factor = prevFactor.mul(reductionFeeMultiplier).div(100000);\n            prevFactor = factor;\n        }\n\n        uint256 totalZapFactor = _startingZapFeePercent.mul(factor).div(100000);\n        \n        require(totalZapFactor\u003e=0,\"Fees will go less than 0% in given _totalEventGateTime\");\n        \n        zapParams.startZapTime = _startZapTime;\n        zapParams.startingZapFeePercent = _startingZapFeePercent;\n        zapParams.totalEventGateTime = _totalEventGateTime;\n        zapParams.reductionSector = _reductionSector;\n        zapParams.reductionRate = _reductionRate;\n\n        emit ZapParamsSet( _startZapTime, _startingZapFeePercent, _totalEventGateTime, _reductionSector, _reductionRate);\n    }\n\n\n     function getCurrentFee() public view returns(uint256){\n        uint256 currTime = block.timestamp;\n        if (zapParams.startZapTime \u003c= currTime \u0026\u0026  zapParams.startZapTime + zapParams.totalEventGateTime \u003e currTime) {\n            // uint256 powerPercent = (currTime.sub(zapParams.startZapTime)).div(zapParams.reductionSector);\n            // uint256 reductionFeeMultiplier = 100000 - zapParams.reductionRate;\n            // uint256 totalZapFactor = zapParams.startingZapFeePercent.mul(((reductionFeeMultiplier.div(1000)) ** powerPercent).mul(100000).div(100 ** powerPercent)).div(100000);\n            // // uint256 totalZap = amount.mul(totalZapFactor).div(100000);\n\n            uint256 powerPercent = (currTime.sub(zapParams.startZapTime)).div(zapParams.reductionSector);\n            uint256 reductionFeeMultiplier = SafeMath.sub(100000, zapParams.reductionRate);\n\n            uint256 factor = reductionFeeMultiplier;\n            uint256 prevFactor = reductionFeeMultiplier;\n            for(uint256 i=1;i\u003c=powerPercent;i++){\n                factor = prevFactor.mul(reductionFeeMultiplier).div(100000);\n                prevFactor = factor;\n            }\n\n            uint256 totalZapFactor = zapParams.startingZapFeePercent.mul(factor).div(100000);\n\n\n\n            return totalZapFactor;\n        }\n        return 0;\n    }\n\n    function enableGate(bool allow) external onlyOwner{\n        enabledGate = allow;\n    }\n\n\n    function handleZap(address sender, address recipient, uint256 amount) public returns(uint256)\n    {\n        require(msg.sender == magicToken, \"Only Magic token can call this while eventgate mechanisms are active\");\n\n        uint256 remAmount = amount;\n        if(enabledGate){\n            uint256 currTime = block.timestamp;\n            if (zapParams.startZapTime \u003c= currTime \u0026\u0026  zapParams.startZapTime + zapParams.totalEventGateTime \u003e currTime) {\n        \n                require(amount \u003e= MIN_MAGIC,\"Magic amount is less than MIN_MAGIC amount to be bought\"); // so that no micro txns occur\n\n                uint256 totalZapFactor = getCurrentFee();\n\n                uint256 totalLockForZap = amount.mul(totalZapFactor).div(100000);\n                remAmount = amount.sub(totalLockForZap);\n\n                uint256 claimableMagicByUserAfterFeeFactor = SafeMath.sub(100000, FEE_PERCENT_LOCKED);\n                uint256 claimableWorthMagic = totalLockForZap.mul(claimableMagicByUserAfterFeeFactor).div(100000);\n\n                // adding totalLockForZap Magic to this contract, so that contract can buy wizard!\n                // but claimableWorthMagic is less\n                balanceLocked[recipient] = balanceLocked[recipient].add(claimableWorthMagic);\n                totalLockedMagic = totalLockedMagic.add(claimableWorthMagic);\n                \n                // so that holder is added to indexing only once\n                if(!isHolderAddress[recipient]){\n                    holdersAddresses[totalHolders] = recipient; // take note of address who should receive wizard later for Magic locked   \n                    totalHolders=totalHolders.add(1);\n                    isHolderAddress[recipient]=true;\n                }\n                emit MagicLockedForWizard(recipient, totalLockForZap, claimableWorthMagic);\n            }\n        }\n\n        IMagic(magicToken).transfer(recipient,remAmount);\n        return remAmount;\n    }\n\n\n    // holder can claim wizard tokens\n    function setAllowClaimableByHolder(bool allow) external onlyAdmin{\n        allowClaimByHolder = allow;\n    }\n\n    // swap only allowed by owner\n    function buyWizardFromAllMagic() external onlyAdmin{\n        uint256 magicInContract = availableMagicToBuyWizard();\n        buyWizardFromMagic(magicInContract);\n    }\n\n\n    // swap only some % allowed by owner\n    // also say x% of all.. \n    // 5%  = 5000, 90% = 90000\n    function buyWizardFromPercentMagic(uint256 percent) external onlyAdmin{\n        uint256 magicInContract = availableMagicToBuyWizard();\n        uint256 magicToSwap = percent.mul(magicInContract).div(100000);\n        buyWizardFromMagic(magicToSwap);\n    }\n\n\n    // swap only allowed by owner\n    // x amount of Magic  =\u003e Wizard token\n    function buyWizardFromMagic(uint256 amount) public onlyAdmin{\n\n        uint256 prevAXBNBAmount = IAxBNB(axBNBToken).balanceOf(address(this)); \n        uint256 prevMagicAmount = IMagic(magicToken).balanceOf(address(this)); \n\n        //swap half magic to axBNB   \n        uint256 magicForBuy = amount.div(2);\n\n        address[] memory path = new address[](2);\n        path[0] = magicToken;\n        path[1] = axBNBToken; \n\n        uint slippageFactor=(SafeMathUpgradeable.sub(100000,slippage)).div(1000); // 100 - slippage =\u003e will return like 98000/1000 = 98 for default\n        (uint256[] memory amounts) = UniswapV2Library.getAmountsOut(address(uniswapV2Factory), magicForBuy, path);\n        \n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(magicForBuy, amounts[1].mul(slippageFactor).div(100), path, address(this), block.timestamp);\n\n        uint256 axBNBAmount = IAxBNB(axBNBToken).balanceOf(address(this)).sub(prevAXBNBAmount);\n\n        (, ,  uint256 LPtokens) = transferGate.safeAddLiquidity(IUniswapV2Router02(uniswapV2Router), IERC20(axBNBToken), axBNBAmount, magicForBuy);\n    \n        uint256 prevWizAmt = IERC31337(wizardToken).balanceOf(address(this));\n        IERC31337(wizardToken).depositTokens(LPAddress, LPtokens); \n        uint256 currWizAmt = IERC31337(wizardToken).balanceOf(address(this));\n        \n        uint256 wizardReceived = currWizAmt.sub(prevWizAmt);\n        totalAvailableWizard = totalAvailableWizard.add(wizardReceived);\n\n        uint256 currMagicAmount = IMagic(magicToken).balanceOf(address(this)); \n        totalSwappedMagic = totalSwappedMagic.add(prevMagicAmount.sub(currMagicAmount));\n\n        emit WizardBuy(wizardReceived, amount);\n    }\n\n\n    // balanceLocked[holder] -\u003e 5% of user\u0027s balance only claimed...\n    // only owner calls this function =\u003e claims Wizard for all holders\n    // 5%  = 5000, 90% = 90000\n    function claimWizardForAllHoldersByPercent(uint256 percent) external onlyAdmin{\n\n        uint256 totalMagicToClaimForAll = 0;\n        for(uint i=0; i\u003ctotalHolders;i++){\n            if(balanceLocked[holdersAddresses[i]]\u003e0){\n                uint balLocked = balanceLocked[holdersAddresses[i]].mul(percent).div(100000);\n                totalMagicToClaimForAll = totalMagicToClaimForAll.add(balLocked);\n            }\n        }\n\n        require(totalSwappedMagic\u003e=totalMagicToClaimForAll,\"Cannot claim for all users, totalAvailableWizard \u003c asked to claim \");\n\n        for(uint i=0; i\u003ctotalHolders;i++){\n            if(balanceLocked[holdersAddresses[i]]\u003e0)\n                claimWizard(holdersAddresses[i],balanceLocked[holdersAddresses[i]].mul(percent).div(100000));\n        }\n    }\n\n\n    // only owner calls this function =\u003e claims all Wizard for all holders\n    function claimWizardForAllHolders() external onlyAdmin{\n\n        uint256 totalMagicToClaimForAll = 0;\n        for(uint i=0; i\u003ctotalHolders;i++){\n            if(balanceLocked[holdersAddresses[i]]\u003e0)\n                totalMagicToClaimForAll = totalMagicToClaimForAll.add(balanceLocked[holdersAddresses[i]]);\n        }\n\n        require(totalSwappedMagic\u003e=totalMagicToClaimForAll,\"Cannot claim for all users, totalAvailableWizard \u003c asked to claim \");\n\n        for(uint i=0; i\u003ctotalHolders;i++){\n            if(balanceLocked[holdersAddresses[i]]\u003e0)\n                claimWizard(holdersAddresses[i],balanceLocked[holdersAddresses[i]]);\n        }\n    }\n\n    // only owner calls this function =\u003e claims Wizard for x holders\n    // if maxHolders = 11, means for first 11 holders, wizard will be claimed \n    // next time =\u003e need to claim say maxHolders = 22, as first 11 holders should have zero claims\n    function claimWizardForHoldersByIndex(uint256 maxHolders) external onlyAdmin{\n        for(uint i=0; i\u003cmaxHolders;i++){\n            if(balanceLocked[holdersAddresses[i]]\u003e0)\n                claimWizard(holdersAddresses[i], balanceLocked[holdersAddresses[i]]);\n        }\n    }\n\n    // holder can claim if allowClaimByHolder = true \n    // else only owner can claim\n    // not anyone can claim, reason - function calculates \"wizardPerMagic\" which depends on when it is called\n    function claimWizardForHolder(address holder) external returns(bool){\n\n        if(allowClaimByHolder) require(msg.sender == holder || msg.sender == owner(),\"Only holder/owner is allowed to claim\");\n        else require(AdminByAddress[msg.sender] == true, \"Only owner is allowed to claim\");\n\n        require(balanceLocked[holder]\u003e0,\"Cannot claim from zero balance of holder\");\n        require(balanceLocked[holder]\u003c=totalSwappedMagic,\"Total swapped magic is less than required swap for holder\");\n\n        claimWizard(holder,balanceLocked[holder]);        \n        return true;\n    }\n\n\n    // this might be case for last holder as residue might remain\n    // MAYBE send residue to this address??\n\n    function emergencyClaimWizard(address holder) external onlyOwner{\n        \n        uint256 magicLockedOfHolder = balanceLocked[holder];\n        // uint256 wizardPerMagic = totalAvailableWizard.div(totalSwappedMagic);\n        // uint256 wizardToTransfer = magicLockedOfHolder.mul(wizardPerMagic);\n        uint256 wizardToTransfer = magicLockedOfHolder.mul(totalAvailableWizard).div(totalSwappedMagic);\n        uint256 prevAvailableWizard = totalAvailableWizard;\n\n        // Total swapped magic are less than required swap for holder\n        if(magicLockedOfHolder\u003etotalSwappedMagic){\n            totalSwappedMagic = 0;\n\n            if(totalAvailableWizard\u003cwizardToTransfer) {\n                IERC31337(wizardToken).transfer(holder, totalAvailableWizard);\n                totalAvailableWizard = 0;\n            }\n            else{\n                totalAvailableWizard = totalAvailableWizard.sub(wizardToTransfer);\n                IERC31337(wizardToken).transfer(holder, wizardToTransfer);\n            }\n\n            totalLockedMagic = totalLockedMagic.sub(magicLockedOfHolder);\n            balanceLocked[holder] = 0;    \n            emit Claimed(holder,magicLockedOfHolder, prevAvailableWizard);\n        }\n        else \n            claimWizard(holder, balanceLocked[holder]);\n\n    }\n\n\n    // internal function called by claimWizardForAllHolders() \u0026 claimWizardForHolder(address holder)\n    function claimWizard(address holder, uint256 amount) internal{\n        \n        uint256 magicLockedOfHolder = balanceLocked[holder];\n        require(magicLockedOfHolder\u003e=amount,\"Balance locked by user is lesser\");\n        uint256 wizardToTransfer = amount.mul(totalAvailableWizard).div(totalSwappedMagic);\n\n        IERC31337(wizardToken).transfer(holder, wizardToTransfer);\n        \n        totalSwappedMagic = totalSwappedMagic.sub(amount);\n        totalLockedMagic = totalLockedMagic.sub(amount);\n        balanceLocked[holder] = balanceLocked[holder].sub(amount);\n        totalAvailableWizard = totalAvailableWizard.sub(wizardToTransfer);\n\n        emit Claimed(holder,amount,wizardToTransfer);\n    }\n\n\n    // owner calls to get residue axBNB stuck in contract if any due to swaps/adding liquidity\n    function getAllDust() external onlyOwner{\n        uint256 balanceAxBNB = IAxBNB(axBNBToken).balanceOf(address(this));\n        IAxBNB(axBNBToken).transfer(owner(),balanceAxBNB);\n    }\n\n    // owner calls to get extra Magic out of the contract\n    function ejectAllMagicFee() external onlyOwner{\n        uint256 totalMagicInContract = availableMagicToBuyWizard();\n        IMagic(magicToken).transfer(owner(),totalMagicInContract.sub(totalLockedMagic));\n    }\n\n    // Multi Admins functionality\n\n    modifier onlyAdmin() {\n        require(AdminByAddress[msg.sender]);\n        _;\n    }\n\n  \n    /**\n     * @dev Function to set Admins addresses\n     */\n    function setAdmins(address[] memory _Admins) public onlyOwner {\n        _setAdmins(_Admins);\n\n    }\n\n    function _setAdmins(address[] memory _Admins) internal {\n        for(uint256 i = 0; i \u003c Admins.length; i++) {\n            AdminByAddress[Admins[i]] = false;\n        }\n\n\n        for(uint256 j = 0; j \u003c _Admins.length; j++) {\n            AdminByAddress[_Admins[j]] = true;\n        }\n        Admins = _Admins;\n        emit SetAdmins(_Admins);\n    }\n\n    function getAdmins() public  view returns (address[] memory) {\n        return Admins;\n    }\n\n\n    // remove later\n    function approveRouters() external onlyOwner{\n        // approve Routers\n        IAxBNB(axBNBToken).approve(0x10ED43C718714eb63d5aA57B78B54704E256024E, uint256(-1));\n        IMagic(magicToken).approve(0x10ED43C718714eb63d5aA57B78B54704E256024E, uint256(-1));\n\n    }\n\n}"},"MagicTransferGate.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\npragma solidity 0.7.4;\npragma experimental ABIEncoderV2;\n\nimport \"./TokensRecoverable.sol\";\nimport \"./Owned.sol\";\nimport \"./IMagic.sol\";\n\nimport \"./IMagicTransferGate.sol\";\nimport \"./UniswapV2Library.sol\";\nimport \"./IUniswapV2Factory.sol\";\nimport \"./IUniswapV2Router02.sol\";\nimport \"./ReentrancyGuard.sol\";\n\n\n/* Magic:\nA transfer gate (GatedERC20) for use with Magic tokens\n\nIt:\n    Allows customization of tax and burn rates\n    Allows transfer to/from approved Uniswap pools\n    Disallows transfer to/from non-approved Uniswap pools\n    (doesn\u0027t interfere with other crappy AMMs)\n    Allows transfer to/from anywhere else\n    Allows for free transfers if permission granted\n    Allows for unrestricted transfers if permission granted\n    Provides a safe and tax-free liquidity adding function\n*/\n\nstruct MagicTransferGateParameters\n{\n    address dev;\n    uint16 stakeRate; // 100000 = 100%\n    uint16 burnRate; // 100000 = 100%\n    uint16 devRate;  // 100000 = 100%\n    address stake;\n}\n\ncontract MagicTransferGate is Owned, TokensRecoverable, IMagicTransferGate, ReentrancyGuard\n{   \n    using Address for address;\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    MagicTransferGateParameters public parameters;\n    IMagic immutable Magic ;\n    mapping (address =\u003e AddressState) public addressStates;\n    IERC20[] public allowedPoolTokens;\n    \n    bool public unrestricted;\n    mapping (address =\u003e bool) public unrestrictedControllers;\n    mapping (address =\u003e bool) public freeParticipant;\n\n    mapping (address =\u003e bool) public allowedFactoryAddress;\n\n    mapping (address =\u003e uint256) public liquiditySupply;\n    address public mustUpdate;    \n\n    uint256 slippage = 5000; //5000 for 5%\n    event SlippageSet(uint slippage);\n    event ParametersSet(address dev, address stake, uint16 stakeRate, uint16 burnRate, uint16 devRate);\n    event AddressStateSet(AddressState state);\n\n    constructor(address _Magic) {\n        Magic=IMagic(_Magic);\n    }\n\n    function addFactory(address factoryAddress) external ownerOnly{\n        allowedFactoryAddress[factoryAddress]=true;\n    }\n\n    function removeFactory(address factoryAddress) external ownerOnly{\n        allowedFactoryAddress[factoryAddress]=false;\n    }\n\n    // 3 decimal =\u003e1000 = 1% =\u003e \n    function setSlippage(uint256 _slippage) external ownerOnly{\n        require(_slippage\u003c100000,\"cannot be more than 100%\");\n        slippage=_slippage;\n        emit SlippageSet(slippage);        \n    }\n\n    function allowedPoolTokensCount() public view override returns (uint256) { return allowedPoolTokens.length; }\n\n    function setUnrestrictedController(address unrestrictedController, bool allow) public override ownerOnly(){\n        unrestrictedControllers[unrestrictedController] = allow;\n    }\n\n\n    function setFreeParticipant(address participant, bool free) public override ownerOnly()\n    {\n        freeParticipant[participant] = free;\n    }\n\n    function setUnrestricted(bool _unrestricted) public override\n    {\n        require (unrestrictedControllers[msg.sender], \"Not an unrestricted controller\");\n        unrestricted = _unrestricted;\n    }\n\n    function setParameters(address _dev, address _stake, uint16 _stakeRate, uint16 _burnRate, uint16 _devRate) public override ownerOnly()\n    {\n        require (_stakeRate \u003c= 100000 \u0026\u0026 _burnRate \u003c= 100000 \u0026\u0026 _devRate \u003c= 100000 \u0026\u0026 _stakeRate + _burnRate + _devRate \u003c= 100000, \"\u003e 100%\");\n        require (_dev != address(0) \u0026\u0026 _stake != address(0));\n        // require (_stakeRate \u003c= 500 \u0026\u0026 _burnRate \u003c= 500 \u0026\u0026 _devRate \u003c= 10, \"Sanity\");\n        \n        MagicTransferGateParameters memory _parameters;\n        _parameters.dev = _dev;\n        _parameters.stakeRate = _stakeRate;\n        _parameters.burnRate = _burnRate;\n        _parameters.devRate = _devRate;\n        _parameters.stake = _stake;\n        parameters = _parameters;\n\n        emit ParametersSet(_dev, _stake, _stakeRate, _burnRate, _devRate);\n    }\n\n    function allowPool(IUniswapV2Factory _uniswapV2Factory, IERC20 token) public override ownerOnly()\n    {\n        require(allowedFactoryAddress[address(_uniswapV2Factory)],\"This uniswapV2Factory not allowed\");\n        address pool = _uniswapV2Factory.getPair(address(Magic), address(token));\n        if (pool == address(0)) {\n            pool = _uniswapV2Factory.createPair(address(Magic), address(token));\n        }\n        AddressState state = addressStates[pool];\n        require (state != AddressState.AllowedPool, \"Already allowed\");\n        addressStates[pool] = AddressState.AllowedPool;\n        allowedPoolTokens.push(token);\n        liquiditySupply[pool] = IERC20(pool).totalSupply();\n    }\n\n\n    function safeAddLiquidity(IUniswapV2Router02 _uniswapRouter02, IERC20 token, uint256 tokenAmount, uint256 MagicAmount) public nonReentrant override\n        returns (uint256 MagicUsed, uint256 tokenUsed, uint256 liquidity)\n    {\n        require(allowedFactoryAddress[address(_uniswapRouter02.factory())],\"This _uniswapV2Factory not allowed\");\n\n        address pool = IUniswapV2Factory(_uniswapRouter02.factory()).getPair(address(Magic), address(token));\n        require (pool != address(0) \u0026\u0026 addressStates[pool] == AddressState.AllowedPool, \"Pool not approved\");\n        unrestricted = true;\n\n        uint256 tokenBalance = token.balanceOf(address(this));\n        uint256 MagicBalance = Magic.balanceOf(address(this));\n\n        token.safeTransferFrom(msg.sender, address(this), tokenAmount);\n        Magic.transferFrom(msg.sender, address(this), MagicAmount);\n        Magic.approve(address(_uniswapRouter02), MagicAmount);\n        token.safeApprove(address(_uniswapRouter02), tokenAmount);\n        // actual received token amount\n        \n        uint256 tokenAmountReceived= token.balanceOf(address(this)).sub(tokenBalance);\n        uint256 MagicAmountReceived=Magic.balanceOf(address(this)).sub(MagicBalance);\n\n        // uint256 tokenMinAmount = estimateBuy(_uniswapRouter02, token,tokenAmount).mul((100000-slippageBuy)/1000)/100;\n        // uint256 MagicMinAmount = estimateSell(_uniswapRouter02, token,MagicAmount).mul((100000-slippageSell)/1000)/100;\n\n        (MagicUsed, tokenUsed ,liquidity ) = \n        _uniswapRouter02.addLiquidity(\n            address(Magic), \n            address(token), \n            MagicAmountReceived, \n            tokenAmountReceived,\n            MagicAmountReceived.mul(SafeMath.sub(100000,slippage)).div(100000), \n            tokenAmountReceived.mul(SafeMath.sub(100000,slippage)).div(100000),\n            msg.sender, \n            block.timestamp);\n\n        liquiditySupply[pool] = IERC20(pool).totalSupply();\n        if (mustUpdate == pool) {\n            mustUpdate = address(0);\n        }\n\n        if (MagicUsed \u003c MagicAmount) {\n            Magic.transfer(msg.sender, MagicAmount.sub(MagicUsed));\n        }\n        tokenBalance = token.balanceOf(address(this)).sub(tokenBalance); // we do it this way in case there\u0027s a burn\n        if (tokenBalance \u003e 0) {\n            token.safeTransfer(msg.sender, tokenBalance);\n        }\n        \n        unrestricted = false;\n    }\n\n\n    function handleTransfer(address, address from, address to, uint256 amount) external override\n        returns (uint256 burn, TransferGateTarget[] memory targets){\n\n        address mustUpdateAddress = mustUpdate;\n        if (mustUpdateAddress != address(0)) {\n            mustUpdate = address(0);\n            liquiditySupply[mustUpdateAddress] = IERC20(mustUpdateAddress).totalSupply();\n        }\n        AddressState fromState = addressStates[from];\n        AddressState toState = addressStates[to];\n        if (fromState != AddressState.AllowedPool \u0026\u0026 toState != AddressState.AllowedPool) {\n            if (fromState == AddressState.Unknown) { fromState = detectState(from); }\n            if (toState == AddressState.Unknown) { toState = detectState(to); }\n            require (unrestricted || (fromState != AddressState.DisallowedPool \u0026\u0026 toState != AddressState.DisallowedPool), \"Pool not approved\");\n        }\n        if (toState == AddressState.AllowedPool) {\n            mustUpdate = to;\n        }\n        if (fromState == AddressState.AllowedPool) {\n            if (unrestricted) {\n                liquiditySupply[from] = IERC20(from).totalSupply();\n            }\n            require (IERC20(from).totalSupply() \u003e= liquiditySupply[from], \"Cannot remove liquidity\");            \n        }\n        if (unrestricted || freeParticipant[from] || freeParticipant[to]) {\n            return (0, new TransferGateTarget[](0));\n        }\n        MagicTransferGateParameters memory params = parameters;\n        // \"amount\" will never be \u003e totalSupply which is capped at 10k, so these multiplications will never overflow\n        burn = amount * params.burnRate / 100000;\n        targets = new TransferGateTarget[]((params.devRate \u003e 0 ? 1 : 0) + (params.stakeRate \u003e 0 ? 1 : 0));\n        uint256 index = 0;\n        if (params.stakeRate \u003e 0) {\n            targets[index].destination = params.stake;\n            targets[index++].amount = amount * params.stakeRate / 100000;\n        }\n        if (params.devRate \u003e 0) {\n            targets[index].destination = params.dev;\n            targets[index].amount = amount * params.devRate / 100000;\n        }\n    }\n\n    function setAddressState(address a, AddressState state) public ownerOnly()\n    {\n        addressStates[a] = state;\n        emit AddressStateSet(state);\n    }\n\n    function detectState(address a) public returns (AddressState state) \n    {\n        state = AddressState.NotPool;\n        if (a.isContract()) {\n            try this.throwAddressState(a)\n            {\n                assert(false);\n            }\n            catch Error(string memory result) {\n                if (bytes(result).length == 1) {\n                    state = AddressState.NotPool;\n                }\n                if (bytes(result).length == 2) {\n                    state = AddressState.DisallowedPool;\n                }\n            }\n            catch {\n            }\n        }\n        addressStates[a] = state;\n        return state;\n    }\n    \n    // Not intended for external consumption\n    // Always throws\n    // We want to call functions to probe for things, but don\u0027t want to open ourselves up to\n    // possible state-changes\n    // So we return a value by reverting with a message\n    function throwAddressState(address a) external view\n    {\n        try IUniswapV2Pair(a).factory() returns (address factory)\n        {\n            // don\u0027t care if it\u0027s some crappy alt-amm\n            if (allowedFactoryAddress[factory]) {\n                // these checks for token0/token1 are just for additional\n                // certainty that we\u0027re interacting with a uniswap pair\n                try IUniswapV2Pair(a).token0() returns (address token0)\n                {\n                    if (token0 == address(Magic)) {\n                        revert(\"22\");\n                    }\n                    try IUniswapV2Pair(a).token1() returns (address token1)\n                    {\n                        if (token1 == address(Magic)) {\n                            revert(\"22\");\n                        }                        \n                    }\n                    catch { \n                    }                    \n                }\n                catch { \n                }\n            }\n        }\n        catch {             \n        }\n        revert(\"1\");\n    }\n}\n"},"Math.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003e= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003c b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"},"MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003e= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003c b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"},"OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\nimport \"./ContextUpgradeable.sol\";\nimport \"./Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}\n"},"Owned.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\n/* ROOTKIT:\r\nProvides ownerOnly() modifier\r\nAllows for ownership transfer but requires the new\r\nowner to claim (accept) ownership\r\nSafer because no accidental transfers or renouncing\r\n*/\r\n\r\nimport \"./IOwned.sol\";\r\n\r\nabstract contract Owned is IOwned\r\n{\r\n    address public override owner = msg.sender;\r\n    address internal pendingOwner;\r\n\r\n    modifier ownerOnly()\r\n    {\r\n        require (msg.sender == owner, \"Owner only\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public override ownerOnly()\r\n    {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public override\r\n    {\r\n        require (pendingOwner == msg.sender);\r\n        pendingOwner = address(0);\r\n        emit OwnershipTransferred(owner, msg.sender);\r\n        owner = msg.sender;\r\n    }\r\n}"},"Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"ReentrancyGuardUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\nimport \"./Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\n/* ROOTKIT:\r\nModified to remove some junk\r\nAlso modified to remove silly restrictions (traps!) within safeApprove\r\n*/\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {        \r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).sub(\r\n                value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\r\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length \u003e 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}"},"SafeERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./SafeMathUpgradeable.sol\";\nimport \"./AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using SafeMathUpgradeable for uint256;\n    using AddressUpgradeable for address;\n\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\n/* ROOTKIT:\r\nO wherefore art thou 8 point O\r\n*/\r\n\r\nlibrary SafeMath \r\n{\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \r\n    {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) \r\n        {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \r\n    {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \r\n    {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"},"SafeMathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c \u003c a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b \u003e a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003e 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003e 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        return a % b;\n    }\n}\n"},"TokensRecoverable.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\n/* ROOTKIT:\r\nAllows recovery of unexpected tokens (airdrops, etc)\r\nInheriters can customize logic by overriding canRecoverTokens\r\n*/\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeERC20.sol\";\r\nimport \"./Owned.sol\";\r\nimport \"./ITokensRecoverable.sol\";\r\n\r\nabstract contract TokensRecoverable is Owned, ITokensRecoverable\r\n{\r\n    using SafeERC20 for IERC20;\r\n\r\n    function recoverTokens(IERC20 token) public override ownerOnly() \r\n    {\r\n        require (canRecoverTokens(token));\r\n        \r\n        token.safeTransfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n\r\n    function recoverETH(uint256 amount) public override ownerOnly() \r\n    {        \r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function canRecoverTokens(IERC20 token) internal virtual view returns (bool) \r\n    { \r\n        return address(token) != address(this); \r\n    }\r\n}"},"TokensRecoverableUpg.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\npragma solidity ^0.7.4;\n\n/* ROOTKIT:\nAllows recovery of unexpected tokens (airdrops, etc)\nInheriters can customize logic by overriding canRecoverTokens\n*/\n\nimport \"./SafeERC20Upgradeable.sol\";\nimport \"./OwnableUpgradeable.sol\";\n\nabstract contract TokensRecoverableUpg is OwnableUpgradeable\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    function recoverTokens(IERC20Upgradeable token) public onlyOwner() \n    {\n        require (canRecoverTokens(token));    \n        token.safeTransfer(msg.sender, token.balanceOf(address(this)));\n    }\n\n    function recoverETH(uint256 amount) public onlyOwner() \n    {        \n        msg.sender.transfer(amount);\n    }\n\n    function canRecoverTokens(IERC20Upgradeable token) internal virtual view returns (bool) \n    { \n        return address(token) != address(this); \n    }\n\n}"},"UniswapV2Library.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\nimport \"./IUniswapV2Pair.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, \u0027PancakeLibrary: IDENTICAL_ADDRESSES\u0027);\r\n        (token0, token1) = tokenA \u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), \u0027PancakeLibrary: ZERO_ADDRESS\u0027);\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex\u0027ff\u0027,\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex\u002700fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\u0027 // init code hash\r\n            ))));\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        pairFor(factory, tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\r\n        require(amountA \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_AMOUNT\u0027);\r\n        require(reserveA \u003e 0 \u0026\u0026 reserveB \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_LIQUIDITY\u0027);\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT\u0027);\r\n        require(reserveIn \u003e 0 \u0026\u0026 reserveOut \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_LIQUIDITY\u0027);\r\n        uint amountInWithFee = amountIn.mul(9975);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(10000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        require(amountOut \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_OUTPUT_AMOUNT\u0027);\r\n        require(reserveIn \u003e 0 \u0026\u0026 reserveOut \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_LIQUIDITY\u0027);\r\n        uint numerator = reserveIn.mul(amountOut).mul(10000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(9975);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length \u003e= 2, \u0027PancakeLibrary: INVALID_PATH\u0027);\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i \u003c path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length \u003e= 2, \u0027PancakeLibrary: INVALID_PATH\u0027);\r\n        amounts = new uint[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint i = path.length - 1; i \u003e 0; i--) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n"},"wizardDirect.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\npragma solidity 0.7.4;\n\nimport \"./IMagic.sol\";\nimport \"./IAxBNB.sol\";\nimport \"./TokensRecoverable.sol\";\nimport \"./Owned.sol\";\nimport \"./UniswapV2Library.sol\";\nimport \"./IUniswapV2Factory.sol\";\nimport \"./IMagicTransferGate.sol\";\nimport \"./IUniswapV2Router02.sol\";\nimport \"./IERC31337.sol\";\nimport \"./IaxBNB_Direct.sol\";\nimport \"./ReentrancyGuard.sol\";\n\ncontract wizardDirect is Owned, TokensRecoverable, ReentrancyGuard\n{\n    using SafeMath for uint256;\n    IAxBNB public immutable axBNB;\n    IMagic public immutable magic;\n    IaxBNB_Direct public immutable axBNBDirect;\n    IMagicTransferGate public immutable transferGate; \n    IERC31337 public immutable Wizard;\n\n    uint SLIPPAGE_Wizard =10000; //10%\n    \n    IUniswapV2Router02 private uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    IUniswapV2Factory private uniswapV2Factory = IUniswapV2Factory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\n    \n    event SlippageSet(uint slippage);\n\n    constructor(IAxBNB _axBNB, IMagic _magic, IaxBNB_Direct _axBNB_Direct, IMagicTransferGate _transferGate, IERC31337 _axBNB_Liquidity)\n    {\n        axBNB = _axBNB;\n        axBNBDirect = _axBNB_Direct;\n        transferGate = _transferGate;\n        Wizard = _axBNB_Liquidity;\n        magic = _magic;\n\n        _axBNB.approve(address(_axBNB_Direct), uint256(-1));\n        _magic.approve(address(_axBNB_Direct), uint256(-1));\n\n        _axBNB.approve(address(_transferGate), uint256(-1));\n        _magic.approve(address(_transferGate), uint256(-1));\n\n        _axBNB.approve(address(uniswapV2Router), uint256(-1));\n        _magic.approve(address(uniswapV2Router), uint256(-1));\n        _axBNB_Liquidity.approve(address(uniswapV2Router), uint256(-1));\n\n    }\n\n    receive() external payable\n    {\n        require (msg.sender == address(axBNB));\n    }\n   \n    // 3 decimal =\u003e1000 = 1% =\u003e \n    function setSlippage(uint _slippage_Wizard) external ownerOnly{\n        require(_slippage_Wizard\u003c100000,\"Cant be more than 100%\");\n        SLIPPAGE_Wizard=_slippage_Wizard;\n        emit SlippageSet(SLIPPAGE_Wizard);\n    }\n\n    \n    //  BNB =\u003e Wizard via LP\n    function easyBuy() external payable nonReentrant\n    {\n        uint256 prevmagicAmount = magic.balanceOf(address(this));\n        uint256 prevWizardAmount = Wizard.balanceOf(address(this));\n\n        uint256 tBNB=SafeMath.div(msg.value,2);\n        axBNB.deposit{ value: tBNB }();\n\n        uint256 magicAmt = axBNBDirect.easyBuy{ value: tBNB }();\n        \n        (, ,  uint256 LPtokens) =transferGate.safeAddLiquidity(uniswapV2Router, axBNB, tBNB, magicAmt);\n \n        address LPaddress = uniswapV2Factory.getPair(address(magic), address(axBNB));\n        \n        IERC20(LPaddress).approve(address(Wizard),LPtokens);\n\n        Wizard.depositTokens(LPaddress, LPtokens);\n    \n        uint256 currWizardAmount = Wizard.balanceOf(address(this));\n        Wizard.transfer(msg.sender,currWizardAmount.sub(prevWizardAmount));\n\n        // // any residue sent back to buyer/seller\n        uint256 currmagicAmount = magic.balanceOf(address(this)); \n        if(currmagicAmount\u003eprevmagicAmount)\n            magic.transfer(msg.sender,currmagicAmount.sub(prevmagicAmount));\n    }\n\n\n    //  BNB =\u003e Wizard\n    function easyBuyDirect() external payable nonReentrant\n    {\n\n        uint256 magicAmtTotal = axBNBDirect.easyBuy{ value: msg.value }();\n               \n        // swap magic to Wizard\n        address[] memory path = new address[](2);\n        path[0] = address(magic);\n        path[1] = address(Wizard);\n        (uint256[] memory amountsMin) = UniswapV2Library.getAmountsOut(address(uniswapV2Factory), magicAmtTotal, path);\n        uint256 WizardMin = amountsMin[1].mul(100000-SLIPPAGE_Wizard).div(100000); \n\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(magicAmtTotal, WizardMin, path, msg.sender, block.timestamp);\n                                                                        \n    }\n\n\n    //  axBNB =\u003e Wizard\n    function easyBuyFromAXBNB(uint256 axBNBAmt) external nonReentrant returns (uint256)\n    {\n\n        uint256 prevAXBNBAmount = axBNB.balanceOf(address(this));\n        uint256 prevmagicAmount = magic.balanceOf(address(this));\n        uint256 prevWizardAmount = Wizard.balanceOf(address(this));\n\n        axBNB.transferFrom(msg.sender,address(this),axBNBAmt);\n\n        //swap half axBNB to magic    \n        uint256 axBNBForBuy = axBNBAmt.div(2);\n\n        uint256 magicAmt = axBNBDirect.easyBuyFromAXBNB(axBNBForBuy);\n   \n        (, ,  uint256 LPtokens) =transferGate.safeAddLiquidity(uniswapV2Router, IERC20(axBNB), axBNBForBuy, magicAmt);\n\n        address LPaddress = uniswapV2Factory.getPair(address(magic), address(axBNB));\n        \n        IERC20(LPaddress).approve(address(Wizard),LPtokens);\n\n        Wizard.depositTokens(LPaddress, LPtokens);\n\n        uint256 WizardCurrBalance=Wizard.balanceOf(address(this));\n        Wizard.transfer(msg.sender,WizardCurrBalance.sub(prevWizardAmount));\n\n        // any residue sent back to buyer/seller\n        uint256 currmagicAmount = magic.balanceOf(address(this)); \n        uint256 currAXBNBAmount = axBNB.balanceOf(address(this));\n\n        if(currmagicAmount\u003eprevmagicAmount)\n            magic.transfer(msg.sender,currmagicAmount.sub(prevmagicAmount));\n\n        if(currAXBNBAmount\u003eprevAXBNBAmount)\n            axBNB.transfer(msg.sender,currAXBNBAmount.sub(prevAXBNBAmount));\n\n        return WizardCurrBalance.sub(prevWizardAmount);\n  \n    }\n\n    //  magic =\u003e Wizard\n    function easyBuyFromMagic(uint256 magicAmt) external nonReentrant\n    {\n        uint256 prevWizardAmount = Wizard.balanceOf(address(this));\n        uint256 prevaxBNBAmount = axBNB.balanceOf(address(this));\n        uint256 prevmagicAmount = magic.balanceOf(address(this));\n\n        magic.transferFrom(msg.sender,address(this),magicAmt);\n        \n        //swap half axBNB to magic    \n        uint256 magicForBuy = magicAmt.div(2);\n\n        uint256 axBNBAmt = axBNBDirect.easySellToAXBNB(magicForBuy);\n   \n        (, ,  uint256 LPtokens) =transferGate.safeAddLiquidity(uniswapV2Router, IERC20(axBNB), axBNBAmt, magicForBuy);\n\n        address LPaddress = uniswapV2Factory.getPair(address(magic), address(axBNB));\n        \n        IERC20(LPaddress).approve(address(Wizard),LPtokens);\n\n        Wizard.depositTokens(LPaddress, LPtokens);\n        \n        uint256 currWizardAmount = Wizard.balanceOf(address(this));\n        Wizard.transfer(msg.sender,currWizardAmount.sub(prevWizardAmount));\n\n        // any residue sent back to buyer/seller\n        uint256 curraxBNBAmount = axBNB.balanceOf(address(this));\n        uint256 currmagicAmount = magic.balanceOf(address(this)); \n\n        if(currmagicAmount\u003eprevmagicAmount)\n            magic.transfer(msg.sender,currmagicAmount.sub(prevmagicAmount));\n        \n        if(curraxBNBAmount\u003eprevaxBNBAmount)\n            axBNB.transfer(msg.sender,curraxBNBAmount.sub(prevaxBNBAmount));\n\n    }\n\n    //  magic =\u003e Wizard\n    function easyBuyFromMagicDirect(uint256 magicAmt) external nonReentrant\n    {\n        magic.transferFrom(msg.sender,address(this),magicAmt);\n        \n        address[] memory path = new address[](2);\n        path[0] = address(magic);\n        path[1] = address(Wizard);\n        (uint256[] memory amountsMin) = UniswapV2Library.getAmountsOut(address(uniswapV2Factory), magicAmt, path);\n        uint256 WizardOutMin = amountsMin[1].mul(SafeMath.sub(100000,SLIPPAGE_Wizard)).div(100000);// fee Wizard\n\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(magicAmt, WizardOutMin, path, msg.sender, block.timestamp);\n\n    }\n\n     //  Wizard =\u003e Magic\n    function easySellToMagic(uint256 wizardAmt) external nonReentrant\n    {\n\n        Wizard.transferFrom(msg.sender,address(this),wizardAmt);\n\n        address[] memory path = new address[](2);\n        path[0] = address(Wizard);\n        path[1] = address(magic);\n        (uint256[] memory amountsMin) = UniswapV2Library.getAmountsOut(address(uniswapV2Factory), wizardAmt, path);\n        uint256 magicOutMin = amountsMin[1].mul(SafeMath.sub(100000, SLIPPAGE_Wizard)).div(100000); // fee magic\n\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(wizardAmt, magicOutMin, path, msg.sender, block.timestamp);\n\n    }\n\n\n    //  Wizard =\u003e axBNB\n    function easySellToAXBNB(uint256 wizardAmt) external nonReentrant\n    {\n        uint256 prevmagicAmount = magic.balanceOf(address(this));\n        uint256 prevaxBNBAmount = axBNB.balanceOf(address(this));\n\n        Wizard.transferFrom(msg.sender,address(this),wizardAmt);\n      \n        address[] memory path = new address[](2);\n        path[0] = address(Wizard);\n        path[1] = address(magic);\n        (uint256[] memory amountsMin) = UniswapV2Library.getAmountsOut(address(uniswapV2Factory), wizardAmt, path);\n        uint256 magicOutMin = amountsMin[1].mul(SafeMath.sub(100000,SLIPPAGE_Wizard)).div(100000); \n\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(wizardAmt, magicOutMin, path, address(this), block.timestamp);\n\n        uint256 magicAmtAfterSwap = magic.balanceOf(address(this));\n        axBNBDirect.easySellToAXBNB(magicAmtAfterSwap.sub(prevmagicAmount));\n\n        uint256 curraxBNBAmount = axBNB.balanceOf(address(this));\n        axBNB.transfer(msg.sender,curraxBNBAmount.sub(prevaxBNBAmount));\n\n        // any residue sent back to buyer/seller\n        uint256 currmagicAmount = magic.balanceOf(address(this)); \n        if(currmagicAmount\u003eprevmagicAmount)\n            magic.transfer(msg.sender,currmagicAmount.sub(prevmagicAmount));\n    }\n\n\n    //  Wizard =\u003e BNB\n    function easySellToBNB(uint256 wizardAmt) external nonReentrant\n    {\n        uint256 prevmagicAmount = magic.balanceOf(address(this));\n        uint256 prevaxBNBAmount = axBNB.balanceOf(address(this));\n        \n        Wizard.transferFrom(msg.sender,address(this),wizardAmt);\n            \n        address[] memory path = new address[](2);\n        path[0] = address(Wizard);\n        path[1] = address(magic);\n        (uint256[] memory amountsMin) = UniswapV2Library.getAmountsOut(address(uniswapV2Factory), wizardAmt, path);\n        uint256 magicOutMin = amountsMin[1].mul(SafeMath.sub(100000,SLIPPAGE_Wizard)).div(100000); \n\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(wizardAmt, magicOutMin, path, address(this), block.timestamp);\n                                                                        \n        uint256 magicAmtSwapped = magic.balanceOf(address(this)).sub(prevmagicAmount);\n\n        uint256 axBNBAmt = axBNBDirect.easySellToAXBNB(magicAmtSwapped);\n\n        uint remAmount = axBNBAmt;\n        if(axBNB.isIgnored(msg.sender)==false){\n            uint feeAmount= axBNBAmt.mul(axBNB.FEE()).div(100000);\n            remAmount = axBNBAmt.sub(feeAmount);\n            axBNB.transfer(axBNB.FEE_ADDRESS(), feeAmount);\n        }\n\n        axBNB.withdraw(remAmount);\n\n        (bool success,) = msg.sender.call{ value: remAmount }(\"\");\n        require (success, \"Transfer failed\");\n        \n        // any residue sent back to buyer/seller\n        if(magic.balanceOf(address(this))\u003eprevmagicAmount)\n            magic.transfer(msg.sender,magic.balanceOf(address(this)).sub(prevmagicAmount));\n        \n        if(axBNB.balanceOf(address(this))\u003eprevaxBNBAmount)\n            axBNB.transfer(msg.sender,axBNB.balanceOf(address(this)).sub(prevaxBNBAmount));\n\n    }\n}\n\n"},"WizardEventGate.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\npragma solidity 0.7.4;\npragma experimental ABIEncoderV2;\n\nimport \"./IGatedERC20.sol\";\n\nimport \"./UniswapV2Library.sol\";\nimport \"./IUniswapV2Factory.sol\";\nimport \"./IUniswapV2Router02.sol\";\nimport \"./IERC31337.sol\";\nimport \"./IAxBNB.sol\";\n\nimport \"./OwnableUpgradeable.sol\";\nimport \"./SafeMathUpgradeable.sol\";\nimport \"./TokensRecoverableUpg.sol\";\n\n\ncontract WizardEventGate is Initializable, OwnableUpgradeable, TokensRecoverableUpg\n{\n    using SafeMathUpgradeable for uint256;\n\n    uint256 slippage; // 10%\n\n    address public wizardToken;\n    uint256 public MIN_WIZARD;\n\n    mapping(address=\u003euint256) public balanceLocked; // for each holder how much balance is locked\n    uint256 public totalLockedWizard; // total Wizard that is still unclaimed (of total Wizard contract once had and was swapped to Wizard) \n\n    bool public allowClaimByHolder;\n    bool public enabledGate;\n\n    mapping(uint256 =\u003e address) public holdersAddresses;    \n    mapping(address =\u003e bool) public isHolderAddress;    \n\n    uint256 public totalHolders;\n\n    struct ZapParameters{\n        uint256 startZapTime;\n        uint256 startingZapFeePercent;\n        uint256 totalEventGateTime;\n        uint256 reductionSector;\n        uint256 reductionRate;\n    }\n\n    ZapParameters public zapParams;\n\n    address[] public Admins;\n    mapping(address =\u003e bool) public AdminByAddress;\n    uint256 public FEE_PERCENT_LOCKED;// this fees is locked on contract and not claimaable =\u003e If fees_locked = 3000 (3%) =\u003e 97% of User\u0027s Wizard is claimable\n\n    event SetAdmins(address[] Admins);\n    event WizardLocked(address holder, uint256 WizardAmountIn, uint256 WizardAmountClaimable);\n    event Claimed(address holder, uint256 wizardReceived);\n    event FeesForLockSet(uint FEE_PERCENT_LOCKED);\n    event SlippageSet(uint slippage);\n    event TokenAddressSet(address wizardToken);\n    event ZapParamsSet( uint startZapTime, uint startingZapFeePercent, uint totalEventGateTime, uint reductionSector, uint reductionRate);\n\n    function initialize(address _wizardToken)  public initializer  {\n\n        __Ownable_init_unchained();\n        \n        AdminByAddress[msg.sender] = true; // owner is also admin by default\n\n        require(_wizardToken != address(0), \"WizardEventGate: _wizardToken cannot be zero address\");\n\n        wizardToken = _wizardToken;\n\n        zapParams.startZapTime = block.timestamp + 60; // time from which this will start\n        zapParams.startingZapFeePercent = 90000; // starting base, 90% fee from startTime =\u003e will reduce gradually every sector\n        zapParams.totalEventGateTime = 288000; // 80 hrs this reduction will happen, after that no zapping/adding liquidity mechanism\n        zapParams.reductionSector = 18000; // will change fee% every 5 hrs\n        zapParams.reductionRate = 5000; //will reduce fee% by 5% every sector on current fee\n        \n        slippage = 99000;\n        MIN_WIZARD = 1 ether; // 1 Wizard\n\n        totalLockedWizard = 0; // total Wizard that is still unclaimed\n\n        allowClaimByHolder = false; // only owner can claim\n        totalHolders = 0;\n        enabledGate = true;\n        FEE_PERCENT_LOCKED = 1500; //1.5%    \n    }\n\n    function setMinimumAmountToTransfer(uint256 min_wizard_amt) external onlyOwner{\n        MIN_WIZARD = min_wizard_amt;\n    }\n\n    // Wizard token address\n    function setTokenAddresses(address _wizardToken) external onlyOwner{\n        require(_wizardToken != address(0), \"WizardEventGate: _wizardToken cannot be zero address\");\n        wizardToken = _wizardToken;\n        emit TokenAddressSet(wizardToken);\n\n    }\n\n    function setFeesForLock(uint256 fee_percent_locked) external onlyOwner{\n        FEE_PERCENT_LOCKED = fee_percent_locked;\n        emit FeesForLockSet(FEE_PERCENT_LOCKED);\n    }\n\n    function setSlippage(uint256 _slippage) external onlyAdmin{\n        slippage = _slippage;\n        emit SlippageSet(slippage);\n    }\n\n    // _startZapTime = unix timestamp from when to start =\u003e 1221223\n    // _startingZapFeePercent = 90% =\u003e 90000\n    // _totalEventGateTime (x)= overall time for which this will apply in seconds, 12 hrs =\u003e 60*60*12 =\u003e owner responsible to set this correct!\n    // _reductionSector (y) = reduce x every y seconds, 15 minutes =\u003e 60*15\n    // _reductionRate = 15% =\u003e 15000\n    function setZapParams(uint256 _startZapTime, uint256 _startingZapFeePercent, uint256 _totalEventGateTime, uint256 _reductionSector, \n                            uint256 _reductionRate) external onlyOwner{\n\n        uint256 powerPercent = _totalEventGateTime.div(_reductionSector);\n        uint256 reductionFeeMultiplier = SafeMath.sub(100000, _reductionRate);\n\n        uint256 factor = reductionFeeMultiplier;\n        uint256 prevFactor = reductionFeeMultiplier;\n        for(uint256 i=1;i\u003c=powerPercent;i++){\n            factor = prevFactor.mul(reductionFeeMultiplier).div(100000);\n            prevFactor = factor;\n        }\n\n        uint256 totalZapFactor = _startingZapFeePercent.mul(factor).div(100000);\n        \n        require(totalZapFactor\u003e=0,\"Fees will go less than 0% in given _totalEventGateTime\");\n        \n        zapParams.startZapTime = _startZapTime;\n        zapParams.startingZapFeePercent = _startingZapFeePercent;\n        zapParams.totalEventGateTime = _totalEventGateTime;\n        zapParams.reductionSector = _reductionSector;\n        zapParams.reductionRate = _reductionRate;\n\n        emit ZapParamsSet( _startZapTime, _startingZapFeePercent, _totalEventGateTime, _reductionSector, _reductionRate);\n\n    }\n\n    function getCurrentFee() public view returns(uint256){\n        uint256 currTime = block.timestamp;\n        if (zapParams.startZapTime \u003c= currTime \u0026\u0026  zapParams.startZapTime + zapParams.totalEventGateTime \u003e currTime) {\n            // uint256 powerPercent = (currTime.sub(zapParams.startZapTime)).div(zapParams.reductionSector);\n            // uint256 reductionFeeMultiplier = 100000 - zapParams.reductionRate;\n            // uint256 totalZapFactor = zapParams.startingZapFeePercent.mul(((reductionFeeMultiplier.div(1000)) ** powerPercent).mul(100000).div(100 ** powerPercent)).div(100000);\n            // // uint256 totalZap = amount.mul(totalZapFactor).div(100000);\n\n            uint256 powerPercent = (currTime.sub(zapParams.startZapTime)).div(zapParams.reductionSector);\n            uint256 reductionFeeMultiplier = SafeMath.sub(100000, zapParams.reductionRate);\n\n            uint256 factor = reductionFeeMultiplier;\n            uint256 prevFactor = reductionFeeMultiplier;\n            for(uint256 i=1;i\u003c=powerPercent;i++){\n                factor = prevFactor.mul(reductionFeeMultiplier).div(100000);\n                prevFactor = factor;\n            }\n\n            uint256 totalZapFactor = zapParams.startingZapFeePercent.mul(factor).div(100000);\n\n\n\n            return totalZapFactor;\n        }\n        return 0;\n    }\n\n    function enableGate(bool allow) external onlyOwner {\n        enabledGate = allow;\n    }\n\n    function lockWizard(address sender, address recipient, uint256 amount) public returns(uint256)\n    {\n        require(msg.sender == wizardToken, \"Only Wizard token can call this while eventgate mechanisms are active\");\n        uint256 remAmount = amount;\n        if(enabledGate){\n            uint256 currTime = block.timestamp;\n            if (zapParams.startZapTime \u003c= currTime \u0026\u0026  zapParams.startZapTime + zapParams.totalEventGateTime \u003e currTime) {\n                require(amount \u003e= MIN_WIZARD,\"Wizard amount is less than MIN_Wizard amount to be bought\"); // so that no micro txns occur\n\n                uint256 totalZapFactor = getCurrentFee();\n                uint256 totalLockForZap = amount.mul(totalZapFactor).div(100000);\n                remAmount = amount.sub(totalLockForZap);\n\n                uint256 claimableWizardByUserAfterFeeFactor = SafeMath.sub(100000, FEE_PERCENT_LOCKED);\n                uint256 claimableWorthWizard = totalLockForZap.mul(claimableWizardByUserAfterFeeFactor).div(100000);\n\n                // adding totalLockForZap Wizard to this contract!\n                // but claimableWorthWizard is less\n                balanceLocked[recipient] = balanceLocked[recipient].add(claimableWorthWizard);\n                totalLockedWizard = totalLockedWizard.add(claimableWorthWizard);\n\n                \n                // so that holder is added to indexing only once\n                if(!isHolderAddress[recipient]){\n                    holdersAddresses[totalHolders] = recipient; // take note of address who should receive wizard later for Wizard locked   \n                    totalHolders+=1;\n                    isHolderAddress[recipient]=true;\n                }\n                emit WizardLocked(recipient,totalLockForZap,claimableWorthWizard);\n\n            }\n        }\n\n        IERC31337(wizardToken).transfer(recipient,remAmount);\n        return remAmount;\n    }\n\n\n    // holder can claim wizard tokens\n    function setAllowClaimableByHolder(bool allow) external onlyAdmin{\n        allowClaimByHolder = allow;\n    }\n\n \n    // balanceLocked[holder] -\u003e 5% of user\u0027s balance only claimed...\n    // only owner calls this function =\u003e claims Wizard for all holders\n    // 5%  = 5000, 90% = 90000\n    function claimWizardForAllHoldersByPercent(uint256 percent) external onlyAdmin{\n\n        for(uint i=0; i\u003ctotalHolders;i++){\n            if(balanceLocked[holdersAddresses[i]]\u003e0)\n                claimWizard(holdersAddresses[i],balanceLocked[holdersAddresses[i]].mul(percent).div(100000));\n        }\n    }\n\n\n    // only owner calls this function =\u003e claims all Wizard for all holders\n    function claimWizardForAllHolders() external onlyAdmin{\n\n        for(uint i=0; i\u003ctotalHolders;i++){\n            if(balanceLocked[holdersAddresses[i]]\u003e0)\n                claimWizard(holdersAddresses[i],balanceLocked[holdersAddresses[i]]);\n        }\n    }\n\n    // only owner calls this function =\u003e claims Wizard for x holders\n    // if maxHolders = 11, means for first 11 holders, wizard will be claimed \n    // next time =\u003e need to claim say maxHolders = 22, as first 11 holders should have zero claims\n    function claimWizardForHoldersByIndex(uint256 maxHolders) external onlyAdmin{\n        for(uint i=0; i\u003cmaxHolders;i++){\n            if(balanceLocked[holdersAddresses[i]]\u003e0)\n                claimWizard(holdersAddresses[i], balanceLocked[holdersAddresses[i]]);\n        }\n    }\n\n    // holder can claim if allowClaimByHolder = true \n    // else only owner can claim\n    function claimWizardForHolder(address holder) external returns(bool){\n\n        if(allowClaimByHolder) require(msg.sender == holder || msg.sender == owner(),\"Only holder/owner is allowed to claim\");\n        else require(AdminByAddress[msg.sender], \"Only owner is allowed to claim\");\n\n        require(balanceLocked[holder]\u003e0,\"Cannot claim from zero balance of holder\");\n\n        claimWizard(holder,balanceLocked[holder]);        \n        return true;\n    }\n\n\n    // internal function called by claimWizardForAllHolders() \u0026 claimWizardForHolder(address holder)\n    function claimWizard(address holder, uint256 amount) internal{\n        \n        uint256 WizardLockedOfHolder = balanceLocked[holder];\n        require(WizardLockedOfHolder\u003e=amount,\"Balance locked by user is lesser\");\n\n        IERC31337(wizardToken).transfer(holder, amount);\n        \n        totalLockedWizard = totalLockedWizard.sub(amount);\n        balanceLocked[holder] = balanceLocked[holder].sub(amount);\n\n        emit Claimed(holder,amount);\n    }\n\n\n    function availableWizardInContract() public view returns(uint256){\n        return IERC31337(wizardToken).balanceOf(address(this));\n    }\n\n    // owner calls to get extra Wizard out of the contract\n    function ejectAllWizardFee() external onlyOwner{\n        uint256 totalWizardInContract = availableWizardInContract();\n        IERC31337(wizardToken).transfer(owner(),totalWizardInContract.sub(totalLockedWizard));\n    }\n\n    // Multi Admins functionality\n\n\n    modifier onlyAdmin() {\n        require(AdminByAddress[msg.sender]);\n        _;\n    }\n\n  \n    /**\n     * @dev Function to set Admins addresses\n     */\n    function setAdmins(address[] memory _Admins) public onlyOwner {\n        _setAdmins(_Admins);\n\n    }\n\n    function _setAdmins(address[] memory _Admins) internal {\n        for(uint256 i = 0; i \u003c Admins.length; i++) {\n            AdminByAddress[Admins[i]] = false;\n        }\n\n\n        for(uint256 j = 0; j \u003c _Admins.length; j++) {\n            AdminByAddress[_Admins[j]] = true;\n        }\n        Admins = _Admins;\n        emit SetAdmins(_Admins);\n    }\n\n    function getAdmins() public  view returns (address[] memory) {\n        return Admins;\n    }\n\n\n\n}"},"WrappedERC20.sol":{"content":"// SPDX-License-Identifier: J-J-J-JENGA!!!\r\npragma solidity ^0.7.4;\r\n\r\n/* ROOTKIT:\r\nWraps any ERC20\r\nSimilar to WETH except for ERC20 tokens instead of ETH\r\ndepositTokens/withdrawTokens are like deposit/withdraw in WETH\r\nInheriters can hook into depositTokens and withdrawTokens\r\nby overriding _beforeDepositTokens and _beforeWithdrawTokens\r\n*/\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./ERC20.sol\";\r\nimport \"./IWrappedERC20.sol\";\r\nimport \"./TokensRecoverable.sol\";\r\nimport \"./SafeERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract WrappedERC20 is ERC20, IWrappedERC20, TokensRecoverable\r\n{\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public immutable override wrappedToken;\r\n\r\n    constructor (IERC20 _wrappedToken, string memory _name, string memory _symbol)\r\n        ERC20(_name, _symbol)\r\n    {        \r\n        if (_wrappedToken.decimals() != 18) {\r\n            _setupDecimals(_wrappedToken.decimals());\r\n        }\r\n        wrappedToken = _wrappedToken;\r\n    }\r\n\r\n    function depositTokens(uint256 _amount) public override\r\n    {\r\n        _beforeDepositTokens(_amount);\r\n        uint256 myBalance = wrappedToken.balanceOf(address(this));\r\n        wrappedToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n        uint256 received = wrappedToken.balanceOf(address(this)).sub(myBalance);\r\n        _mint(msg.sender, received);\r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n\r\n    function withdrawTokens(uint256 _amount) public override\r\n    {\r\n        _beforeWithdrawTokens(_amount);\r\n        _burn(msg.sender, _amount);\r\n        uint256 myBalance = wrappedToken.balanceOf(address(this));\r\n        wrappedToken.safeTransfer(msg.sender, _amount);\r\n        require (wrappedToken.balanceOf(address(this)) == myBalance.sub(_amount), \"Transfer not exact\");\r\n        emit Withdrawal(msg.sender, _amount);\r\n    }\r\n\r\n    function canRecoverTokens(IERC20 token) internal virtual override view returns (bool) \r\n    {\r\n        return token != this \u0026\u0026 token != wrappedToken;\r\n    }\r\n\r\n    function _beforeDepositTokens(uint256 _amount) internal virtual view { }\r\n    function _beforeWithdrawTokens(uint256 _amount) internal virtual view { }\r\n}"}}