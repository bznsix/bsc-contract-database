{"BEP20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\nimport \"./BEPContext.sol\";\nimport \"./IBEP20.sol\";\nimport \"./BEPOwnable.sol\";\nimport \"./SafeMath.sol\";\n\ncontract BEP20 is BEPContext, IBEP20, BEPOwnable {\n  using SafeMath for uint256;\n\n  mapping(address =\u003e uint256) private _balances;\n\n  mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n  uint256 private _totalSupply;\n\n  function totalSupply() public view override returns (uint256) {\n    return _totalSupply;\n  }\n\n  function balanceOf(address account) public view override returns (uint256) {\n    return _balances[account];\n  }\n\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n    _transfer(_msgSender(), recipient, amount);\n    return true;\n  }\n\n  function allowance(address owner, address spender) public view override returns (uint256) {\n    return _allowances[owner][spender];\n  }\n\n  function approve(address spender, uint256 amount) public override returns (bool) {\n    _approve(_msgSender(), spender, amount);\n    return true;\n  }\n\n  function transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    _transfer(sender, recipient, amount);\n    _approve(\n      sender,\n      _msgSender(),\n      _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\")\n    );\n    return true;\n  }\n\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n    return true;\n  }\n\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    _approve(\n      _msgSender(),\n      spender,\n      _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\")\n    );\n    return true;\n  }\n\n  function _transfer(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) internal virtual {\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\n    require(recipient != address(0), \"BEP20: transfer to the zero address\");\n\n    _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\n    _balances[recipient] = _balances[recipient].add(amount);\n    emit Transfer(sender, recipient, amount);\n  }\n\n\n  function _mint(address account, uint256 amount) internal {\n    require(account != address(0), \"BEP20: mint to the zero address\");\n\n    _totalSupply = _totalSupply.add(amount);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n\n  function _burn(address account, uint256 amount) internal {\n    require(account != address(0), \"BEP20: burn from the zero address\");\n\n    _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\n    _totalSupply = _totalSupply.sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n\n  function _approve(\n    address owner,\n    address spender,\n    uint256 amount\n  ) internal {\n    require(owner != address(0), \"BEP20: approve from the zero address\");\n    require(spender != address(0), \"BEP20: approve to the zero address\");\n\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n  }\n\n\n  function _burnFrom(address account, uint256 amount) internal {\n    _burn(account, amount);\n    _approve(\n      account,\n      _msgSender(),\n      _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\")\n    );\n  }\n}"},"BEP20Detailed.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nabstract contract BEP20Detailed {\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  constructor(\n    string memory name_,\n    string memory symbol_,\n    uint8 decimals_\n  ) {\n    _name = name_;\n    _symbol = symbol_;\n    _decimals = decimals_;\n  }\n\n  function name() public view returns (string memory) {\n    return _name;\n  }\n\n  function symbol() public view returns (string memory) {\n    return _symbol;\n  }\n\n  function decimals() public view returns (uint8) {\n    return _decimals;\n  }\n}"},"BEPContext.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nabstract contract BEPContext {\n\n  constructor() {}\n\n  function _msgSender() internal view returns (address payable) {\n    return payable(msg.sender);\n  }\n\n  function _msgData() internal view returns (bytes memory) {\n    this;\n    return msg.data;\n  }\n}"},"BEPOwnable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\nimport \"./BEPContext.sol\";\n\nabstract contract BEPOwnable is BEPContext {\n  address private _owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  \n  constructor() {\n    address msgSender = _msgSender();\n    _owner = msgSender;\n    emit OwnershipTransferred(address(0), msgSender);\n  }\n\n\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n \n  modifier onlyOwner() {\n    require(isOwner(), \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  \n  function isOwner() public view returns (bool) {\n    return _msgSender() == _owner;\n  }\n\n\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n \n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n \n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IBEP20 {\n \n  function totalSupply() external view returns (uint256);\n\n  \n  function balanceOf(address account) external view returns (uint256);\n\n\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  \n  function allowance(address owner, address spender) external view returns (uint256);\n\n  function approve(address spender, uint256 amount) external returns (bool);\n\n \n  function transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) external returns (bool);\n\n  \n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n \n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"nexusStars.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"./BEP20Detailed.sol\";\nimport \"./BEP20.sol\";\n\n\ncontract nexusStars is BEP20Detailed, BEP20 {\n  \n  mapping(address =\u003e bool) private isBlacklist;\n  mapping(address =\u003e bool) private liquidityPool;\n  mapping(address =\u003e bool) private whitelistTax;\n  mapping(address =\u003e uint256) private lastTrade;\n\n  uint8 private buyTax;\n  uint8 private sellTax;\n  uint8 private tradeCooldown;  \n  uint8 private transferTax;\n  uint256 private taxAmount;\n  \n  address private marketingPool;\n\n  event changeBlacklist(address _wallet, bool status);\n  event changeCooldown(uint8 tradeCooldown);\n  event changeTax(uint8 _sellTax, uint8 _buyTax, uint8 _transferTax);\n  event changeLiquidityPoolStatus(address lpAddress, bool status);\n  event changeMarketingPool(address marketingPool);\n  event changeWhitelistTax(address _address, bool status);   \n \n  constructor() BEP20Detailed(\"NexusStars\", \"NST\", 18) {\n    uint256 totalTokens = 1000000000 * 10**uint256(decimals());\n    _mint(msg.sender, totalTokens);\n    sellTax = 10;\n    buyTax = 10;\n    transferTax = 10;\n    tradeCooldown = 15;\n    marketingPool = 0xd514dDc93444A30C18B9AC1273b0847613980f45; \n  }\n\n   \n \n  function blackList(address _wallet, bool _status) external onlyOwner {\n    isBlacklist[_wallet]= _status;\n    emit changeBlacklist(_wallet, _status);\n  }  \n\n  function rewardTrade(uint8 _tradeCooldown) external onlyOwner {\n    tradeCooldown = _tradeCooldown;\n    emit changeCooldown(_tradeCooldown);\n  }\n\n  function liquidityAdd(address _lpAddress, bool _status) external onlyOwner {\n    liquidityPool[_lpAddress] = _status;\n    emit changeLiquidityPoolStatus(_lpAddress, _status);\n  }\n\n  function setMarketing(address _marketingPool) external onlyOwner {\n    marketingPool = _marketingPool;\n    emit changeMarketingPool(_marketingPool);\n  }  \n\n  function setTax(uint8 _sellTax, uint8 _buyTax, uint8 _transferTax) external onlyOwner {\n    require(_sellTax \u003c 90);\n    require(_buyTax \u003c 90);\n    require(_transferTax \u003c 90);\n    sellTax = _sellTax;\n    buyTax = _buyTax;\n    transferTax = _transferTax;\n    emit changeTax(_sellTax,_buyTax,_transferTax);\n  }\n\n  function getTaxes() external view returns (uint8 _sellTax, uint8 _buyTax, uint8 _transferTax) {\n    return (sellTax, buyTax, transferTax);\n  }  \n\n  function WhitelistTax(address _address, bool _status) external onlyOwner {\n    whitelistTax[_address] = _status;\n    emit changeWhitelistTax(_address, _status);\n  }\n\n  \n\n  function _transfer(address sender, address receiver, uint256 amount) internal virtual override {\n    require(receiver != address(this), string(\"No transfers to contract allowed.\"));\n    require(!isBlacklist[sender],\"User blacklisted\");\n    if(liquidityPool[sender] == true) {\n      \n      taxAmount = (amount * buyTax) / 100;\n    } else if(liquidityPool[receiver] == true) {      \n      \n      taxAmount = (amount * sellTax) / 100;\n\n      require(lastTrade[sender] \u003c (block.timestamp - tradeCooldown), string(\"No consecutive sells allowed. Please wait.\"));\n      lastTrade[sender] = block.timestamp;\n\n    } else if(whitelistTax[sender] || whitelistTax[receiver] || sender == marketingPool || receiver == marketingPool) {\n      taxAmount = 0;\n    } else {\n      taxAmount = (amount * transferTax) / 100;\n    }\n    \n    if(taxAmount \u003e 0) {\n      super._transfer(sender, marketingPool, taxAmount);\n    }    \n    super._transfer(sender, receiver, amount - taxAmount);\n  }\n\n  \n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\n\nlibrary SafeMath {\n \n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c \u003e= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    return sub(a, b, \"SafeMath: subtraction overflow\");\n  }\n\n\n  function sub(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    require(b \u003c= a, errorMessage);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n \n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return div(a, b, \"SafeMath: division by zero\");\n  }\n\n \n  function div(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    \n    require(b \u003e 0, errorMessage);\n    uint256 c = a / b;\n    \n\n    return c;\n  }\n}"}}