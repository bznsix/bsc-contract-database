{"AwooInu.sol":{"content":"/**   VV    :****FF**     :*V*:MV*MNMMFFFNMFFFMMMMNMMMMFFMMFFFFN*     :*****::*VV:    F:  \t\t \r\n     M:     :*VVV**VV*:     *FMF :FMMMNNNNMMMMMMFFFFFFFFFNMFFMM*         :*VFV:     *F    \t\t\r\n    *M     *FV:     :*V:      *M* VFFFFMNMFFFFFFFFFFFFFFFMNFMM:***:          :***: :F*    \t\t\r\n    VV     :**VF*      *:      *M**FFFFFNMFFFFFFFFFFFFFFFFNNV:   :**:           :*VF*     \t\t\r\n    F*      *V*:  :     :       :*VMMMFFMNFFFFFFFFFFFMMMMVV*        ::             :VV:   \t\t\r\n    F*    :VV**V*:                  :*VFMNMMFMMMMMFVV*::                             :*V* \t\t\r\n    F*    :  :*:                     :*: :******::                                     :*V\t\t\r\n    V*     :V*                        *F*:                     :         :               :\t\t\r\n    *V    *V:                   ::  *: *V**:      :            :*:       ::               \t\t\r\n    :M:  VV                     *   *M: V*:V*     :*:            *::      :* ::           \t\t\r\n     VV V*                      *   :FV *V::*V:    :*             V**      *FV:           \t\t\r\n     :MFV                      :*   :FF: M:::*F*    :*            :M**   :VV**            \t\t\r\n      *F                   :   V:   *FV: F*::::F*    V:           :M*V::VV: :N* ::        \t\t\r\n      F:                   :::*V    VVV* F*:::::F*   **           :FV*F*:   :MV: *:       \t\t ▄▄▄▄▄▄▄ ▄     ▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄ ▄▄    ▄ ▄▄   ▄▄ \r\n     *V                      :F***::M:V* M:::::::F*  *F:          :FFFM     *V*F **       \t\t█       █ █ ▄ █ █       █       █   █  █  █ █  █ █  █\r\n     F:            :         F:   :FF*F:*V::::::::F: *F*         :V**:M:   :F::V***       \t\t█   ▄   █ ██ ██ █   ▄   █   ▄   █   █   █▄█ █  █ █  █\r\n    :F             *        V*    *F:*M*F:::::::::*V V*F       ::*V::*MVV*VF*:::VV:       \t\t█  █▄█  █       █  █ █  █  █ █  █   █       █  █▄█  █\r\n    *V            **      :VV    *F::V*V*VV*:::::::M*V:V*:VVVVVFVV*FNFFVVFMNNF*:FV        \t\t█       █       █  █▄█  █  █▄█  █   █  ▄    █       █\r\n    V*           :F:     :F*   :VV:*VMFVV****::::::MV:::V*::::::*FF* :****::*VNMVF:       \t\t█   ▄   █   ▄   █       █       █   █ █ █   █       █\r\n    F:           V*     *F*  *VVVFNMFV*****V*:::::::::::::::::::*V :**VMMMMV: :VNN*       \t\t█▄▄█ █▄▄█▄▄█ █▄▄█▄▄▄▄▄▄▄█▄▄▄▄▄▄▄█▄▄▄█▄█  █▄▄█▄▄▄▄▄▄▄█\r\n    M:          *F    :*M**VV*VMNV* :*VVFFV*: ::::::::::::::::::: *V  VMMMMMM*  *MM       \t\t=====================================================\r\n   :M          *M:   *F*VF::*MNV: :**VMMMMMMMF*:::::::::::::::::: FMFFMMMMMMMM   :M*      \t\t\r\n   :F         *F: :*V*::F::*NM*  :V  VMMMMMMMMM*::::::::::::::::: FMMMMMMMMMMM*   *M      \t\t( 7% ) Total Fees:\r\n   :F        *F:*VV*   V*::NN*   VMVFMMMMMMMMMMF::::::::::::::::: VMMMMMMMMMMM*    F*     \t\t-------------------------\r\n   *V       VNFV*:    :M::V$V    VMMMMMMMMMMMMMM:::::::::::::::::::FMMMMMMMMMF    ::F:    \t\t |-\u003e 3% transaction tax that reflects to all holders\r\n   *V      :*:        :V*VMN*    *MMMMMMMMMMMMMM::::::::::::::::::::VMMMMMMMV:   ::::V*   \t\t |-\u003e 4% LP reflections added into liquidity and locked forever\r\n   V*                 *:  *M*     FMMMMMMMMMMMM*:::::::::::::::*::::::*VVV*:  ::::::::*V* \t\t |-\u003e Burn, Contract, Pair, and Owner addresses excluded from rewards\r\n   F*                 :    :V*     *FMMMMMMMMV*:::::::::::::::::::::::::::::::******:*::V*\t\t\t* This maximizes the amount of rewards actual holders receive\r\n   F                         F*      :*****:::::::::::::::::::::::::::::::**:**:***:**:::F\t\t\r\n  V*                         :M::**:*::*:*:::::::::::::::::::::::::::::*V*::**:*:*:**::::V\t\t( 60% ) Burnt at deploy:\r\n *V                           F*****:**:****:::**::::::**VVFFFFFVVVVVVVMFF:::::::::::::::F\t\t-------------------------\r\n*F:                           VV:**:**:*::::::*MFFVMFFVVVVVVVVVVVVVVVFFVFV::::::::::::::*V\t\t |-\u003e 60% sent to 0x000000000000000000000000000000000000dEaD\r\nF:                            VV:::**:::::::::FVVVVVVVVVVVVVVVVVVVVVVVVVM*:::::::::::::*F:\t\t |-\u003e 40% added into liquidity pool\r\n:                             VV::::::::::::::MVVVVVVVVVVVVVVVVVVVVVVVVVM:::::::::::::*V: \t\t\r\n                              F*::::::::::::::MVVVVVVVVVVVVVVVVVVVVVVVVM*::::::::::::VV:  \t\ttg: https://t.me/AwooInuChat\r\n                    :    ::   *F::::::::::::::VVVVVVVVVVVVVVVVVVVVVVVVM*:::::::::::VV:    \t\t\r\n                    *     **:  *V****V*::::::::MVVVVVVVVVVVVVVVVVVVVVF*:::::::::*VV:      \t\t\r\n                    *      :***:::**VV:::::::::*MVVVVVVVVVVVVVVVVVVFV:::::::*VVV*         \t\t\r\n                    **        :**VFM*::::::::::::VFVVVVVVVVVVVVFFV*:::::**VV*:         :*:\t\t\r\n                     *V:  :*VFVVVV**VF****:::::::::**VVVVVVVVV**:********:             *V*\t\t\r\n                      :VV*:  :::*****:  :*V*V*:::::::::::::*VVVVVVVV:                 :V: \t\t\r\n                        :******V*V*****F:   V:****::::**V:   *V*:**VMF*             :**   \t\t\r\n                             :*VV*:::::V*   **: ::*****:*:     *V::::VMV*       :*****/   \t\t\r\n// Contract: https://github.com/solidity-guru/safetoken\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n*\tIf you\u0027re looking for information on what the manager address does\r\n*\tsearch \"onlyManager\" and you will find the functions it can execute\r\n*\talong with detailed comments explaining their purpose.\r\n*/\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./Token-imports.sol\";\r\n\r\nabstract contract Tokenomics {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    string internal constant NAME = \"AwooInu\";\r\n    string internal constant SYMBOL = \"AWOO\";\r\n    \r\n    uint16 internal constant FEES_DIVISOR = 10**3;\r\n    uint8 internal constant DECIMALS = 9;\r\n    uint256 internal constant ZEROES = 10**DECIMALS;\r\n    \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 internal constant TOTAL_SUPPLY =  100000000000000000 * ZEROES;\r\n    uint256 internal _reflectedSupply = (MAX - (MAX % TOTAL_SUPPLY));\r\n\r\n    uint256 internal constant maxTransactionAmount = TOTAL_SUPPLY;\r\n    uint256 internal constant maxWalletBalance = TOTAL_SUPPLY;\r\n    \r\n    //reflect LP at 0.1% of the total supply\r\n    uint256 internal constant numberOfTokensToSwapToLiquidity = TOTAL_SUPPLY / 1000;\r\n\r\n    address internal burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    enum FeeType { Antiwhale, Burn, Liquidity, Rfi, External, ExternalToETH }\r\n    struct Fee {\r\n        FeeType name;\r\n        uint256 value;\r\n        address recipient;\r\n        uint256 total;\r\n    }\r\n\r\n    Fee[] internal fees;\r\n    uint256 internal sumOfFees;\r\n\r\n    constructor() {\r\n        _addFees();\r\n    }\r\n\r\n    function _addFee(FeeType name, uint256 value, address recipient) private {\r\n        fees.push( Fee(name, value, recipient, 0 ) );\r\n        sumOfFees += value;\r\n    }\r\n\r\n    function _addFees() private {\r\n\r\n        //  The value of fees is given in part per 1000 (based on the value of FEES_DIVISOR),\r\n        //  e.g. for 5% use 50, for 3.5% use 35, etc. \r\n        _addFee(FeeType.Rfi, 30, address(this) ); \r\n        _addFee(FeeType.Liquidity, 40, address(this) );\r\n    }\r\n\r\n    function _getFeesCount() internal view returns (uint256){ return fees.length; }\r\n\r\n    function _getFeeStruct(uint256 index) private view returns(Fee storage){\r\n        require( index \u003e= 0 \u0026\u0026 index \u003c fees.length, \"FeesSettings._getFeeStruct: Fee index out of bounds\");\r\n        return fees[index];\r\n    }\r\n    function _getFee(uint256 index) internal view returns (FeeType, uint256, address, uint256){\r\n        Fee memory fee = _getFeeStruct(index);\r\n        return ( fee.name, fee.value, fee.recipient, fee.total );\r\n    }\r\n    function _addFeeCollectedAmount(uint256 index, uint256 amount) internal {\r\n        Fee storage fee = _getFeeStruct(index);\r\n        fee.total = fee.total.add(amount);\r\n    }\r\n\r\n    // function getCollectedFeeTotal(uint256 index) external view returns (uint256){\r\n    function getCollectedFeeTotal(uint256 index) internal view returns (uint256){\r\n        Fee memory fee = _getFeeStruct(index);\r\n        return fee.total;\r\n    }\r\n}\r\n\r\n    /**\r\n    *   There was going to be a pre-sale but I decided I\u0027d rather fucking not so the value isInPresale \r\n    *   will just always be false. I would remove it but I\u0027m far too lazy and it doesn\u0027t really matter.\r\n    */\r\nabstract contract Presaleable is Manageable {\r\n    bool internal isInPresale;\r\n    function setPreseableEnabled(bool value) external onlyManager {\r\n        isInPresale = value;\r\n    }\r\n}\r\n\r\nabstract contract BaseRfiToken is IERC20, IERC20Metadata, Ownable, Presaleable, Tokenomics {\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address =\u003e uint256) internal _reflectedBalances;\r\n    mapping (address =\u003e uint256) internal _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) internal _allowances;\r\n    \r\n    mapping (address =\u003e bool) internal _isExcludedFromFee;\r\n    mapping (address =\u003e bool) internal _isExcludedFromRewards;\r\n    address[] private _excluded;\r\n    \r\n    constructor(){\r\n        \r\n        _reflectedBalances[owner()] = _reflectedSupply;\r\n        \r\n        // exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        \r\n        // exclude the owner and this contract from rewards\r\n        _exclude(owner());\r\n        _exclude(address(this));\r\n\r\n        emit Transfer(address(0), owner(), TOTAL_SUPPLY);\r\n        \r\n    }\r\n    \r\n        function name() external pure override returns (string memory) { return NAME; }\r\n        function symbol() external pure override returns (string memory) { return SYMBOL; }\r\n        function decimals() external pure override returns (uint8) { return DECIMALS; }\r\n        \r\n        function totalSupply() external pure override returns (uint256) {\r\n            return TOTAL_SUPPLY;\r\n        }\r\n        \r\n        function balanceOf(address account) public view override returns (uint256){\r\n            if (_isExcludedFromRewards[account]) return _balances[account];\r\n            return tokenFromReflection(_reflectedBalances[account]);\r\n        }\r\n        \r\n        function transfer(address recipient, uint256 amount) external override returns (bool){\r\n            _transfer(_msgSender(), recipient, amount);\r\n            return true;\r\n        }\r\n        \r\n        function allowance(address owner, address spender) external view override returns (uint256){\r\n            return _allowances[owner][spender];\r\n        }\r\n    \r\n        function approve(address spender, uint256 amount) external override returns (bool) {\r\n            _approve(_msgSender(), spender, amount);\r\n            return true;\r\n        }\r\n        \r\n        function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool){\r\n            _transfer(sender, recipient, amount);\r\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n            return true;\r\n        }\r\n\r\n    function burn(uint256 amount) external {\r\n\r\n        address sender = _msgSender();\r\n        require(sender != address(0), \"BaseRfiToken: burn from the zero address\");\r\n        require(sender != address(burnAddress), \"BaseRfiToken: burn from the burn address\");\r\n\r\n        uint256 balance = balanceOf(sender);\r\n        require(balance \u003e= amount, \"BaseRfiToken: burn amount exceeds balance\");\r\n\r\n        uint256 reflectedAmount = amount.mul(_getCurrentRate());\r\n\r\n        // remove the amount from the sender\u0027s balance first\r\n        _reflectedBalances[sender] = _reflectedBalances[sender].sub(reflectedAmount);\r\n        if (_isExcludedFromRewards[sender])\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n\r\n        _burnTokens( sender, amount, reflectedAmount );\r\n    }\r\n\r\n    function _burnTokens(address sender, uint256 tBurn, uint256 rBurn) internal {\r\n\r\n        _reflectedBalances[burnAddress] = _reflectedBalances[burnAddress].add(rBurn);\r\n        if (_isExcludedFromRewards[burnAddress])\r\n            _balances[burnAddress] = _balances[burnAddress].add(tBurn);\r\n\r\n        //Emit the event so that the burn address balance is updated (on bscscan)\r\n        emit Transfer(sender, burnAddress, tBurn);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    function isExcludedFromReward(address account) external view returns (bool) {\r\n        return _isExcludedFromRewards[account];\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns(uint256) {\r\n        require(tAmount \u003c= TOTAL_SUPPLY, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,) = _getValues(tAmount,0);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,) = _getValues(tAmount,_getSumOfFees(_msgSender(), tAmount));\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) internal view returns(uint256) {\r\n        require(rAmount \u003c= _reflectedSupply, \"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getCurrentRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n    \r\n    function excludeFromReward(address account) external onlyOwner() {\r\n        require(!_isExcludedFromRewards[account], \"Account is not included\");\r\n        _exclude(account);\r\n    }\r\n    \r\n    function _exclude(address account) internal {\r\n        if(_reflectedBalances[account] \u003e 0) {\r\n            _balances[account] = tokenFromReflection(_reflectedBalances[account]);\r\n        }\r\n        _isExcludedFromRewards[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcludedFromRewards[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _balances[account] = 0;\r\n                _isExcludedFromRewards[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function setExcludedFromFee(address account, bool value) external onlyOwner { _isExcludedFromFee[account] = value; }\r\n    function isExcludedFromFee(address account) public view returns(bool) { return _isExcludedFromFee[account]; }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"BaseRfiToken: approve from the zero address\");\r\n        require(spender != address(0), \"BaseRfiToken: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function _isUnlimitedSender(address account) internal view returns(bool){\r\n        // the owner should be the only whitelisted sender\r\n        return (account == owner());\r\n    }\r\n\r\n    function _isUnlimitedRecipient(address account) internal view returns(bool){\r\n        // the owner should be a white-listed recipient\r\n        // and anyone should be able to burn as many tokens as \r\n        // he/she wants\r\n        return (account == owner() || account == burnAddress);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"BaseRfiToken: transfer from the zero address\");\r\n        require(recipient != address(0), \"BaseRfiToken: transfer to the zero address\");\r\n        require(sender != address(burnAddress), \"BaseRfiToken: transfer from the burn address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        // indicates whether or not feee should be deducted from the transfer\r\n        bool takeFee = true;\r\n\r\n        if ( isInPresale ){ takeFee = false; }\r\n        else {\r\n            if ( amount \u003e maxTransactionAmount \u0026\u0026 !_isUnlimitedSender(sender) \u0026\u0026 !_isUnlimitedRecipient(recipient) ){\r\n                revert(\"Transfer amount exceeds the maxTxAmount.\");\r\n            }\r\n\r\n            if ( maxWalletBalance \u003e 0 \u0026\u0026 !_isUnlimitedSender(sender) \u0026\u0026 !_isUnlimitedRecipient(recipient) \u0026\u0026 !_isV2Pair(recipient) ){\r\n                uint256 recipientBalance = balanceOf(recipient);\r\n                require(recipientBalance + amount \u003c= maxWalletBalance, \"New balance would exceed the maxWalletBalance\");\r\n            }\r\n        }\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){ takeFee = false; }\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount, takeFee);\r\n        _transferTokens(sender, recipient, amount, takeFee);\r\n        \r\n    }\r\n\r\n    function _transferTokens(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n    \r\n        uint256 sumOfFees = _getSumOfFees(sender, amount);\r\n        if ( !takeFee ){ sumOfFees = 0; }\r\n        \r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tAmount, uint256 tTransferAmount, uint256 currentRate ) = _getValues(amount, sumOfFees);\r\n        \r\n        _reflectedBalances[sender] = _reflectedBalances[sender].sub(rAmount);\r\n        _reflectedBalances[recipient] = _reflectedBalances[recipient].add(rTransferAmount);\r\n\r\n        if (_isExcludedFromRewards[sender]){ _balances[sender] = _balances[sender].sub(tAmount); }\r\n        if (_isExcludedFromRewards[recipient] ){ _balances[recipient] = _balances[recipient].add(tTransferAmount); }\r\n        \r\n        _takeFees( amount, currentRate, sumOfFees );\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    function _takeFees(uint256 amount, uint256 currentRate, uint256 sumOfFees ) private {\r\n        if ( sumOfFees \u003e 0 \u0026\u0026 !isInPresale ){\r\n            _takeTransactionFees(amount, currentRate);\r\n        }\r\n    }\r\n    \r\n    function _getValues(uint256 tAmount, uint256 feesSum) internal view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        \r\n        uint256 tTotalFees = tAmount.mul(feesSum).div(FEES_DIVISOR);\r\n        uint256 tTransferAmount = tAmount.sub(tTotalFees);\r\n        uint256 currentRate = _getCurrentRate();\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTotalFees = tTotalFees.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rTotalFees);\r\n        \r\n        return (rAmount, rTransferAmount, tAmount, tTransferAmount, currentRate);\r\n    }\r\n    \r\n    function _getCurrentRate() internal view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n    \r\n    function _getCurrentSupply() internal view returns(uint256, uint256) {\r\n        uint256 rSupply = _reflectedSupply;\r\n        uint256 tSupply = TOTAL_SUPPLY;  \r\n\r\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n            if (_reflectedBalances[_excluded[i]] \u003e rSupply || _balances[_excluded[i]] \u003e tSupply) return (_reflectedSupply, TOTAL_SUPPLY);\r\n            rSupply = rSupply.sub(_reflectedBalances[_excluded[i]]);\r\n            tSupply = tSupply.sub(_balances[_excluded[i]]);\r\n        }\r\n        if (tSupply == 0 || rSupply \u003c _reflectedSupply.div(TOTAL_SUPPLY)) return (_reflectedSupply, TOTAL_SUPPLY);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function _beforeTokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) internal virtual;\r\n\r\n    function _getSumOfFees(address sender, uint256 amount) internal view virtual returns (uint256);\r\n\r\n    function _isV2Pair(address account) internal view virtual returns(bool);\r\n\r\n    function _redistribute(uint256 amount, uint256 currentRate, uint256 fee, uint256 index) internal {\r\n        uint256 tFee = amount.mul(fee).div(FEES_DIVISOR);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n\r\n        _reflectedSupply = _reflectedSupply.sub(rFee);\r\n        _addFeeCollectedAmount(index, tFee);\r\n    }\r\n\r\n    function _takeTransactionFees(uint256 amount, uint256 currentRate) internal virtual;\r\n}\r\n\r\nabstract contract Liquifier is Ownable, Manageable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private withdrawableBalance;\r\n\r\n    enum Env {Testnet, MainnetV1, MainnetV2}\r\n    Env private _env;\r\n\r\n    // PancakeSwap V1\r\n    address private _mainnetRouterV1Address = 0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F;\r\n    // PancakeSwap V2\r\n    address private _mainnetRouterV2Address = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    // Testnet\r\n    address private _testnetRouterAddress = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\r\n    // PancakeSwap Testnet = https://pancake.kiemtienonline360.com/\r\n\r\n    IPancakeV2Router internal _router;\r\n    address internal _pair;\r\n    \r\n    bool private inSwapAndLiquify;\r\n    bool private swapAndLiquifyEnabled = true;\r\n\r\n    uint256 private maxTransactionAmount;\r\n    uint256 private numberOfTokensToSwapToLiquidity;\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    event RouterSet(address indexed router);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event LiquidityAdded(uint256 tokenAmountSent, uint256 ethAmountSent, uint256 liquidity);\r\n\r\n    receive() external payable {}\r\n\r\n    function initializeLiquiditySwapper(Env env, uint256 maxTx, uint256 liquifyAmount) internal {\r\n        _env = env;\r\n        if (_env == Env.MainnetV1){ _setRouterAddress(_mainnetRouterV1Address); }\r\n        else if (_env == Env.MainnetV2){ _setRouterAddress(_mainnetRouterV2Address); }\r\n        else { _setRouterAddress(_testnetRouterAddress); }\r\n\r\n        maxTransactionAmount = maxTx;\r\n        numberOfTokensToSwapToLiquidity = liquifyAmount;\r\n\r\n    }\r\n\r\n    // NOTE: passing the `contractTokenBalance` here is preferred to creating `balanceOfDelegate`\r\n    function liquify(uint256 contractTokenBalance, address sender) internal {\r\n\r\n        if (contractTokenBalance \u003e= maxTransactionAmount) contractTokenBalance = maxTransactionAmount;\r\n        \r\n        bool isOverRequiredTokenBalance = ( contractTokenBalance \u003e= numberOfTokensToSwapToLiquidity );\r\n        \r\n        /**\r\n         * - first check if the contract has collected enough tokens to swap and liquify\r\n         * - then check swap and liquify is enabled\r\n         * - then make sure not to get caught in a circular liquidity event\r\n         * - finally, don\u0027t swap \u0026 liquify if the sender is the uniswap pair\r\n         */\r\n        if ( isOverRequiredTokenBalance \u0026\u0026 swapAndLiquifyEnabled \u0026\u0026 !inSwapAndLiquify \u0026\u0026 (sender != _pair) ){\r\n            // stops swap and liquify for all \"buy\" transactions\r\n            _swapAndLiquify(contractTokenBalance);            \r\n        }\r\n\r\n    }\r\n\r\n    function _setRouterAddress(address router) private {\r\n        IPancakeV2Router _newPancakeRouter = IPancakeV2Router(router);\r\n        _pair = IPancakeV2Factory(_newPancakeRouter.factory()).createPair(address(this), _newPancakeRouter.WETH());\r\n        _router = _newPancakeRouter;\r\n        emit RouterSet(router);\r\n    }\r\n    \r\n    function _swapAndLiquify(uint256 amount) private lockTheSwap {\r\n        \r\n        // split the contract balance into halves\r\n        uint256 half = amount.div(2);\r\n        uint256 otherHalf = amount.sub(half);\r\n        \r\n        // capture the contract\u0027s current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n        \r\n        // swap tokens for ETH\r\n        _swapTokensForEth(half); // \u003c- this breaks the ETH -\u003e HATE swap when swap+liquify is triggered\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        _addLiquidity(otherHalf, newBalance);\r\n        \r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n    \r\n    function _swapTokensForEth(uint256 tokenAmount) private {\r\n        \r\n        // generate the uniswap pair path of token -\u003e weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _router.WETH();\r\n\r\n        _approveDelegate(address(this), address(_router), tokenAmount);\r\n\r\n        // make the swap\r\n        _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            // The minimum amount of output tokens that must be received for the transaction not to revert.\r\n            // 0 = accept any amount (slippage is inevitable)\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approveDelegate(address(this), address(_router), tokenAmount);\r\n\r\n        // add tahe liquidity\r\n        (uint256 tokenAmountSent, uint256 ethAmountSent, uint256 liquidity) = _router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            // Bounds the extent to which the WETH/token price can go up before the transaction reverts. \r\n            // Must be \u003c= amountTokenDesired; 0 = accept any amount (slippage is inevitable)\r\n            0,\r\n            // Bounds the extent to which the token/WETH price can go up before the transaction reverts.\r\n            // 0 = accept any amount (slippage is inevitable)\r\n            0,\r\n            // this is a centralized risk if the owner\u0027s account is ever compromised (see Certik SSL-04)\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n        // fix the forever locked BNBs as per the certik\u0027s audit\r\n        withdrawableBalance = address(this).balance;\r\n        emit LiquidityAdded(tokenAmountSent, ethAmountSent, liquidity);\r\n    }\r\n    \r\n    /**\r\n    *    Explanation of setRouterAddress and setSwapAndLiquifyEnabled:\r\n    * \r\n    *    Sends the swap and liquify flag to the provided value. If set to `false` tokens collected in the contract \r\n    *    will NOT be converted into liquidity. This should never need to be called but it remains as a last resort\r\n    *    safety in the event uniswap v3 code breaks swaps in the same way v1 to v2 broke safemoon.\r\n    *    \r\n    *    See: https://forum.openzeppelin.com/t/psa-regarding-safemoon-forks-on-pancakeswap-transfers-not-working-read-this/7692\r\n    */\r\n    function setRouterAddress(address router) external onlyManager() {\r\n        _setRouterAddress(router);\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool enabled) external onlyManager {\r\n        swapAndLiquifyEnabled = enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(swapAndLiquifyEnabled);\r\n    }\r\n\r\n    /**\r\n    *   The owner can withdraw ETH(BNB) collected in the contract from `swapAndLiquify`\r\n    *   or if someone (accidentally) sends ETH/BNB directly to the contract.\r\n    *   \r\n    *   Note: This addresses the contract flaw pointed out in the Certik Audit of Safemoon (SSL-03):\r\n    *    \r\n    *   The swapAndLiquify function converts half of the contractTokenBalance SafeMoon tokens to BNB. \r\n    *   For every swapAndLiquify function call, a small amount of BNB remains in the contract. \r\n    *   This amount grows over time with the swapAndLiquify function being called \r\n    *   throughout the life of the contract. The Safemoon contract does not contain a method \r\n    *   to withdraw these funds, and the BNB will be locked in the Safemoon contract forever.\r\n    *   https://www.certik.org/projects/safemoon\r\n    */\r\n    function withdrawLockedEth(address payable recipient) external onlyManager(){\r\n        require(recipient != address(0), \"Cannot withdraw the ETH balance to the zero address\");\r\n        require(withdrawableBalance \u003e 0, \"The ETH balance must be greater than 0\");\r\n\r\n        // prevent re-entrancy attacks\r\n        uint256 amount = withdrawableBalance;\r\n        withdrawableBalance = 0;\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    function _approveDelegate(address owner, address spender, uint256 amount) internal virtual;\r\n\r\n}\r\n\r\nabstract contract Antiwhale is Tokenomics {\r\n\r\n    function _getAntiwhaleFees(uint256, uint256) internal view returns (uint256){\r\n        return sumOfFees;\r\n    }\r\n}\r\n\r\nabstract contract AwooInu is BaseRfiToken, Liquifier, Antiwhale {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    constructor(Env _env){\r\n\r\n        initializeLiquiditySwapper(_env, maxTransactionAmount, numberOfTokensToSwapToLiquidity);\r\n\r\n        // exclude the pair address from rewards - we don\u0027t want to redistribute\r\n        // tx fees to these two; redistribution is only for holders, dah!\r\n        _exclude(_pair);\r\n        _exclude(burnAddress);\r\n    }\r\n    \r\n    function _isV2Pair(address account) internal view override returns(bool){\r\n        return (account == _pair);\r\n    }\r\n\r\n    function _getSumOfFees(address sender, uint256 amount) internal view override returns (uint256){ \r\n        return _getAntiwhaleFees(balanceOf(sender), amount); \r\n    }\r\n    \r\n    // function _beforeTokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) internal override {\r\n    function _beforeTokenTransfer(address sender, address , uint256 , bool ) internal override {\r\n        if ( !isInPresale ){\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            liquify( contractTokenBalance, sender );\r\n        }\r\n    }\r\n\r\n    function _takeTransactionFees(uint256 amount, uint256 currentRate) internal override {\r\n        \r\n        if( isInPresale ){ return; }\r\n\r\n        uint256 feesCount = _getFeesCount();\r\n        for (uint256 index = 0; index \u003c feesCount; index++ ){\r\n            (FeeType name, uint256 value, address recipient,) = _getFee(index);\r\n            // no need to check value \u003c 0 as the value is uint (i.e. from 0 to 2^256-1)\r\n            if ( value == 0 ) continue;\r\n\r\n            if ( name == FeeType.Rfi ){\r\n                _redistribute( amount, currentRate, value, index );\r\n            }\r\n            else if ( name == FeeType.Burn ){\r\n                _burn( amount, currentRate, value, index );\r\n            }\r\n            else if ( name == FeeType.Antiwhale){\r\n                // TODO\r\n            }\r\n            else if ( name == FeeType.ExternalToETH){\r\n                _takeFeeToETH( amount, currentRate, value, recipient, index );\r\n            }\r\n            else {\r\n                _takeFee( amount, currentRate, value, recipient, index );\r\n            }\r\n        }\r\n    }\r\n\r\n    function _burn(uint256 amount, uint256 currentRate, uint256 fee, uint256 index) private {\r\n        uint256 tBurn = amount.mul(fee).div(FEES_DIVISOR);\r\n        uint256 rBurn = tBurn.mul(currentRate);\r\n\r\n        _burnTokens(address(this), tBurn, rBurn);\r\n        _addFeeCollectedAmount(index, tBurn);\r\n    }\r\n\r\n    function _takeFee(uint256 amount, uint256 currentRate, uint256 fee, address recipient, uint256 index) private {\r\n\r\n        uint256 tAmount = amount.mul(fee).div(FEES_DIVISOR);\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n\r\n        _reflectedBalances[recipient] = _reflectedBalances[recipient].add(rAmount);\r\n        if(_isExcludedFromRewards[recipient])\r\n            _balances[recipient] = _balances[recipient].add(tAmount);\r\n\r\n        _addFeeCollectedAmount(index, tAmount);\r\n    }\r\n\r\n    function _takeFeeToETH(uint256 amount, uint256 currentRate, uint256 fee, address recipient, uint256 index) private {\r\n        _takeFee(amount, currentRate, fee, recipient, index);        \r\n    }\r\n\r\n    function _approveDelegate(address owner, address spender, uint256 amount) internal override {\r\n        _approve(owner, spender, amount);\r\n    }\r\n}\r\n\r\ncontract AwooInuBuild is AwooInu{\r\n\r\n    constructor() AwooInu(Env.MainnetV2){\r\n        // pre-approve the initial liquidity supply (to safe a bit of time)\r\n        _approve(owner(),address(_router), ~uint256(0));\r\n    }\r\n}"},"Token-imports.sol":{"content":"/**\n * SPDX-License-Identifier: MIT\n */ \npragma solidity ^0.8.4;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {return msg.sender;}\n    function _msgData() internal view virtual returns (bytes calldata) {this; return msg.data;}\n}\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {return a + b;}\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {return a - b;}\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {return a * b;}\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {return a % b;}\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked { require(b \u003c= a, errorMessage); return a - b; }\n    }\n}\nlibrary Address {\n    function isContract(address account) internal view returns (bool) { uint256 size; assembly { size := extcodesize(account) } return size \u003e 0;}\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");(bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {return functionCall(target, data, \"Address: low-level call failed\");}\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {return functionCallWithValue(target, data, 0, errorMessage);}\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) { return returndata; } else {\n            if (returndata.length \u003e 0) {\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {revert(errorMessage);}\n        }\n    }\n}\nabstract contract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    uint256 private _lockTime;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n    function owner() public view returns (address) {\n        return _owner;\n    }\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    function getUnlockTime() public view returns (uint256) {\n        return _lockTime;\n    }\n    function lock(uint256 time) public virtual onlyOwner {\n        _previousOwner = _owner;\n        _owner = address(0);\n        _lockTime = block.timestamp + time;\n        emit OwnershipTransferred(_owner, address(0));\n    }\n    function unlock() public virtual {\n        require(_previousOwner == msg.sender, \"Only the previous owner can unlock onwership\");\n        require(block.timestamp \u003e _lockTime , \"The contract is still locked\");\n        emit OwnershipTransferred(_owner, _previousOwner);\n        _owner = _previousOwner;\n    }\n}\nabstract contract Manageable is Context {\n    address private _manager;\n    event ManagementTransferred(address indexed previousManager, address indexed newManager);\n    constructor(){\n        address msgSender = _msgSender();\n        _manager = msgSender;\n        emit ManagementTransferred(address(0), msgSender);\n    }\n    function manager() public view returns(address){ return _manager; }\n    modifier onlyManager(){\n        require(_manager == _msgSender(), \"Manageable: caller is not the manager\");\n        _;\n    }\n    function transferManagement(address newManager) external virtual onlyManager {\n        emit ManagementTransferred(_manager, newManager);\n        _manager = newManager;\n    }\n}\ninterface IPancakeV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\ninterface IPancakeV2Router {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"}}