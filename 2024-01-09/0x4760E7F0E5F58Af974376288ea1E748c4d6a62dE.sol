{"lib.sol":{"content":"// File: contracts\\@openzeppelin\\GSN\\Context.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: contracts\\@openzeppelin\\introspection\\IERC165.sol\n\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: contracts\\@openzeppelin\\token\\ERC721\\IERC721.sol\n\n\n\npragma solidity ^0.6.2;\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transfered from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``\u0027s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n\n// File: contracts\\@openzeppelin\\token\\ERC721\\IERC721Metadata.sol\n\n\n\npragma solidity ^0.6.2;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n// File: contracts\\@openzeppelin\\token\\ERC721\\IERC721Enumerable.sol\n\n\n\npragma solidity ^0.6.2;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``\u0027s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\n// File: contracts\\@openzeppelin\\token\\ERC721\\IERC721Receiver.sol\n\n\n\npragma solidity ^0.6.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\n    external returns (bytes4);\n}\n\n// File: contracts\\@openzeppelin\\introspection\\ERC165.sol\n\n\n\npragma solidity ^0.6.0;\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\ncontract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256(\u0027supportsInterface(bytes4)\u0027)) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it\u0027s supported.\n     */\n    mapping(bytes4 =\u003e bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n// File: contracts\\@openzeppelin\\math\\SafeMath.sol\n\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: contracts\\@openzeppelin\\utils\\Address.sol\n\n\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: contracts\\@openzeppelin\\utils\\EnumerableSet.sol\n\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n * (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value\u0027s index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as \u0027swap and pop\u0027).\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \u0027if\u0027 statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length \u003e index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n\n// File: contracts\\@openzeppelin\\utils\\EnumerableMap.sol\n\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing an enumerable variant of Solidity\u0027s\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -\u003e address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMap {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct MapEntry {\n        bytes32 _key;\n        bytes32 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping (bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n        // We read and store the key\u0027s index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({ _key: key, _value: value }));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        // We read and store the key\u0027s index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as \u0027swap and pop\u0027).\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \u0027if\u0027 statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n   /**\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n    *\n    * Note that there are no guarantees on the ordering of entries inside the\n    * array, and it may change when more entries are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        require(map._entries.length \u003e index, \"EnumerableMap: index out of bounds\");\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        return _get(map, key, \"EnumerableMap: nonexistent key\");\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     */\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint256(_get(map._inner, bytes32(key))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\n    }\n\n\n    // AddressToUintMap   - added on 20200830\n    struct AddressToUintMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\n        return _set(map._inner, bytes32(uint256(key)), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\n        return _remove(map._inner, bytes32(uint256(key)));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(uint256(key)));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (address(uint256(key)), uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\n        return uint256(_get(map._inner, bytes32(uint256(key))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     */\n    function get(AddressToUintMap storage map, address key, string memory errorMessage) internal view returns (uint256) {\n        return uint256(_get(map._inner, bytes32(uint256(key)), errorMessage));\n    }    \n\n\n\n    // UintToUintMap   - added  20200919\n    struct UintToUintMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToUintMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\n        return uint256(_get(map._inner, bytes32(key)));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     */\n    function get(UintToUintMap storage map, uint256 key, string memory errorMessage) internal view returns (uint256) {\n        return uint256(_get(map._inner, bytes32(key), errorMessage));\n    }        \n\n\n\n    // AddressToBytes8Map   - added  202010/26\n    struct AddressToBytes8Map {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(AddressToBytes8Map storage map, address key, bytes8 value) internal returns (bool) {\n        return _set(map._inner, bytes32(uint256(key)), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToBytes8Map storage map, address key) internal returns (bool) {\n        return _remove(map._inner, bytes32(uint256(key)));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToBytes8Map storage map, address key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(uint256(key)));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToBytes8Map storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressToBytes8Map storage map, uint256 index) internal view returns (address, bytes8) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (address(uint256(key)), bytes8(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToBytes8Map storage map, address key) internal view returns (bytes8) {\n        return bytes8(_get(map._inner, bytes32(uint256(key))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     */\n    function get(AddressToBytes8Map storage map, address key, string memory errorMessage) internal view returns (bytes8) {\n        return bytes8(_get(map._inner, bytes32(uint256(key)), errorMessage));\n    }       \n}\n\n// File: contracts\\@openzeppelin\\utils\\Strings.sol\n\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) pure internal returns (string memory) {\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = byte(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n\n    //concat string - added  20200830\n    function concat(string memory _a, string memory _b) pure internal returns (string memory){\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        string memory ret = new string(_ba.length + _bb.length );\n        bytes memory bret = bytes(ret);\n        uint k = 0;\n        for (uint i = 0; i \u003c _ba.length; i++) bret[k++] = _ba[i];\n        for (uint i = 0; i \u003c _bb.length; i++) bret[k++] = _bb[i];\n        return string(ret);\n    }  \n\n    //compare string - added  20200911\n    \n\n}\n\n// File: contracts\\@openzeppelin\\token\\ERC721\\ERC721.sol\n\n\n\npragma solidity ^0.6.0;\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\n    using SafeMath for uint256;\n    using Address for address;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\n    using Strings for uint256;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from holder address to their (enumerable) set of owned tokens\n    mapping (address =\u003e EnumerableSet.UintSet) private _holderTokens;\n\n    // Enumerable mapping from token ids to their owners\n    EnumerableMap.UintToAddressMap private _tokenOwners;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 =\u003e address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address =\u003e mapping (address =\u003e bool)) private _operatorApprovals;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping(uint256 =\u003e string) private _tokenURIs;\n\n    // Base URI\n    string private _baseURI;\n\n    /*\n     *     bytes4(keccak256(\u0027balanceOf(address)\u0027)) == 0x70a08231\n     *     bytes4(keccak256(\u0027ownerOf(uint256)\u0027)) == 0x6352211e\n     *     bytes4(keccak256(\u0027approve(address,uint256)\u0027)) == 0x095ea7b3\n     *     bytes4(keccak256(\u0027getApproved(uint256)\u0027)) == 0x081812fc\n     *     bytes4(keccak256(\u0027setApprovalForAll(address,bool)\u0027)) == 0xa22cb465\n     *     bytes4(keccak256(\u0027isApprovedForAll(address,address)\u0027)) == 0xe985e9c5\n     *     bytes4(keccak256(\u0027transferFrom(address,address,uint256)\u0027)) == 0x23b872dd\n     *     bytes4(keccak256(\u0027safeTransferFrom(address,address,uint256)\u0027)) == 0x42842e0e\n     *     bytes4(keccak256(\u0027safeTransferFrom(address,address,uint256,bytes)\u0027)) == 0xb88d4fde\n     *\n     *     =\u003e 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    /*\n     *     bytes4(keccak256(\u0027name()\u0027)) == 0x06fdde03\n     *     bytes4(keccak256(\u0027symbol()\u0027)) == 0x95d89b41\n     *     bytes4(keccak256(\u0027tokenURI(uint256)\u0027)) == 0xc87b56dd\n     *\n     *     =\u003e 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /*\n     *     bytes4(keccak256(\u0027totalSupply()\u0027)) == 0x18160ddd\n     *     bytes4(keccak256(\u0027tokenOfOwnerByIndex(address,uint256)\u0027)) == 0x2f745c59\n     *     bytes4(keccak256(\u0027tokenByIndex(uint256)\u0027)) == 0x4f6ccce7\n     *\n     *     =\u003e 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n\n        return _holderTokens[owner].length();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n\n        // If there is no base URI, return the token URI.\n        if (bytes(_baseURI).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length \u003e 0) {\n            return string(abi.encodePacked(_baseURI, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(_baseURI, tokenId.toString()));\n    }\n\n    /**\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\n    * automatically added as a prefix in {tokenURI} to each token\u0027s URI, or\n    * to the token ID if no specific URI is set for that token ID.\n    */\n    function baseURI() public view returns (string memory) {\n        return _baseURI;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\n        return _holderTokens[owner].at(index);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n        return _tokenOwners.length();\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\n        (uint256 tokenId, ) = _tokenOwners.at(index);\n        return tokenId;\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mecanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return _tokenOwners.contains(tokenId);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     d*\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n\n        _holderTokens[owner].remove(tokenId);\n\n        _tokenOwners.remove(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _holderTokens[from].remove(tokenId);\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _baseURI = baseURI_;\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\n            IERC721Receiver(to).onERC721Received.selector,\n            _msgSender(),\n            from,\n            tokenId,\n            _data\n        ), \"ERC721: transfer to non ERC721Receiver implementer\");\n        bytes4 retval = abi.decode(returndata, (bytes4));\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    function _approve(address to, uint256 tokenId) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``\u0027s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``\u0027s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n}\n\n// File: contracts\\@openzeppelin\\access\\Ownable.sol\n\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function isOwner(address addr) public view returns(bool){\n        return _owner == addr;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts\\@openzeppelin\\math\\Math.sol\n\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003e= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003c b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n\n    //rand() - added on 2020/09/07\n    function rand(uint256 number) public view returns(uint256) {\n        uint256 random = uint256(keccak256(abi.encodePacked(block.difficulty, now)));\n        return random%number;\n    }\n}\n\n// File: contracts\\@openzeppelin\\token\\ERC20\\IERC20.sol\n\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts\\@openzeppelin\\token\\ERC20\\SafeERC20.sol\n\n\n\npragma solidity ^0.6.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: contracts\\@openzeppelin\\token\\ERC20\\ERC20.sol\n\n\n\npragma solidity ^0.6.0;\n\n\n\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address =\u003e uint256) private _balances;\n\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n// File: contracts\\@openzeppelin\\utils\\ReentrancyGuard.sol\n\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// File: contracts\\ProxyOwnable.sol\n\n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//                   Version 2, December 2004\n// \n//Copyright (C) 2021 ins3project \u003cins3project@yahoo.com\u003e\n//\n//Everyone is permitted to copy and distribute verbatim or modified\n//copies of this license document, and changing it is allowed as long\n//as the name is changed.\n// \n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n//\n// You just DO WHAT THE FUCK YOU WANT TO.\npragma solidity \u003e=0.6.0 \u003c0.7.0;\n\n\n\n\nabstract contract ProxyOwnable is Context{\n    using Address for address;\n\n    Ownable _ownable;\n    Ownable _adminable;\n\n    constructor() public{\n        \n    }\n\n    function setOwnable(address ownable) internal{ \n        require(ownable!=address(0),\"setOwnable should not be 0\");\n        _ownable=Ownable(ownable);\n        if (address(_adminable)==address(0)){\n            require(!address(_adminable).isContract(),\"admin should not be contract\");\n            _adminable=Ownable(ownable);\n        }\n    }\n\n    function setAdminable(address adminable) internal{\n        require(adminable!=address(0),\"setOwnable should not be 0\");\n        _adminable=Ownable(adminable);\n    }\n    modifier onlyOwner {\n        require(address(_ownable)!=address(0),\"proxy ownable should not be 0\");\n        require(_ownable.isOwner(_msgSender()),\"Not owner\");\n        _;\n    }\n\n    modifier onlyAdmin {\n        require(address(_adminable)!=address(0),\"proxy adminable should not be 0\");\n        require(_adminable.isOwner(_msgSender()),\"Not admin\");\n        _;\n    }\n\n    function admin() view public returns(address){\n        require(address(_adminable)!=address(0),\"proxy admin should not be 0\");\n        return _adminable.owner();\n    }\n\n    function owner() view external returns(address){\n        require(address(_ownable)!=address(0),\"proxy ownable should not be 0\");\n        return _ownable.owner();\n    }\n\n    function getOwner() view external returns(address){\n        require(address(_ownable)!=address(0),\"proxy ownable should not be 0\");\n        return _ownable.owner();\n    }\n\n    function isOwner(address addr) public view returns(bool){\n        require(address(_ownable)!=address(0),\"proxy ownable should not be 0\");\n        return _ownable.isOwner(addr);\n    }\n\n}\n\n// File: contracts\\ISponsorWhiteListControl.sol\n\n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//                   Version 2, December 2004\n// \n//Copyright (C) 2021 ins3project \u003cins3project@yahoo.com\u003e\n//\n//Everyone is permitted to copy and distribute verbatim or modified\n//copies of this license document, and changing it is allowed as long\n//as the name is changed.\n// \n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n//\n// You just DO WHAT THE FUCK YOU WANT TO.\npragma solidity ^0.6.0;\n\ninterface ISponsorWhiteListControl {\n    function getSponsorForGas(address contractAddr) external view returns (address);\n    function getSponsoredBalanceForGas(address contractAddr) external view returns (uint) ;\n    function getSponsoredGasFeeUpperBound(address contractAddr) external view returns (uint) ;\n    function getSponsorForCollateral(address contractAddr) external view returns (address) ;\n    function getSponsoredBalanceForCollateral(address contractAddr) external view returns (uint) ;\n    function isWhitelisted(address contractAddr, address user) external view returns (bool) ;\n    function isAllWhitelisted(address contractAddr) external view returns (bool) ;\n    function addPrivilegeByAdmin(address contractAddr, address[] memory addresses) external ;\n    function removePrivilegeByAdmin(address contractAddr, address[] memory addresses) external ;\n    function setSponsorForGas(address contractAddr, uint upperBound) external payable ;\n    function setSponsorForCollateral(address contractAddr) external payable ;\n    function addPrivilege(address[] memory) external ;\n    function removePrivilege(address[] memory) external ;\n}\n\n// File: contracts\\Ins3Pausable.sol\n\n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//                   Version 2, December 2004\n// \n//Copyright (C) 2021 ins3project \u003cins3project@yahoo.com\u003e\n//\n//Everyone is permitted to copy and distribute verbatim or modified\n//copies of this license document, and changing it is allowed as long\n//as the name is changed.\n// \n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n//\n// You just DO WHAT THE FUCK YOU WANT TO.\npragma solidity ^0.6.0;\n\n\n\ncontract Ins3Pausable is  ProxyOwnable{\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    function pause() public onlyAdmin whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    function unpause() public onlyAdmin whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    function initSponsor() public{ \n        ISponsorWhiteListControl SPONSOR = ISponsorWhiteListControl(address(0x0888000000000000000000000000000000000001));\n        address[] memory users = new address[](1);\n        users[0] = address(0);\n        SPONSOR.addPrivilege(users);\n    }\n}\n\n// File: contracts\\Ins3Register.sol\n\n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//                   Version 2, December 2004\n// \n//Copyright (C) 2021 ins3project \u003cins3project@yahoo.com\u003e\n//\n//Everyone is permitted to copy and distribute verbatim or modified\n//copies of this license document, and changing it is allowed as long\n//as the name is changed.\n// \n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n//\n// You just DO WHAT THE FUCK YOU WANT TO.\npragma solidity \u003e=0.6.0 \u003c0.7.0;\n\n\ncontract Ins3Register is Ins3Pausable \n{\n    mapping(bytes8=\u003eaddress) _contracts;\n\n    bytes8 [] _allContractNames;\n    uint256 public count;\n    constructor(address ownable) Ins3Pausable() public{\n        setOwnable(ownable);\n    }\n\n    function contractNames() view public returns( bytes8[] memory){\n        bytes8 [] memory names=new bytes8[](count);\n        uint256 j=0;\n        for (uint256 i=0;i\u003c_allContractNames.length;++i){\n            bytes8 name=_allContractNames[i];\n            if (_contracts[name]!=address(0)){\n                names[j]=name;\n                j+=1;  \n            }\n        }\n        return names;\n    }\n\n    function registerContract(bytes8 name, address contractAddr) onlyOwner public{\n        require(_contracts[name]==address(0),\"This name contract already exists\"); \n        _contracts[name]=contractAddr;\n        _allContractNames.push(name);\n        count +=1;\n    }\n\n    function unregisterContract(bytes8 name) onlyOwner public {\n        require(_contracts[name]!=address(0),\"This name contract not exists\"); \n        delete _contracts[name];\n        count -=1;\n    }\n\n    function hasContract(bytes8 name) view public returns(bool){\n        return _contracts[name]!=address(0);\n    }\n\n    function getContract(bytes8 name) view public returns(address){\n        return _contracts[name];\n    }\n\n\n}\n\n// File: contracts\\IUpgradable.sol\n\n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//                   Version 2, December 2004\n// \n//Copyright (C) 2021 ins3project \u003cins3project@yahoo.com\u003e\n//\n//Everyone is permitted to copy and distribute verbatim or modified\n//copies of this license document, and changing it is allowed as long\n//as the name is changed.\n// \n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n//\n// You just DO WHAT THE FUCK YOU WANT TO.\npragma solidity \u003e=0.6.0 \u003c0.7.0;\n\n\n\nabstract contract IUpgradable is Ins3Pausable{\n\n    Ins3Register public register;\n    address public registerAddress;\n\n\n    function  updateDependentContractAddress() public virtual;  \n\n    function updateRegisterAddress(address registerAddr) external {\n        if (address(register) != address(0)) {\n            require(register.isOwner(_msgSender()), \"Just the register\u0027s owner can call the updateRegisterAddress()\"); \n        }\n        register = Ins3Register(registerAddr);\n        setOwnable(registerAddr);\n        registerAddress=registerAddr;\n        updateDependentContractAddress();\n    }\n\n}\n\n// File: contracts\\IStakingPool.sol\n\n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//                   Version 2, December 2004\n// \n//Copyright (C) 2021 ins3project \u003cins3project@yahoo.com\u003e\n//\n//Everyone is permitted to copy and distribute verbatim or modified\n//copies of this license document, and changing it is allowed as long\n//as the name is changed.\n// \n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n//\n// You just DO WHAT THE FUCK YOU WANT TO.\npragma solidity \u003e=0.6.0 \u003c0.7.0;\n\n\ninterface IIns3ProductToken{\n    function totalSellQuantity() external view returns(uint256);\n    function paid() external view returns(uint256);\n    function expireTimestamp() external view returns(uint256);\n    function closureTimestamp() external view returns(uint256);\n    function totalPremiums() external view returns(uint256);\n    function needPay() external view returns(bool);\n    function isValid() external view returns(bool);\n    function balanceOf(address account) external view returns (uint256);\n    function burn(address account, uint256 amount) external;\n    function calcDistributePremiums() external view returns(uint256,uint256);\n    function approvePaid() external;\n    function rejectPaid() external;\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n}\n\n\ninterface IStakingPool \n{\n    function putTokenHolder(uint256 tokenId,uint256 amount,uint256 timestamp) external;\n    function calcPremiumsRewards(uint256 stakingAmount, uint256 timestamp) external view returns(uint256);\n    function isClosed() external view returns(bool);\n    function isNormalClosed() external view returns(bool);\n\n    function totalStakingAmount() external view returns(uint256); \n\n    function totalNeedPayFromStaking() external view returns(uint256); \n\n    function totalRealPayFromStaking() external view returns(uint256) ; \n\n    function payAmount() external view returns(uint256); \n\n    function productTokenRemainingAmount() external view returns(uint256);\n    function productTokenExpireTimestamp() external view returns(uint256);\n    function calculateCapacity() external view returns(uint256);\n    function takeTokenHolder(uint256 tokenId) external;\n    function productToken() external view returns(IIns3ProductToken);\n    function queryAndCheckClaimAmount(address userAccount) view external returns(uint256,uint256/*token balance*/);\n}\n\ninterface IClaimPool is IStakingPool\n{\n    function tokenAddress() external view returns(address);\n    function aTokenAddress() external view returns(address);\n    function returnRemainingAToken(address account) external;\n    function getAToken(uint256 userPayAmount, address account) external;\n    function needPayFlag() external view returns(bool); \n    function totalClaimProductQuantity() external view returns(uint256);\n\n    function stakingWeight() external view returns(uint256);\n    function stakingLeverageWeight() external view returns(uint256);\n}\n\ninterface IStakingPoolToken{\n    function putTokenHolderInPool(uint256 tokenId,uint256 amount) external;\n    function getTokenHolderAmount(uint256 tokenId,address poolAddr) view external returns(uint256);\n    function getTokenHolder(uint256 tokenId) view external returns(uint256,uint256,uint256,uint256,address [] memory);\n    function coinHolderRemainingPrincipal(uint256 tokenId) view external returns(uint256);\n    function bookkeepingFromPool(uint256 amount) external;\n    function isTokenExist(uint256 tokenId) view external returns(bool);\n}\n\n// File: contracts\\PriceMetaInfoDB.sol\n\n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//                   Version 2, December 2004\n// \n//Copyright (C) 2021 ins3project \u003cins3project@yahoo.com\u003e\n//\n//Everyone is permitted to copy and distribute verbatim or modified\n//copies of this license document, and changing it is allowed as long\n//as the name is changed.\n// \n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n//\n// You just DO WHAT THE FUCK YOU WANT TO.\npragma solidity \u003e=0.6.0 \u003c0.7.0;\n\n\n\n\n\ncontract PriceMetaInfoDB is Ownable \n{\n    using SafeMath for uint256;    \n    mapping(uint256=\u003eaddress) _channels;\n    \n    uint256 public CHANNEL_PREMIUMS_PERCENT; \n\n    uint256 public FLASHLOAN_PREMIUMS_PERCENT; \n\n    uint256 public FLASHLOAN_PREMIUMS_DIVISOR; \n\n    address public PRICE_NODE_PUBLIC_KEY; \n\n    uint256 public TOTAL_ITF_AMOUNT ;\n\n    uint256 public STAKING_MINT_PERCENT; \n\n    uint256 public PREMIUMS_SHARE_PERCENT; \n\n    uint256 public PRODUCT_WITHDRAW_PERCENT; \n\n    uint256 public ORACLE_PAYOUT_RATE; \n\n    uint256 public ORACLE_STAGE_NUM; \n\n    uint256 public ORACLE_NUM; \n\n    uint256 public ORACLE_SCHEDULE_MULTIPLIER; \n\n    uint256 public ORACLE_VALID_PERIOD; \n\n    uint256 public ITFAPY; \n    \n    address[4] private _itfReleaseAccountArray;\n    uint256[4] private _itfReleaseAccountMultiplierArray;\n    uint256 private _itfReleaseDivisor;\n\n    uint256 _lastBlockNumber;\n    uint256 _lastBlockTimestamp;\n    uint256 public blockTime  ; \n\n    function currentTimestamp() view public returns(uint256){\n        return (block.number-_lastBlockNumber).mul(blockTime).div(1000).add(_lastBlockTimestamp);\n    }\n\n    uint256 public STAKING_TOKEN_MARGIN; \n\n    constructor(uint256 totalITFAmount, uint256 stakingMintPercent, \n                uint256 oraclePayoutRate,uint256 oracleStageNum,uint256 oracleNum,uint256 oracleScheduleMultiplier,\n                uint256 premiumsSharePercent, \n                address[4] memory itfReleaseAccounts, \n                uint256[4] memory itfReleaseAccountMultipliers, \n                uint256 itfReleaseDivisor,\n                uint256 channelPremiumsPercent,\n                uint256 oracleValidPeriod,\n                address priceNodePublicKey,\n                uint256 flashLoanPremiumsPercent,\n                uint256 flashLoanPremiumsDivisor,\n                uint256 blockTime_\n                ) public{\n        require(blockTime_\u003e0,\"block time must be \u003e0\");\n\n        TOTAL_ITF_AMOUNT=totalITFAmount;\n        STAKING_MINT_PERCENT = stakingMintPercent;\n        ORACLE_PAYOUT_RATE = oraclePayoutRate;\n        ORACLE_STAGE_NUM = oracleStageNum;\n        ORACLE_NUM = oracleNum;\n        ORACLE_SCHEDULE_MULTIPLIER = oracleScheduleMultiplier;\n        PREMIUMS_SHARE_PERCENT = premiumsSharePercent;\n        ORACLE_VALID_PERIOD = oracleValidPeriod;\n        setITFReleaseAccounts(itfReleaseAccounts,itfReleaseAccountMultipliers,itfReleaseDivisor);\n        PRICE_NODE_PUBLIC_KEY = priceNodePublicKey;\n        CHANNEL_PREMIUMS_PERCENT=channelPremiumsPercent;\n        FLASHLOAN_PREMIUMS_PERCENT = flashLoanPremiumsPercent;\n        FLASHLOAN_PREMIUMS_DIVISOR = flashLoanPremiumsDivisor;\n\n        ITFAPY = 200;\n        PRODUCT_WITHDRAW_PERCENT = 300;\n        _lastBlockNumber=block.number;\n        _lastBlockTimestamp=block.timestamp;\n        blockTime = blockTime_;\n\n        STAKING_TOKEN_MARGIN=10;\n    }\n\n    function refreshBlockTime() public {\n        _lastBlockNumber=block.number;\n        _lastBlockTimestamp=block.timestamp;\n    }\n\n    function setBlockTime(uint256 blockTime_) public onlyOwner {\n        if (blockTime_!=blockTime){\n            require(blockTime_\u003e0,\"block time must be \u003e0\");\n            blockTime = blockTime_;\n        }\n        refreshBlockTime();\n    }\n\n    function seStakingTokenMargin(uint256 margin) public onlyOwner{\n        STAKING_TOKEN_MARGIN=margin;\n    }\n\n    function hasCoverChannel(uint256 id) view public returns(bool){\n        return _channels[id]!=address(0);\n    } \n\n    function getCoverChannelAddress(uint256 id) view public returns(address){\n        return _channels[id];\n    }\n\n    function registerCoverChannel(uint256 id,address receiverAccount) public onlyOwner{\n        require(!hasCoverChannel(id),\"The id exists\");\n        _channels[id]=receiverAccount;\n    }\n\n    function unregisterCoverChannel(uint256 id) public onlyOwner{\n        require(hasCoverChannel(id),\"The id does not exists\");\n        delete _channels[id];\n    }\n\n    function setChannelPremiumsPercent(uint256 channelPremiumsPercent) public onlyOwner {\n        CHANNEL_PREMIUMS_PERCENT = channelPremiumsPercent;\n    }\n\n    function setFlashLoanPremiumsPercent(uint256 flashLoanPremiumsPercent) public onlyOwner {\n        FLASHLOAN_PREMIUMS_PERCENT = flashLoanPremiumsPercent;\n    }\n\n    function setStakingMintPercent(uint256 stakingMintPercent) public onlyOwner {\n        STAKING_MINT_PERCENT = stakingMintPercent;\n    }\n\n    function setOraclePayoutRate(uint256 oraclePayoutRate) public onlyOwner {\n        ORACLE_PAYOUT_RATE = oraclePayoutRate;\n    }\n\n    function setOracleNum(uint256 oracleNum) public onlyOwner {\n        ORACLE_NUM = oracleNum;\n    }\n\n    function setOracleStageNum(uint256 oracleStageNum) public onlyOwner {\n        ORACLE_STAGE_NUM = oracleStageNum;\n    }\n\n    function setOracleScheduleMultiplier(uint256 oracleScheduleMultiplier) public onlyOwner {\n        ORACLE_SCHEDULE_MULTIPLIER = oracleScheduleMultiplier;\n    }\n\n\n\n    function setOracleValidPeriod(uint256 oracleValidPeriod) public onlyOwner {\n        ORACLE_VALID_PERIOD = oracleValidPeriod;\n    }\n\n    function setITFAPY(uint256 itfApy) public onlyOwner {\n        require(itfApy \u003c 1000,\"invalid itf APY\");\n        ITFAPY = itfApy;\n    }\n\n    function setPremiumsSharePercent(uint256 premiumsSharePercent) public onlyOwner {\n        require(premiumsSharePercent \u003c 1000,\"invalid premiums share percent\");\n        PREMIUMS_SHARE_PERCENT = premiumsSharePercent;\n    }\n\n    function setProductWithdrawPercent(uint256 productWithdrawPercent) public onlyOwner {\n        require(productWithdrawPercent \u003c 1000,\"invalid product withdraw percent\");\n        PRODUCT_WITHDRAW_PERCENT = productWithdrawPercent;\n    }\n\n    function setITFReleaseAccounts(address[4] memory itfReleaseAccounts, uint256[4] memory itfReleaseAccountMultipliers, uint256 itfReleaseDivisor) public onlyOwner {\n        _itfReleaseAccountArray = itfReleaseAccounts;\n        _itfReleaseAccountMultiplierArray = itfReleaseAccountMultipliers;\n        _itfReleaseDivisor = itfReleaseDivisor;\n    }\n\n    function getITFReleaseAccountArray() public view returns(address[4] memory) {\n        return _itfReleaseAccountArray;\n    }\n\n    function getITFReleaseAccountMultiplierArray() public view returns(uint256[4] memory) {\n        return _itfReleaseAccountMultiplierArray;\n    }\n\n    function getITFReleaseDivisor() public view returns(uint256) {\n        return _itfReleaseDivisor;\n    }\n\n    function setPriceNodePublicKey(address priceNodePublicKey) public onlyOwner {\n        PRICE_NODE_PUBLIC_KEY = priceNodePublicKey;\n    }\n\n    function verifySign(bytes32 messageHash, address publicKey, uint256 expiresAt, uint8 v, bytes32 r, bytes32 s) public view returns(bool){\n\t\trequire(expiresAt \u003e now, \"time expired\");\n        bytes32 prefixedHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", messageHash));\n        address addr = ecrecover(prefixedHash, v, r, s);\n        if(addr!=publicKey){\n            prefixedHash = keccak256(abi.encodePacked(\"\\x19Conflux Signed Message:\\n32\", messageHash));\n            addr = ecrecover(prefixedHash, v, r, s);\n        }\n        return (addr==publicKey);\n    }\n\n    function initSponsor() external { \n        ISponsorWhiteListControl SPONSOR = ISponsorWhiteListControl(address(0x0888000000000000000000000000000000000001));\n        address[] memory users = new address[](1);\n        users[0] = address(0);\n        SPONSOR.addPrivilege(users);\n    }\n\n}\n\n// File: contracts\\IUSDT.sol\n\n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//                   Version 2, December 2004\n// \n//Copyright (C) 2021 ins3project \u003cins3project@yahoo.com\u003e\n//\n//Everyone is permitted to copy and distribute verbatim or modified\n//copies of this license document, and changing it is allowed as long\n//as the name is changed.\n// \n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n//\n// You just DO WHAT THE FUCK YOU WANT TO.\n\npragma solidity \u003e=0.6.0 \u003c0.7.0;\n\n/**\n * @dev Interface of the USDT standard as defined in the EIP.\n */\ninterface IUSDT {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function decimals() external view returns (uint256);\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external ;\n\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external ;\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external ;\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);    \n}\n\n// File: contracts\\CompatibleERC20.sol\n\n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//                   Version 2, December 2004\n// \n//Copyright (C) 2021 ins3project \u003cins3project@yahoo.com\u003e\n//\n//Everyone is permitted to copy and distribute verbatim or modified\n//copies of this license document, and changing it is allowed as long\n//as the name is changed.\n// \n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n//\n// You just DO WHAT THE FUCK YOU WANT TO.\npragma solidity \u003e=0.6.0 \u003c0.7.0;\n\n\n\n\n\ninterface IERC20Full is IERC20\n{\n    function decimals() external view returns (uint8);\n}\n\nlibrary CompatibleERC20  {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    address constant USDT_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n\n    function decimalsERC20(address token) internal view returns (uint256){\n        if (token==USDT_ADDRESS){\n            return IUSDT(token).decimals();\n        }else{\n            return uint256(IERC20Full(token).decimals());\n        }\n    }\n\n    function getDiffDecimals(address token) internal view returns(uint256){\n        uint256 dec=decimalsERC20(token);\n        require(dec\u003c=18,\"token\u0027s decimals must \u003c=18\");\n        return 10**(18-dec);\n    }\n\n    function getCleanAmount(address token,uint256 amount) internal view returns (uint256){\n        uint256 dec=getDiffDecimals(token);\n        return amount.div(dec).mul(dec);\n    }\n\n    function balanceOfERC20(address token,address addr) internal view returns(uint256){\n        uint256 dec=getDiffDecimals(token);\n        if (token==USDT_ADDRESS){\n            return IUSDT(token).balanceOf(addr).mul(dec);\n        }else{\n            return IERC20(token).balanceOf(addr).mul(dec);\n        }\n    }\n\n    function transferERC20(address token,address recipient, uint256 amount) internal{\n        uint256 dec=getDiffDecimals(token);\n        if (token==USDT_ADDRESS){\n            IUSDT(token).transfer(recipient,amount.div(dec));  \n        }else{\n            IERC20(token).safeTransfer(recipient,amount.div(dec));\n        }\n    }\n\n    function allowanceERC20(address token,address account,address spender) view internal returns(uint256){\n        uint256 dec=getDiffDecimals(token);\n        if (token==USDT_ADDRESS){\n            return IUSDT(token).allowance(account,spender).mul(dec);\n        }else{\n            return IERC20(token).allowance(account,spender).mul(dec);\n        }\n    }\n    \n    function approveERC20(address token,address spender, uint256 amount) internal {\n        uint256 dec=getDiffDecimals(token);\n        if (token==USDT_ADDRESS){\n            IUSDT(token).approve(spender,amount.div(dec));\n        }else{\n            IERC20(token).safeApprove(spender,amount.div(dec));\n        }\n    }\n\n    function transferFromERC20(address token,address sender, address recipient, uint256 amount) internal {\n        uint256 dec=getDiffDecimals(token);\n        if (token==USDT_ADDRESS){\n            IUSDT(token).transferFrom(sender,recipient,amount.div(dec));\n        }else{\n            IERC20(token).safeTransferFrom(sender,recipient,amount.div(dec));\n        }\n    }\n}\n\n// File: contracts\\flashloan\\IFlashLoanReceiver.sol\n\n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//                   Version 2, December 2004\n// \n//Copyright (C) 2021 ins3project \u003cins3project@yahoo.com\u003e\n//\n//Everyone is permitted to copy and distribute verbatim or modified\n//copies of this license document, and changing it is allowed as long\n//as the name is changed.\n// \n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n//\n// You just DO WHAT THE FUCK YOU WANT TO.\npragma solidity \u003e=0.6.0 \u003c0.7.0;\n\n/**\n * @notice Interface for the Aave fee IFlashLoanReceiver.\n * @author Aave\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\n **/\ninterface IFlashLoanReceiver {\n  function executeOperation(\n    address[] calldata assets,\n    uint256[] calldata amounts,\n    uint256[] calldata premiums,\n    address initiator,\n    bytes calldata params\n  ) external returns (bool);\n}"},"StakingPoolTokenV2.sol":{"content":"//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//                   Version 2, December 2004\n// \n//Copyright (C) 2021 ins3project \u003cins3project@yahoo.com\u003e\n//\n//Everyone is permitted to copy and distribute verbatim or modified\n//copies of this license document, and changing it is allowed as long\n//as the name is changed.\n// \n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n//\n// You just DO WHAT THE FUCK YOU WANT TO.\npragma solidity \u003e=0.6.0 \u003c0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./StakingTokenHolderV2.sol\";\n\ncontract StakingPoolTokenV2 is ERC721, IUpgradable, ReentrancyGuard\n{\n    using SafeMath for uint256;\n    using CompatibleERC20 for address;\n    using SafeERC20 for IERC20;\n\n\n    StakingTokenHolderV2 public _coinHolders;\n\n    uint256 public _tokenCount; \n\n    mapping(address=\u003estring) _pools;\n    PriceMetaInfoDB  _priceMetaInfoDb;\n    bool public flashLoanEnable;\n\n\n    uint256 public totalFlashLoanCount; \n\n    uint256 public totalFlashLoanAmount; \n\n    uint256 public totalFlashLoanPremiums; \n\n    uint256 public exitFeesRate; //50 0.5%\n\n    mapping(address=\u003euint256) _compensation;\n\n    event NewTokenHolderCreated(uint256 tokenId);\n    event TokenHolderReleased(uint256 tokenId);\n\n  event FlashLoan(\n    address indexed target,\n    address indexed initiator,\n    address indexed asset,\n    uint256 amount,\n    uint256 premium,\n    uint16 referralCode\n  );\n\n    constructor(address coinHolder) ERC721(\"Ins3.finance Capital Token\",\"iNFT\") public{\n        _coinHolders = StakingTokenHolderV2(coinHolder);\n        _coinHolders.setOperator(address(this));\n        exitFeesRate = 50;\n    }\n\n\n    function  updateDependentContractAddress() public override{\n        _priceMetaInfoDb=PriceMetaInfoDB(register.getContract(\"MIDB\"));\n    }\n\n    function checkPoolsAmounts(address [] memory pools/*, uint256 []  memory amounts, uint256 amount,uint256 maxAmount*/) view public returns(bool){ \n        require(pools.length\u003e0 \u0026\u0026 pools.length\u003c=_priceMetaInfoDb.STAKING_TOKEN_MARGIN(),\"pool length error\");\n\n        IClaimPool pool1=IClaimPool(pools[0]);\n        uint256 expireTimestamp = pool1.productTokenExpireTimestamp();\n        address tokenAddress = pool1.tokenAddress();\n        uint256 leverageWeightSum=0;\n        uint256 stakingMargin=_priceMetaInfoDb.STAKING_TOKEN_MARGIN().mul(10000);\n        for (uint256 i=0;i\u003cpools.length;++i){\n            address addr=pools[i];\n            IClaimPool pool=IClaimPool(addr);\n            require(isPool(addr),\"all pools should be registered\");\n            require(pool.productTokenExpireTimestamp()==expireTimestamp,\"pool expire time error\");\n            require(pool.tokenAddress()==tokenAddress,\"pool address not same\");\n\n            leverageWeightSum=leverageWeightSum.add(pool.stakingLeverageWeight());\n            require(leverageWeightSum\u003c=stakingMargin,\"out of leverage weight\");\n\n        }\n        return true;\n    }\n\n    function canReleaseTokenHolder(uint256 tokenId) view public returns(bool/*,address [] memory*/){\n        require(_exists(tokenId),\"No such tokenId\");\n\n        return _coinHolders.canReleaseTokenHolder(tokenId);\n    }\n\n\n\n    function isPool(address poolAddr) view public returns(bool){\n        return bytes(_pools[poolAddr]).length!=0;\n    }\n\n    modifier onlyPool(){\n        require(isPool(_msgSender()),\"Unknown staking pool\");\n        _;\n    }\n\n\n\n    function newTokenHolder(address [] memory pools, /*uint256 []  memory amounts,bytes8 coinName,*/uint256 amount) whenNotPaused external  {\n        require(amount\u003e0,\"amount must \u003e 0\");\n        require(checkPoolsAmounts(pools/*,amounts,amount,maxAmount*/),\"Check pools failed\");\n        address token= IClaimPool(pools[0]).tokenAddress();\n\n        require(token.allowanceERC20(_msgSender(),address(this))\u003e=amount,\"No enough allowance for new token holder\");\n        token.transferFromERC20(_msgSender(),address(this),amount);\n        \n        _tokenCount+=1;\n        uint256 tokenId = _tokenCount;\n        uint256 beginTimestamp = now;\n        _coinHolders.set(tokenId,amount,/*maxAmount,*/beginTimestamp/*,coinName*/);\n\n        for (uint256 i=0;i\u003cpools.length;++i){\n            address addr=pools[i];\n            IClaimPool pool=IClaimPool(addr);\n            pool.putTokenHolder(tokenId,amount,beginTimestamp);\n            _coinHolders.putTokenHolderInPool(addr,tokenId/*,amount*/);\n        }\n        \n\n        _mint(_msgSender(),tokenId);\n        emit NewTokenHolderCreated(tokenId);\n    }\n\n\n\n    function calcPoolPayAmount(uint256 tokenId, address poolAddr) view public returns(uint256) {\n        address [] memory poolAddrs = _coinHolders.getTokenHolderPools(tokenId);\n        uint256 totalPayAmount = 0;\n        uint256 poolPayAmount = 0;\n        for (uint256 i=0;i\u003cpoolAddrs.length;++i) {\n            IClaimPool pool=IClaimPool(poolAddrs[i]);\n            uint256 totalNeedPayFromStaking = pool.totalNeedPayFromStaking();\n            if(totalNeedPayFromStaking \u003e 0) {\n                uint256 stakingAmount = getTokenHolderAmount(tokenId, poolAddrs[i]);\n                uint256 userPayAmount = stakingAmount.mul(totalNeedPayFromStaking).div(pool.totalStakingAmount());\n                totalPayAmount = totalPayAmount.add(userPayAmount);\n                if(poolAddrs[i]==poolAddr){\n                    poolPayAmount = userPayAmount;\n                }\n            }\n        }\n        if(totalPayAmount==0){\n            return 0;\n        } else{\n            uint256 stakingAmount = getTokenHolderAmount(tokenId, poolAddr);\n            uint256 poolPayAmount2 = poolPayAmount.mul(stakingAmount).div(totalPayAmount);\n            return Math.min(poolPayAmount2, poolPayAmount);\n        }\n    }\n\n    function releaseTokenHolder(uint256 tokenId) nonReentrant whenNotPaused external {\n        require(ownerOf(tokenId)==_msgSender(),\"The tokenId does not belong to you\");\n        bool canRelease = canReleaseTokenHolder(tokenId);\n        require(canRelease,\"Can not release the tokenId\");\n\n        bool isAllClosed = _coinHolders.isAllPoolsClosed(tokenId);\n        if (isAllClosed){\n            uint256 rewards = calcPremiumsRewards(tokenId);\n            if (rewards\u003e0){\n                address tokenAddress = capitalTokenAddress(tokenId);\n                tokenAddress.transferERC20(_msgSender(),rewards);\n            }\n        }\n\n        CoinHolderV2 memory coinHolder = _coinHolders.getTokenHolderV2(tokenId);\n        address [] memory poolAddrs = coinHolder.pools;\n        for (uint256 i=0;i\u003cpoolAddrs.length;++i){ \n            IClaimPool pool=IClaimPool(poolAddrs[i]);\n            if(!pool.isClosed()){\n                pool.takeTokenHolder(tokenId);\n            } else {\n                uint256 totalNeedPayFromStaking = pool.totalNeedPayFromStaking();\n                if(totalNeedPayFromStaking \u003e 0) {\n                    uint256 payAmount = calcPoolPayAmount(tokenId, poolAddrs[i]);\n                    pool.getAToken(payAmount, _msgSender());\n                }\n            }\n        }\n\n        uint256 remainingPrincipal=coinHolderRemainingPrincipal(tokenId);\n        _burn(tokenId);\n        if(remainingPrincipal\u003e0){\n            uint256 returnAmount = remainingPrincipal;\n            uint256 feesAmount = 0;\n            uint256 stakingSeconds = now.sub(coinHolder.beginTimestamp);\n            if(!isAllClosed \u0026\u0026 stakingSeconds \u003c 7 days){\n                feesAmount = returnAmount.mul(exitFeesRate).div(10000);\n                returnAmount = returnAmount.sub(feesAmount);\n            }\n            address tokenAddress = capitalTokenAddress(tokenId);\n            if(feesAmount\u003e0){\n                tokenAddress.transferERC20(admin(),feesAmount);\n            }\n            if(returnAmount\u003e0){\n                tokenAddress.transferERC20(_msgSender(),returnAmount);\n            }\n        }\n        emit TokenHolderReleased(tokenId);\n    }\n\n\n \n    function bookkeepingFromPool(uint256 amount) onlyPool public{\n        address poolAddr=_msgSender();\n\n        _compensation[poolAddr]=_compensation[poolAddr].add(amount);\n        uint256 totalBalance = IClaimPool(poolAddr).tokenAddress().balanceOfERC20(address(this));\n        require(totalBalance \u003e= _compensation[poolAddr],\"Amount is too large\");\n        \n    }\n\n    function claim(address poolAddr) nonReentrant whenNotPaused public{\n       address userAddr=_msgSender();\n       require(isPool(poolAddr),\"unknown staking pool\");\n       IClaimPool pool=IClaimPool(poolAddr);\n       (uint256 amount,/*uint256 tokenBalance*/) = pool.queryAndCheckClaimAmount(userAddr);\n       require(amount\u003e0,\"not claim\");\n       require(_compensation[poolAddr]\u003e=amount,\"amount must \u003c pool\u0027s pay amount\");\n           _compensation[poolAddr]=_compensation[poolAddr].sub(amount);\n            address tokenAddress = pool.tokenAddress();\n            tokenAddress.transferERC20(userAddr,amount);\n            pool.returnRemainingAToken(userAddr);\n\n    }\n\n    function coinHolderRemainingPrincipal(uint256 tokenId) view public returns(uint256){\n        return _coinHolders.coinHolderRemainingPrincipal(tokenId);\n    }\n\n    function capitalTokenAddress(uint256 tokenId) view public returns(address){\n        return _coinHolders.capitalTokenAddress(tokenId);\n    }\n\n\n    function calcPremiumsRewards(uint256 tokenId) view public returns(uint256 rewards/*,address [] memory*/){\n        require(_exists(tokenId),\"The tokenId does not exist\");\n        return _coinHolders.calcPremiumsRewards(tokenId);\n    }\n\n    function isAllPoolsClosed(uint256 tokenId) view public returns(bool){\n        return _coinHolders.isAllPoolsClosed(tokenId);\n    }\n\n\n\n    function getTokenHolder(uint256 tokenId) view public returns(uint256,uint256,uint256,uint256,address [] memory){   \n        require(_exists(tokenId),\"Token does not exist\");\n        return _coinHolders.getTokenHolder(tokenId);\n\n    }\n\n    function registerStakingPool(address poolAddr,string memory poolName) onlyOwner public {\n        require(!isPool(poolAddr),\"Staking pool has been already registered\");\n        _pools[poolAddr]=poolName;\n    }\n\n    function unregisterStakingPool(address poolAddr) onlyOwner public{\n        require(isPool(poolAddr),\"Staking pool has not been registered\");\n        delete _pools[poolAddr];\n    }\n\n    function getStakingPoolName(address poolAddr) view public returns(string memory){\n        return _pools[poolAddr];\n    }\n\n    function getTokenHolderAmount(uint256 tokenId,address poolAddr) view public returns(uint256){\n        require(_exists(tokenId),\"Token does not exist when put it into pool\");\n        return _coinHolders.getTokenHolderAmount(tokenId,poolAddr);\n    }\n\n    function isTokenExist(uint256 tokenId) view public returns(bool){\n        return _exists(tokenId);\n    }\n\n    function setExitFeesRate(uint256 rate) onlyOwner public{\n        exitFeesRate = rate;\n    }\n\n    struct FlashLoanLocalVars {\n        IFlashLoanReceiver receiver;\n        uint256 i;\n        address currentAsset;\n        uint256 currentAmount;\n        uint256 currentPremium;\n        uint256 currentAmountPlusPremium;\n    }\n  function flashLoan(\n    address receiverAddress,\n    address[] calldata assets,\n    uint256[] calldata amounts,\n    bytes calldata params,\n    uint16 referralCode\n  ) external nonReentrant whenNotPaused\n  {\n    require(flashLoanEnable,\"flash loan not enable\");\n\n    totalFlashLoanCount = totalFlashLoanCount.add(1);\n\n    FlashLoanLocalVars memory vars;\n\n    require(assets.length == amounts.length, \"invalid loan params\");\n\n    uint256[] memory premiums = new uint256[](assets.length);\n\n    vars.receiver = IFlashLoanReceiver(receiverAddress);\n\n    for (vars.i = 0; vars.i \u003c assets.length; vars.i++) {\n\n      premiums[vars.i] = amounts[vars.i].mul(_priceMetaInfoDb.FLASHLOAN_PREMIUMS_PERCENT()).div(_priceMetaInfoDb.FLASHLOAN_PREMIUMS_DIVISOR());\n      totalFlashLoanAmount = totalFlashLoanAmount.add(amounts[vars.i]);\n      totalFlashLoanPremiums = totalFlashLoanPremiums.add(premiums[vars.i]);\n\n      address payable receiverAddressPayable = address(uint160(receiverAddress));\n      IERC20(assets[vars.i]).safeTransfer(receiverAddressPayable, amounts[vars.i]);\n    }\n\n    require(vars.receiver.executeOperation(assets, amounts, premiums, msg.sender, params),\"invalid flash loan executor return\");\n\n    for (vars.i = 0; vars.i \u003c assets.length; vars.i++) {\n      vars.currentAsset = assets[vars.i];\n      vars.currentAmount = amounts[vars.i];\n      vars.currentPremium = premiums[vars.i];\n      vars.currentAmountPlusPremium = vars.currentAmount.add(vars.currentPremium);\n\n      IERC20(vars.currentAsset).safeTransferFrom(\n        receiverAddress,\n        address(this),\n        vars.currentAmountPlusPremium\n      );\n\n      IERC20(vars.currentAsset).safeTransfer(admin(), vars.currentPremium);\n\n      emit FlashLoan(\n        receiverAddress,\n        msg.sender,\n        vars.currentAsset,\n        vars.currentAmount,\n        vars.currentPremium,\n        referralCode\n      );\n    }\n  }\n\n    function setFlashLoanEnable(bool enable) public onlyOwner{\n        flashLoanEnable = enable;\n    }\n\n}\n"},"StakingTokenHolderV2.sol":{"content":"//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//                   Version 2, December 2004\n// \n//Copyright (C) 2021 ins3project \u003cins3project@yahoo.com\u003e\n//\n//Everyone is permitted to copy and distribute verbatim or modified\n//copies of this license document, and changing it is allowed as long\n//as the name is changed.\n// \n//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n//  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n//\n// You just DO WHAT THE FUCK YOU WANT TO.\npragma solidity \u003e=0.6.0 \u003c0.7.0;\npragma experimental ABIEncoderV2;\nimport \"./lib.sol\";\n\n\n\nstruct CoinHolderV2 {\n    uint256     principal;  \n\n\n    uint256     beginTimestamp;\n    address[]   pools;\n}\n\n\ncontract StakingTokenHolderV2\n{\n    using SafeMath for uint256;\n    mapping(uint256=\u003eCoinHolderV2) public _coinHolders; \n\n    address _operator;\n\n    function setOperator(address addr) public {\n        require(_operator==address(0),\"only once\");\n        _operator=addr;\n    }\n\n    modifier onlyOperator() {\n        require(_operator == msg.sender, \"Ownable: caller is not the operator\");\n        _;\n    }\n\n    function canReleaseTokenHolder(uint256 tokenId) view public returns(bool/*,address [] memory*/){\n        CoinHolderV2 storage holder=_coinHolders[tokenId];\n        for (uint256 i=0;i\u003cholder.pools.length;++i){\n            address poolAddr=holder.pools[i];\n            require(poolAddr!=address(0),\"Pool address should not be 0\");\n            IClaimPool pool=IClaimPool(poolAddr);\n            if(!pool.isClosed()){\n                if(pool.productTokenRemainingAmount() \u003c holder.principal || now \u003e= pool.productTokenExpireTimestamp()){\n                    return false;\n                }\n            }\n        }\n        return true;\n\n    }\n\n\n\n    function coinHolderRemainingPrincipal(uint256 tokenId) view public returns(uint256){\n        CoinHolderV2 storage holder = _coinHolders[tokenId];\n        uint256 remainingPrincipal = holder.principal;\n        for (uint256 i=0;i\u003cholder.pools.length;++i){\n            address addr=holder.pools[i];\n            IClaimPool pool=IClaimPool(addr);\n            uint256 totalNeedPayFromStaking = pool.totalNeedPayFromStaking();\n            if(totalNeedPayFromStaking\u003e0){\n                uint256 totalStakingAmount = pool.totalStakingAmount();\n                uint256 stakingAmount = holder.principal;\n                uint256 userPayAmount = stakingAmount.mul(totalNeedPayFromStaking).div(totalStakingAmount);\n                if(remainingPrincipal\u003e=userPayAmount){\n                    remainingPrincipal = remainingPrincipal.sub(userPayAmount);\n                }else{\n                    remainingPrincipal = 0;\n                    break;\n                }\n            }\n        }\n        return remainingPrincipal;\n    }\n\n    function capitalTokenAddress(uint256 tokenId) view public returns(address){\n        CoinHolderV2 storage holder = _coinHolders[tokenId];\n        return IClaimPool(holder.pools[0]).tokenAddress();\n    }\n\n    function calcPremiumsRewards(uint256 tokenId) view public returns(uint256 rewards){\n        CoinHolderV2 storage holder=_coinHolders[tokenId];\n        /*if(holder.haveHarvestPremiums){\n            return 0;\n        }*/\n        rewards=0;\n        for (uint256 i=0;i\u003cholder.pools.length;++i){\n            address poolAddr=holder.pools[i];\n            IClaimPool pool=IClaimPool(poolAddr);\n            if (pool.isNormalClosed()){\n                rewards=rewards.add(pool.calcPremiumsRewards(holder.principal, holder.beginTimestamp));\n            }\n        }\n        return rewards;\n    }\n\n\n    function isAllPoolsClosed(uint256 tokenId) view public returns(bool){\n        CoinHolderV2 storage holder=_coinHolders[tokenId];\n        for (uint256 i=0;i\u003cholder.pools.length;++i){\n            IClaimPool pool=IClaimPool(holder.pools[i]);\n            if (!pool.isClosed()){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function getTokenHolderAmount(uint256 tokenId,address/* poolAddr*/) view public returns(uint256){ //TODO\n        CoinHolderV2 storage holder=_coinHolders[tokenId];\n        return holder.principal;\n    }\n\n    function getTokenHolder(uint256 tokenId) view public returns(uint256,uint256,uint256,uint256,address [] memory){   \n        CoinHolderV2 storage holder=_coinHolders[tokenId];\n        uint256 remainingPrincipal = coinHolderRemainingPrincipal(tokenId);\n\n        return (holder.principal,remainingPrincipal,0,holder.beginTimestamp,holder.pools);\n    }\n\n    function getTokenHolderV2(uint256 tokenId) view public returns(CoinHolderV2 memory){   \n        CoinHolderV2 storage holder=_coinHolders[tokenId];\n        return holder;\n    }\n\n    function getTokenHolderPools(uint256 tokenId) view public returns(address [] memory){   \n        CoinHolderV2 storage holder=_coinHolders[tokenId];\n        return holder.pools; \n    }\n\n    function putTokenHolderInPool(address poolAddr,uint256 tokenId/*,uint256 amount*/) onlyOperator public {\n        CoinHolderV2 storage holder=_coinHolders[tokenId];\n        holder.pools.push(poolAddr);\n    }\n\n\n    function set(uint256 tokenId,uint256 principal,/*uint256 availableMarginAmount,*/uint256 beginTimestamp/*,bytes8 coinName*/) onlyOperator public{\n        _coinHolders[tokenId]=CoinHolderV2(principal,/*availableMarginAmount,*/beginTimestamp,/*coinName,*/new address[](0));\n    }\n\n    function initSponsor() external {\n        ISponsorWhiteListControl SPONSOR = ISponsorWhiteListControl(address(0x0888000000000000000000000000000000000001));\n        address[] memory users = new address[](1);\n        users[0] = address(0);\n        SPONSOR.addPrivilege(users);\n    }\n}"}}