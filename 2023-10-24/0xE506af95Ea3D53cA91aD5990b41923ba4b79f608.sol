{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returnData,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (!success) {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returnData.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returnData_size := mload(returnData)\r\n                    revert(add(32, returnData), returnData_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n\r\n        return returnData;\r\n    }\r\n}\r\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"IDSC.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ninterface IDSC is IERC20 {\r\n    function selectUpNodes(address from) external view returns (address[] memory nodes);\r\n}\r\n\r\n\r\n\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"IUniswapV2Router.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.6.2;\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Ownable {\r\n    mapping(address =\u003e bool) public owners;\r\n    mapping(address =\u003e uint) public applyCancelTimes;\r\n    constructor() {\r\n        owners[msg.sender] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owners[msg.sender], \"O1\");\r\n        _;\r\n    }\r\n\r\n    function applySetOwner(address owner) public onlyOwner {\r\n        require(owners[owner], \u0027No need apply\u0027);\r\n        applyCancelTimes[owner] = block.timestamp;\r\n    }\r\n\r\n    function cancelSetReceiver(address owner) external onlyOwner {\r\n        require(owners[owner], \u0027No need cancel\u0027);\r\n        applyCancelTimes[owner] = 0;\r\n    }\r\n\r\n    function setOwner(address owner, bool flag) public onlyOwner {\r\n        if (!flag) { // 如果是撤销管理员，需要延迟10天生效\r\n            require(applyCancelTimes[owner] != 0 \u0026\u0026 block.timestamp \u003e applyCancelTimes[owner] + 10 days,\r\n                \"Not ready for change receiver\");\r\n            applyCancelTimes[owner] == 0;\r\n        }\r\n        owners[owner] = flag;\r\n    }\r\n}"},"Public.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./SafeERC20.sol\";\r\nimport \"./IDSC.sol\";\r\nimport \"./IUniswapV2Router.sol\";\r\nimport \"./Strings.sol\";\r\n\r\ncontract Public is Ownable {\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20Metadata;\r\n\r\n    struct Lock {\r\n        uint256 openDay;\r\n        uint256 totalAmount;\r\n        uint256 releasedAmount;\r\n    }\r\n\r\n    // ERC20 basic token contract being held\r\n    IERC20Metadata public dsc;\r\n\r\n    IERC20Metadata public usd;\r\n\r\n    IUniswapV2Router public router;\r\n\r\n    // 售卖支付地址\r\n    address public sellPayer;\r\n\r\n    // 奖励支付地址\r\n    address public rewardPayer;\r\n\r\n    // 收款地址\r\n    address public receiver;\r\n\r\n    // DEX开盘前的公募价格 使用usd作为基准，1个dsc = sellPrice个usd\r\n    uint256 public sellPrice;\r\n\r\n    // 便于价格计算 1 DSC 的数量\r\n    uint256 public immutable priceBase;\r\n\r\n    // 奖励级别1 \u003c10000u (3%u + 3%dsc)\r\n    uint256 public rewardRank1;\r\n\r\n    // 奖励级别1 \u003c30000u (5%u + 5%dsc)\r\n    uint256 public rewardRank2;\r\n\r\n    // 奖励级别1 \u003c100000u (8%u + 8%dsc), \u003e 100000u (10%u + 10%dsc)\r\n    uint256 public rewardRank3;\r\n\r\n    // 小于rewardRank1时直接上级奖励USD千分比\r\n    uint256 public usdRewardPercent1 = 30;\r\n\r\n    // 小于rewardRank2时直接上级奖励USD千分比\r\n    uint256 public usdRewardPercent2 = 50;\r\n\r\n    // 小于rewardRank3时直接上级奖励USD千分比\r\n    uint256 public usdRewardPercent3 = 80;\r\n\r\n    // 大于rewardRank3时直接上级奖励USD千分比\r\n    uint256 public usdRewardPercent4 = 100;\r\n\r\n    // 10级上级奖励USD千分比\r\n    uint256 public upNodeUSDRewardPercent = 10;\r\n\r\n    // 小于rewardRank1时直接上级奖励DSC千分比\r\n    uint256 public dscRewardPercent1 = 30;\r\n\r\n    // 小于rewardRank2时直接上级奖励DSC千分比\r\n    uint256 public dscRewardPercent2 = 50;\r\n\r\n    // 小于rewardRank3时直接上级奖励DSC千分比\r\n    uint256 public dscRewardPercent3 = 80;\r\n\r\n    // 大于rewardRank3时直接上级奖励DSC千分比\r\n    uint256 public dscRewardPercent4 = 100;\r\n\r\n    // 10级上级奖励DSC千分比\r\n    uint256 public upNodeDSCRewardPercent = 10;\r\n\r\n    // 有效地址验证基准 USD 最小累计购买 \u003e 1000u\r\n    uint256 public minUSDCost;\r\n\r\n    // 有效地址验证基准 DSC 最小持仓大于 1000dsc\r\n    uint256 public minDSCHold;\r\n\r\n    // 申请修改收款地址时间\r\n    uint256 public applyChangeTime;\r\n\r\n    // 直接释放千分比 5%\r\n    uint256 public immutable directBuyReleasePercent = 50;\r\n\r\n    // 首次释放千分比 5%\r\n    uint256 public immutable firstBuyReleasePercent = 50;\r\n\r\n    // 线性释放千分比例 3%\r\n    uint256 public immutable lineBuyReleasePercent = 30;\r\n\r\n    // 奖励释放千分比例 8.4%\r\n    uint256 public immutable lineRewardReleasePercent = 84;\r\n\r\n    // 首次解锁间隔 30天\r\n    uint256 public immutable firstInterval = 30 days;\r\n\r\n    // 释放间隔 30天\r\n    uint256 public immutable releaseInterval = 30 days;\r\n\r\n    // 填充时间 24小时\r\n    uint256 public immutable padInterval = 24 hours;\r\n\r\n    // 首次解锁间隔 5分钟 用于测试\r\n    //uint256 public immutable firstInterval = 5 minutes;\r\n\r\n    // 释放间隔 5分钟 用于测试\r\n    //uint256 public immutable releaseInterval = 5 minutes;\r\n\r\n    // 填充时间 1分钟 用于测试\r\n    //uint256 public immutable padInterval = 1 minutes;\r\n\r\n    // 用户列表\r\n    address[] public allUsers;\r\n\r\n    // 购买锁仓\r\n    mapping (address =\u003e mapping(uint256 =\u003e Lock)) public buyLocks;\r\n    mapping (address =\u003e uint256) buyIndexStart;\r\n    mapping (address =\u003e uint256) buyIndexEnd;\r\n\r\n    // 用户累计购买交易额，以U计算\r\n    mapping (address =\u003e uint) public buyTotal;\r\n\r\n    // 奖励锁仓\r\n    mapping (address =\u003e mapping(uint256 =\u003e Lock)) public rewardLocks;\r\n    mapping (address =\u003e uint256) public rewardIndexStart;\r\n    mapping (address =\u003e uint256) public rewardIndexEnd;\r\n\r\n    constructor(\r\n        address _admin,\r\n        address _router,\r\n        address _dsc,\r\n        address _usd,\r\n        address _sellPayer,\r\n        address _rewardPayer,\r\n        address _receiver) {\r\n        setOwner(_admin, true);\r\n        router = IUniswapV2Router(_router);\r\n        dsc = IERC20Metadata(_dsc);\r\n        usd = IERC20Metadata(_usd);\r\n        uint8 dscDecimals = IERC20Metadata(_dsc).decimals();\r\n        priceBase = 10 ** dscDecimals;\r\n        sellPayer = _sellPayer;\r\n        rewardPayer = _rewardPayer;\r\n        receiver = _receiver;\r\n        uint8 usdDecimals = IERC20Metadata(_usd).decimals();\r\n        sellPrice = (2 * 10 ** usdDecimals) / 100; // 0.02u\r\n        rewardRank1 = 10000 * 10 ** usdDecimals; // 10000u\r\n        rewardRank2 = 30000 * 10 ** usdDecimals; // 30000u\r\n        rewardRank3 = 100000 * 10 ** usdDecimals; // 100000u\r\n        minUSDCost = 1000 * 10 ** usdDecimals; // 1000u\r\n        minDSCHold = 1000 * 10 ** dscDecimals; // 1000dsc\r\n    }\r\n\r\n    function setSellPayer(address newPayer) external onlyOwner {\r\n        sellPayer = newPayer;\r\n    }\r\n\r\n    function setRewardPayer(address newPayer) external onlyOwner {\r\n        rewardPayer = newPayer;\r\n    }\r\n\r\n    function applySetReceiver() external onlyOwner {\r\n        applyChangeTime = block.timestamp;\r\n    }\r\n\r\n    function cancelSetReceiver() external onlyOwner {\r\n        applyChangeTime = 0;\r\n    }\r\n\r\n    function setReceiver(address newReceiver) external onlyOwner {\r\n        require(applyChangeTime != 0 \u0026\u0026 block.timestamp \u003e applyChangeTime + 10 days, \"Not ready for change receiver\");\r\n        receiver = newReceiver;\r\n        applyChangeTime = 0;\r\n    }\r\n\r\n    function setMinUSDCost(uint newCost) external onlyOwner {\r\n        minUSDCost = newCost;\r\n    }\r\n\r\n    function setMinDSCHold(uint newHold) external onlyOwner {\r\n        minDSCHold = newHold;\r\n    }\r\n\r\n    function setPrice(uint newPrice) external onlyOwner {\r\n        sellPrice = newPrice;\r\n    }\r\n\r\n    function setRewardRank(uint newRank1, uint newRank2, uint newRank3) external onlyOwner {\r\n        (rewardRank1, rewardRank2, rewardRank3) = (newRank1, newRank2, newRank3);\r\n    }\r\n\r\n    function setUSDRewardPercent(uint newPercent1, uint newPercent2, uint newPercent3, uint newPercent4)\r\n    external onlyOwner {\r\n        (usdRewardPercent1, usdRewardPercent2, usdRewardPercent3, usdRewardPercent4) =\r\n            (newPercent1, newPercent2, newPercent3, newPercent4);\r\n    }\r\n\r\n    function setDSCRewardPercent(uint newPercent1, uint newPercent2, uint newPercent3, uint newPercent4)\r\n    external onlyOwner {\r\n        (dscRewardPercent1, dscRewardPercent2, dscRewardPercent3, dscRewardPercent4) =\r\n            (newPercent1, newPercent2, newPercent3, newPercent4);\r\n    }\r\n\r\n    //用户直接通过USDT购买，需要提前授权本合约使用该用户的USDT\r\n    function buyWithUSDT(uint usdAmount) external {\r\n        usd.safeTransferFrom(msg.sender, address(this), usdAmount);\r\n        buy(msg.sender, usdAmount);\r\n    }\r\n\r\n    function buy(address user, uint usdAmount) internal {\r\n        if (buyTotal[user] == 0) {\r\n            allUsers.push(msg.sender);\r\n        }\r\n\r\n        // 获取用户所有的有效上级，第一个是其直接上级\r\n        address[] memory upNodes = IDSC(address(dsc)).selectUpNodes(user);\r\n\r\n        // 获取DSC\r\n        uint dscAmount = this.getDSCAmountByUSD(usdAmount);\r\n\r\n        // 为用户分配并锁仓DSC\r\n        distributeAndLockDSCForUser(user, dscAmount);\r\n\r\n        // 为上级分配并锁仓DSC\r\n        distributeAndLockDSCForUpNode(upNodes, dscAmount);\r\n\r\n        // 为所有的上级分配USD\r\n        distributeUSD(upNodes, usdAmount);\r\n\r\n        // 累加用户购买所使用的USD数量\r\n        buyTotal[user] = buyTotal[user] + usdAmount;\r\n    }\r\n\r\n    function claim() external returns (uint256 availableAmount) {\r\n        availableAmount += this.claimForBuy(msg.sender, type(uint).max);\r\n        availableAmount += this.claimForReward(msg.sender, type(uint).max);\r\n    }\r\n\r\n    function getAvailable(address user) external view returns (uint256 availableAmount) {\r\n        availableAmount += this.availableForBuy(user);\r\n        availableAmount += this.availableForReward(user);\r\n    }\r\n\r\n    function getLocked(address user) external view returns (uint256 lockedAmount) {\r\n        lockedAmount += this.lockedForBuy(user);\r\n        lockedAmount += this.lockedForReward(user);\r\n    }\r\n\r\n    function getReleased(address user) external view returns (uint256 releasedAmount) {\r\n        releasedAmount += this.releasedForBuy(user);\r\n        releasedAmount += this.releasedForReward(user);\r\n    }\r\n\r\n    function lockedForBuy(address user) external view returns (uint256 lockAmount) {\r\n        uint startIndex = buyIndexStart[user];\r\n        uint endIndex = buyIndexEnd[user];\r\n        for (uint i=startIndex; i\u003cendIndex; i++) {\r\n            Lock memory lock = buyLocks[user][i];\r\n            lockAmount += lock.totalAmount - lock.releasedAmount;\r\n        }\r\n    }\r\n\r\n    function lockedForReward(address user) external view returns (uint256 lockAmount) {\r\n        uint startIndex = rewardIndexStart[user];\r\n        uint endIndex = rewardIndexEnd[user];\r\n        for (uint i=startIndex; i\u003cendIndex; i++) {\r\n            Lock memory lock = rewardLocks[user][i];\r\n            lockAmount += lock.totalAmount - lock.releasedAmount;\r\n        }\r\n    }\r\n\r\n    function releasedForBuy(address user) external view returns (uint256 releasedAmount) {\r\n        uint startIndex = buyIndexStart[user];\r\n        uint endIndex = buyIndexEnd[user];\r\n        for (uint i=startIndex; i\u003cendIndex; i++) {\r\n            Lock memory lock = buyLocks[user][i];\r\n            releasedAmount += lock.releasedAmount;\r\n        }\r\n    }\r\n\r\n    function releasedForReward(address user) external view returns (uint256 releasedAmount) {\r\n        uint startIndex = rewardIndexStart[user];\r\n        uint endIndex = rewardIndexEnd[user];\r\n        for (uint i=startIndex; i\u003cendIndex; i++) {\r\n            Lock memory lock = rewardLocks[user][i];\r\n            releasedAmount += lock.releasedAmount;\r\n        }\r\n    }\r\n\r\n    function claimForBuy(address user, uint size) external returns (uint256 availableAmount) {\r\n        uint startIndex = buyIndexStart[user];\r\n        uint nextIndex = startIndex;\r\n        uint end = size \u003e (buyIndexEnd[user] - startIndex) ? buyIndexEnd[user] : startIndex + size;\r\n        for (uint i=startIndex; i \u003c end; i++) {\r\n            Lock memory lock = buyLocks[user][i];\r\n\r\n            // 没到释放时间，后面所有的都没到时间，不用继续检查\r\n            if (block.timestamp \u003c lock.openDay + firstInterval) break;\r\n\r\n            // 初次释放数量，在第一次线性释放之前可以claim的数量\r\n            uint releaseDate = lock.openDay + firstInterval + releaseInterval;\r\n            uint firstAmount = lock.totalAmount * firstBuyReleasePercent / 1000;\r\n            if (block.timestamp \u003c releaseDate) {\r\n                availableAmount += firstAmount;\r\n                buyLocks[user][i].releasedAmount += firstAmount;\r\n                continue;\r\n            }\r\n\r\n            // 线性释放数量\r\n            uint releasedTimes = ((block.timestamp - releaseDate) / releaseInterval) + 1;\r\n            uint releasedPercent = directBuyReleasePercent + firstBuyReleasePercent + releasedTimes * lineBuyReleasePercent;\r\n            releasedPercent = releasedPercent \u003e 1000 ? 1000 : releasedPercent;\r\n            uint releaseAmount = ((lock.totalAmount * releasedPercent) / 1000) - lock.releasedAmount;\r\n            if (releasedPercent == 1000) {\r\n                delete buyLocks[user][i];\r\n                nextIndex = i+1;\r\n            } else if(releaseAmount \u003e 0) {\r\n                buyLocks[user][i].releasedAmount += releaseAmount;\r\n            }\r\n\r\n            availableAmount += releaseAmount;\r\n        }\r\n\r\n        if (startIndex != nextIndex) buyIndexStart[user] = nextIndex;\r\n        dsc.transfer(user, availableAmount);\r\n    }\r\n\r\n    function availableForBuy(address user) external view returns (uint256 availableAmount) {\r\n        uint startIndex = buyIndexStart[user];\r\n        uint endIndex = buyIndexEnd[user];\r\n        (uint directBuyPercent, uint firstBuyPercent, uint lineBuyPercent) =\r\n            (directBuyReleasePercent, firstBuyReleasePercent, lineBuyReleasePercent);\r\n        for (uint i=startIndex; i\u003cendIndex; i++) {\r\n            Lock memory lock = buyLocks[user][i];\r\n\r\n            // 没到释放时间，后面所有的都没到时间，不用继续检查\r\n            if (block.timestamp \u003c lock.openDay + firstInterval) break;\r\n\r\n            // 初次释放数量，在第一次线性释放之前可以claim的数量\r\n            uint releaseDate = lock.openDay + firstInterval + releaseInterval;\r\n            uint firstAmount = lock.totalAmount * firstBuyPercent / 1000;\r\n            if (block.timestamp \u003c releaseDate) {\r\n                availableAmount += firstAmount;\r\n                continue;\r\n            }\r\n\r\n            // 线性释放数量\r\n            uint releasedTimes = ((block.timestamp - releaseDate) / releaseInterval) + 1;\r\n            uint releasedPercent = directBuyPercent + firstBuyPercent + releasedTimes * lineBuyPercent;\r\n            releasedPercent = releasedPercent \u003e 1000 ? 1000 : releasedPercent;\r\n            availableAmount += ((lock.totalAmount * releasedPercent) / 1000) - lock.releasedAmount;\r\n        }\r\n    }\r\n\r\n    function claimForReward(address user, uint size) external returns (uint256 availableAmount) {\r\n        uint startIndex = rewardIndexStart[user];\r\n        uint nextIndex = startIndex;\r\n        uint interval = releaseInterval;\r\n        uint end = size \u003e (rewardIndexEnd[user] - startIndex) ? rewardIndexEnd[user] : startIndex + size;\r\n        for (uint i=startIndex; i \u003c end; i++) {\r\n            Lock memory lock = buyLocks[user][i];\r\n            if (lock.openDay == 0) break;\r\n\r\n            // 没到释放时间，后面所有的都没到时间，不用继续检查\r\n            if (block.timestamp \u003c lock.openDay + interval) break;\r\n\r\n            // 初次释放数量，在第一次线性释放之前可以claim的数量\r\n            uint releaseDate = lock.openDay + interval;\r\n\r\n            // 线性释放数量\r\n            uint releasedTimes = ((block.timestamp - releaseDate) / interval) + 1;\r\n            uint releasedPercent = releasedTimes * lineRewardReleasePercent;\r\n            releasedPercent = releasedPercent \u003e 1000 ? 1000 : releasedPercent;\r\n            uint releaseAmount = ((lock.totalAmount * releasedPercent) / 1000) - lock.releasedAmount;\r\n            if (releasedPercent == 1000) {\r\n                delete rewardLocks[user][i];\r\n                nextIndex = i+1;\r\n            } else if(releaseAmount \u003e 0) {\r\n                rewardLocks[user][i].releasedAmount += releaseAmount;\r\n            }\r\n\r\n            availableAmount += releaseAmount;\r\n        }\r\n\r\n        if (startIndex != nextIndex) rewardIndexStart[user] = nextIndex;\r\n        dsc.transfer(user, availableAmount);\r\n    }\r\n\r\n    function availableForReward(address user) external view returns (uint256 availableAmount) {\r\n        uint startIndex = rewardIndexStart[user];\r\n        uint endIndex = rewardIndexEnd[user];\r\n        uint interval = releaseInterval;\r\n        uint lineReleasePercent = lineRewardReleasePercent;\r\n        for (uint i=startIndex; i \u003c endIndex; i++) {\r\n            Lock memory lock = rewardLocks[user][i];\r\n\r\n            // 没到释放时间，后面所有的都没到时间，不用继续检查\r\n            if (block.timestamp \u003c lock.openDay + interval) break;\r\n\r\n            // 初次释放时间\r\n            uint releaseDate = lock.openDay + interval;\r\n\r\n            // 线性释放数量\r\n            uint releasedTimes = ((block.timestamp - releaseDate) / interval) + 1;\r\n            uint releasedPercent = releasedTimes * lineReleasePercent;\r\n            releasedPercent = releasedPercent \u003e 1000 ? 1000 : releasedPercent;\r\n            availableAmount += ((lock.totalAmount * releasedPercent) / 1000) - lock.releasedAmount;\r\n        }\r\n    }\r\n\r\n    function checkAddress(address addr) internal view returns (bool) {\r\n        return buyTotal[addr] \u003e minUSDCost \u0026\u0026 dsc.balanceOf(addr) \u003e minDSCHold;\r\n    }\r\n\r\n    function distributeUSD(address[] memory upNodes, uint usdAmount) internal {\r\n        // 先给直接上级分配 [5%]/[8%] USD\r\n        address father = upNodes[0];\r\n        if (address(0) != father \u0026\u0026 checkAddress(father)) {\r\n            if (buyTotal[father] \u003c rewardRank1) {\r\n                usd.transfer(father, usdAmount.mul(usdRewardPercent1 + upNodeUSDRewardPercent).div(1000));\r\n            } else if (buyTotal[father] \u003c rewardRank2) {\r\n                usd.transfer(father, usdAmount.mul(usdRewardPercent2 + upNodeUSDRewardPercent).div(1000));\r\n            } else if (buyTotal[father] \u003c rewardRank3) {\r\n                usd.transfer(father, usdAmount.mul(usdRewardPercent3 + upNodeUSDRewardPercent).div(1000));\r\n            } else {\r\n                usd.transfer(father, usdAmount.mul(usdRewardPercent4 + upNodeUSDRewardPercent).div(1000));\r\n            }\r\n        } else {\r\n            // 剩余的USD转入receiver\r\n            usd.transfer(receiver, usd.balanceOf(address(this)));\r\n            return;\r\n        }\r\n\r\n        // 给所有上级分配 [1%] USD, 当前地址check不通过，后面所有的上级奖励都不发放\r\n        uint reward = usdAmount.mul(upNodeUSDRewardPercent).div(1000);\r\n        for (uint i=1; i\u003cupNodes.length; i++) {\r\n            address upNode = upNodes[i];\r\n            if (address(0) != upNode \u0026\u0026 checkAddress(upNode)) {\r\n                usd.transfer(upNode, reward);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // 剩余的USD转入receiver\r\n        usd.transfer(receiver, usd.balanceOf(address(this)));\r\n    }\r\n\r\n    function getDSCAmountByUSD(uint usdAmount) external view returns (uint dscAmount) {\r\n        dscAmount = usdAmount.mul(priceBase).div(sellPrice);\r\n    }\r\n\r\n    function getDSCAmountByBNB(uint bnbAmount) external view returns (uint dscAmount) {\r\n        address weth = router.WETH();\r\n        address[] memory path = new address[](2);\r\n        path[0] = weth;\r\n        path[1] = address(usd);\r\n        uint[] memory amounts = router.getAmountsOut(bnbAmount, path);\r\n        return this.getDSCAmountByUSD(amounts[1]);\r\n    }\r\n\r\n    function distributeAndLockDSCForUser(address user, uint dscAmount) internal {\r\n        uint directRelease = dscAmount.mul(directBuyReleasePercent).div(1000);\r\n        Lock memory lock = Lock(block.timestamp, dscAmount, directRelease);\r\n        uint indexEnd = buyIndexEnd[user];\r\n        buyLocks[user][indexEnd] = lock;\r\n        buyIndexEnd[user]++;\r\n        dsc.transferFrom(sellPayer, address(this), dscAmount);\r\n        dsc.transfer(user, directRelease);\r\n    }\r\n\r\n    function lockDSCForUpNode(address father, uint costAmount) internal {\r\n        (uint start, uint end) = (rewardIndexStart[father], rewardIndexEnd[father]);\r\n        if (start != end) { // 相等则表示没有节点\r\n            Lock memory last = rewardLocks[father][end - 1];\r\n            if (last.openDay == block.timestamp % padInterval) {\r\n                rewardLocks[father][end - 1].totalAmount += costAmount;\r\n                return;\r\n            }\r\n        }\r\n\r\n        Lock memory lock = Lock(block.timestamp % padInterval, costAmount, 0);\r\n        rewardLocks[father][end] = lock;\r\n        rewardIndexEnd[father]++;\r\n    }\r\n\r\n    function distributeAndLockDSCForUpNode(address[] memory upNodes, uint dscAmount) internal {\r\n        uint costAmount;\r\n        // 先给直接上级分配 [5%]/[8%] DSC\r\n        address father = upNodes[0];\r\n        if (address(0) != father \u0026\u0026 checkAddress(father)) {\r\n            if (buyTotal[father] \u003c rewardRank1) {\r\n                costAmount = dscAmount.mul(dscRewardPercent1 + upNodeDSCRewardPercent).div(1000);\r\n            } else if (buyTotal[father] \u003c rewardRank2) {\r\n                costAmount = dscAmount.mul(dscRewardPercent2 + upNodeDSCRewardPercent).div(1000);\r\n            } else if (buyTotal[father] \u003c rewardRank3) {\r\n                costAmount = dscAmount.mul(dscRewardPercent3 + upNodeDSCRewardPercent).div(1000);\r\n            } else {\r\n                costAmount = dscAmount.mul(dscRewardPercent4 + upNodeDSCRewardPercent).div(1000);\r\n            }\r\n\r\n            lockDSCForUpNode(father, costAmount);\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        // 给所有上级分配 [1%] DSC\r\n        uint reward = dscAmount.mul(upNodeDSCRewardPercent).div(1000);\r\n        for (uint i=1; i\u003cupNodes.length; i++) {\r\n            address upNode = upNodes[i];\r\n            if (address(0) != upNode \u0026\u0026 checkAddress(upNode)) {\r\n                lockDSCForUpNode(upNode, reward);\r\n                costAmount += reward;\r\n            }\r\n        }\r\n\r\n        dsc.transferFrom(rewardPayer, address(this), costAmount);\r\n    }\r\n\r\n    receive() external payable {\r\n        // 先在DEX中将ETH换成USD\r\n        address weth = router.WETH();\r\n        address[] memory path = new address[](2);\r\n        path[0] = weth;\r\n        path[1] = address(usd);\r\n        router.swapExactETHForTokens{value: msg.value}\r\n            (1, path, address(this), block.timestamp + 600);\r\n        buy(msg.sender, usd.balanceOf(address(this)));\r\n    }\r\n\r\n    function timestamp() external view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    //增加一个紧急提现接口用于处理用户转错的币(只能提走ETH或者非DSC代币）\r\n    function claimStuckTokens(address token) external onlyOwner {\r\n        require(token != address(dsc), \"Cannot claim DSC tokens\");\r\n        if (token == address(0x0)) {\r\n            (bool success, ) = address(msg.sender).call{ value: address(this).balance }(\"\");\r\n            require(success, \"Unable to send value, may have reverted\");\r\n        } else {\r\n            IERC20 ERC20token = IERC20(token);\r\n            uint256 balance = ERC20token.balanceOf(address(this));\r\n            ERC20token.transfer(msg.sender, balance);\r\n        }\r\n    }\r\n\r\n    function a_getAvailable(address user) external view returns (string memory) {\r\n        uint availableAmount = this.getAvailable(user);\r\n        return Strings.toString(availableAmount, dsc.decimals());\r\n    }\r\n\r\n    function a_getLocked(address user) external view returns (string memory) {\r\n        uint256 lockedAmount = this.getLocked(user);\r\n        return Strings.toString(lockedAmount, dsc.decimals());\r\n    }\r\n\r\n    function a_getReleased(address user) external view returns (string memory) {\r\n        uint256 releasedAmount = this.getReleased(user);\r\n        return Strings.toString(releasedAmount, dsc.decimals());\r\n    }\r\n\r\n    function a_getBuyTotal(address user) external view returns (string memory) {\r\n        uint256 buyAmount = buyTotal[user];\r\n        return Strings.toString(buyAmount, usd.decimals());\r\n    }\r\n\r\n    function a_getLockedForBuy(address user) external view returns (string memory) {\r\n        uint256 lockAmount = this.lockedForBuy(user);\r\n        return Strings.toString(lockAmount, dsc.decimals());\r\n    }\r\n\r\n    function a_getLockedForReward(address user) external view returns (string memory) {\r\n        uint256 lockAmount = this.lockedForReward(user);\r\n        return Strings.toString(lockAmount, dsc.decimals());\r\n    }\r\n\r\n    function a_getReleasedForBuy(address user) external view returns (string memory) {\r\n        uint256 releasedAmount = this.releasedForBuy(user);\r\n        return Strings.toString(releasedAmount, dsc.decimals());\r\n    }\r\n\r\n    function a_getReleasedForReward(address user) external view returns (string memory) {\r\n        uint256 releasedAmount = this.releasedForReward(user);\r\n        return Strings.toString(releasedAmount, dsc.decimals());\r\n    }\r\n\r\n    function a_getAvailableForBuy(address user) external view returns (string memory) {\r\n        uint256 availableAmount = this.availableForBuy(user);\r\n        return Strings.toString(availableAmount, dsc.decimals());\r\n    }\r\n\r\n    function a_getAvailableForReward(address user) external view returns (string memory) {\r\n        uint256 availableAmount = this.availableForReward(user);\r\n        return Strings.toString(availableAmount, dsc.decimals());\r\n    }\r\n\r\n    function a_getDSCAmountByUSD(string memory usdString) external view returns (string memory) {\r\n        uint usdAmount = Strings.fromString(usdString, usd.decimals());\r\n        uint dscAmount = this.getDSCAmountByUSD(usdAmount);\r\n        return Strings.toString(dscAmount, dsc.decimals());\r\n    }\r\n\r\n    function a_getDSCAmountByBNB(string memory bnbString) external view returns (string memory) {\r\n        uint bnbAmount = Strings.fromString(bnbString, 18);\r\n        uint dscAmount = this.getDSCAmountByBNB(bnbAmount);\r\n        return Strings.toString(dscAmount, dsc.decimals());\r\n    }\r\n\r\n    function a_getPrice() external view returns (string memory) {\r\n        return Strings.toString(sellPrice, usd.decimals());\r\n    }\r\n\r\n    function a_setPrice(string memory priceString) external onlyOwner {\r\n        uint newPrice = Strings.fromString(priceString, usd.decimals());\r\n        sellPrice = newPrice;\r\n    }\r\n\r\n    function a_setMinUSDCost(string memory costString) external onlyOwner {\r\n        uint newCost = Strings.fromString(costString, usd.decimals());\r\n        minUSDCost = newCost;\r\n    }\r\n\r\n    function a_setMinDSCHold(string memory holdString) external onlyOwner {\r\n        uint newHold = Strings.fromString(holdString, dsc.decimals());\r\n        minDSCHold = newHold;\r\n    }\r\n\r\n    function a_getMinUSDCost() external view returns (string memory) {\r\n        return Strings.toString(minUSDCost, usd.decimals());\r\n    }\r\n\r\n    function a_getMinDSCHold() external view returns (string memory) {\r\n        return Strings.toString(minDSCHold, dsc.decimals());\r\n    }\r\n\r\n    function a_buyWithUSDT(string memory usdString) external {\r\n        uint usdAmount = Strings.fromString(usdString, usd.decimals());\r\n        return this.buyWithUSDT(usdAmount);\r\n    }\r\n}"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\r\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length \u003e 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n    unchecked {\r\n        z = x + y;\r\n        require(z \u003e= x, \u0027ds-math-add-overflow\u0027);\r\n    }\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require(x \u003e= y, \u0027ds-math-sub-underflow\u0027);\r\n        z = x - y;\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n    unchecked {\r\n        z = x * y;\r\n        require(y == 0 || z / y == x, \u0027ds-math-mul-overflow\u0027);\r\n    }\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0027ds-math-div-overflow\u0027);\r\n        return a / b;\r\n    }\r\n}"},"Strings.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function toString(uint256 value, uint8 decimals) internal pure returns (string memory) {\r\n        require(decimals \u003e 0 \u0026\u0026 decimals \u003c= 18, \"Invalid Decimals\");\r\n        string memory str = toString(value);\r\n        uint length = bytes(str).length; // 17\r\n        uint count;\r\n        uint dotIndex;\r\n        if (length \u003c= decimals) {//补0和 .\r\n            count = decimals + 2; // 19\r\n            dotIndex = 1;\r\n        } else {//补 .\r\n            count = length + 1;\r\n            dotIndex = length - decimals;\r\n        }\r\n\r\n        bytes memory buffer = new bytes(count);\r\n        uint left = length;\r\n        uint i = 0; //小数点前面的字符\r\n        for (; i \u003c dotIndex; i++) {\r\n            if (length \u003c= decimals) {//dotIndex == 1, 第一位直接为0\r\n                buffer[i] = bytes1(uint8(48));\r\n            } else {\r\n                buffer[i] = bytes(str)[i];\r\n                left--;\r\n            }\r\n        }\r\n\r\n        // 小数点\r\n        buffer[i++] = bytes1(uint8(46));\r\n\r\n        // 小数点后面\r\n        for (; i \u003c count; i++) {\r\n            if ((count - i) \u003e left) {\r\n                buffer[i] = bytes1(uint8(48));\r\n            } else {\r\n                buffer[i] = bytes(str)[length - left];\r\n                left--;\r\n            }\r\n        }\r\n\r\n        return string(buffer);\r\n    }\r\n\r\n    function fromString(string memory str, uint8 decimals) internal pure returns(uint256 value) {\r\n        uint dotIndex = bytes(str).length;\r\n        for (uint256 i = 0; i \u003c bytes(str).length; i++) {\r\n            if (uint8(bytes(str)[i]) == 46) {//找到小数点的位置\r\n                dotIndex = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(bytes(str).length - dotIndex \u003c decimals, \"Invalid str\");\r\n\r\n        for (uint256 i = 0; i \u003c dotIndex; i++) {\r\n            if ((uint8(bytes(str)[i]) - 48) \u003c 0 || (uint8(bytes(str)[i]) - 48) \u003e 9) {\r\n                revert(\"Invalid number\");\r\n            }\r\n\r\n            value += (uint8(bytes(str)[i]) - 48) * 10**(decimals + dotIndex - i - 1);\r\n        }\r\n\r\n        for (uint256 i = dotIndex + 1; i \u003c bytes(str).length; i++) {\r\n            if ((uint8(bytes(str)[i]) - 48) \u003c 0 || (uint8(bytes(str)[i]) - 48) \u003e 9) {\r\n                revert(\"Invalid number\");\r\n            }\r\n\r\n            if (uint8(bytes(str)[i]) != 48) {\r\n                value += (uint8(bytes(str)[i]) - 48) * 10 ** (decimals - (i - dotIndex));\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}"}}