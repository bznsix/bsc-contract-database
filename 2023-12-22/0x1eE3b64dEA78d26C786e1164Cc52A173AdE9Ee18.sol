{"AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\nimport \"./Ownable.sol\";\r\n\r\nabstract contract AccessControl is Ownable {\r\n  \r\n    mapping(address =\u003e bool) private _operators;\r\n\r\n    event SetOperator(address indexed add, bool value);\r\n\r\n    function setOperator(address _operator, bool _v) external onlyOwner {\r\n        _operators[_operator] = _v;\r\n        emit SetOperator(_operator, _v);\r\n    }\r\n\r\n    function isOperator(address _address) external view returns(bool){\r\n        return  _operators[_address];\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(_operators[msg.sender]);\r\n        _;\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @title ERC20 interface\r\n */\r\ninterface IERC20 {\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"Inscription.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.16;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./AccessControl.sol\";\r\n\r\ncontract Inscription is Context, AccessControl {\r\n\r\n    address private fundAddress;\r\n    address[] private minters;\r\n    mapping(address =\u003e uint256) minterIndex;\r\n\r\n    event Deploy(address indexed from, bool status, uint256 timestamp);\r\n    event BatchMint(address indexed from, uint256 amount, uint256 timestamp);\r\n\r\n    constructor(address _fundAddress) {\r\n        fundAddress = _fundAddress;\r\n        _addMinter(_fundAddress);\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function deploy(bytes calldata _data) external onlyOperator {\r\n        _addMinter(msg.sender);\r\n        (bool success, ) = msg.sender.call(_data);\r\n        \r\n        emit Deploy(msg.sender, success, block.timestamp);\r\n        \r\n    }\r\n\r\n    function mint(bytes calldata _data) external onlyOperator returns (bool) {\r\n        _addMinter(msg.sender);\r\n        (bool success, ) = msg.sender.call(_data);\r\n        require(success, \"EVM20: Inscription mint failure\");\r\n        return true;\r\n    }\r\n\r\n    function batchMint(bytes calldata _data, uint256 _count) external onlyOperator {\r\n        uint256 result;\r\n        _addMinter(msg.sender);\r\n        for (uint256 i = 0; i \u003c _count; i++) {\r\n            (bool success, ) = msg.sender.call(_data);\r\n            if(success) {\r\n                result ++;\r\n            }\r\n        }\r\n\r\n        emit BatchMint(msg.sender, result, block.timestamp);\r\n\r\n    }\r\n\r\n    function str2bytes(string memory _str) public pure returns(bytes memory) {\r\n        bytes memory inscription = bytes(_str);\r\n        return inscription;\r\n    }\r\n\r\n    function _addMinter(address adr) private {\r\n        uint256 size;\r\n        assembly {size := extcodesize(adr)}\r\n        if (size \u003e 0) {\r\n            return;\r\n        }\r\n        if (minterIndex[adr] == 0) {\r\n            if (0 == minters.length || minters[0] != adr) {\r\n                minterIndex[adr] = minters.length;\r\n                minters.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getMinterCount() public view returns(uint256) {\r\n        return minters.length;\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _addMinter(addr);\r\n    }\r\n\r\n    function claimBalance() external onlyOwner {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount, address to) external onlyOwner {\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./Context.sol\";\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"}}