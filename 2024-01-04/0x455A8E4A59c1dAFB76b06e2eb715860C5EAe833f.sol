{"CrowdWordDiamondContract (1).sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e=0.4.23 \u003c0.9.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ncontract CrowdWorldDiamond {\r\n    IERC20 public usdt;\r\n    struct DiamondUser {\r\n        uint id;\r\n        address referrer;\r\n        uint diamondBonus;\r\n        uint diamondLevelBonus;\r\n        uint totalEarn;\r\n        mapping(uint8 =\u003e bool) activeDiamond;\r\n        mapping(uint256 =\u003e uint[]) diamondpoolMatrix;\r\n    }\r\n\r\n     struct LevelIncomeReport {\r\n        uint fromid;\r\n        address fromaddress;\r\n        uint slot;\r\n        uint level;\r\n        uint amount;\r\n        uint timestamp;\r\n        uint types;\r\n    }\r\n\r\n    struct dpools {\r\n      uint id; // userID\r\n      uint wid; // autopoolID\r\n      address myAddress; // user address\r\n      uint currectID; // refe ID\r\n      address currectRefAddress; // refe address\r\n      uint id1; // user 1 \r\n      uint id2; // user 2\r\n      uint id3; // user 3\r\n    }\r\n    \r\n    mapping(address =\u003e DiamondUser) public DiamondUsers;\r\n    mapping(uint =\u003e address) public userIds;\r\n\r\n    mapping(uint =\u003e dpools) public Dpools;\r\n    mapping(uint =\u003e address) public diamondIds;\r\n    uint public diamondId = 1;\r\n\r\n    mapping(address =\u003e uint256) public diamondUplineBonus;\r\n\r\n    mapping(address =\u003e LevelIncomeReport[]) public LevelIncomeTransactions;\r\n    mapping(uint8 =\u003e mapping(uint256 =\u003e uint)) public x3vId_number_diamond;\r\n    mapping(uint8 =\u003e uint256) public x3CurrentvId_diamond;\r\n    mapping(uint8 =\u003e uint256) public x3Index_diamond; \r\n\r\n    \r\n    uint public lapsedIncome = 0 ether;\r\n    uint public diamondPackagePrice = 15 ether;\r\n    uint public uplinesComm = 1 ether;\r\n    address public owner;\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the contract owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address ownerAddress, IERC20 _usdtAddress) public {\r\n        usdt = _usdtAddress;\r\n        owner = ownerAddress;\r\n        DiamondUser memory user = DiamondUser({\r\n            id: 1,\r\n            referrer: address(0),\r\n            diamondBonus: 0,\r\n            diamondLevelBonus: 0,\r\n            totalEarn: 0\r\n        }); \r\n        DiamondUsers[ownerAddress] = user;\r\n        userIds[1] = ownerAddress;\r\n        \r\n        x3vId_number_diamond[1][1]=diamondId;\r\n        x3Index_diamond[1]=1;\r\n        x3CurrentvId_diamond[1]=1;\r\n\r\n        DiamondUsers[ownerAddress].diamondpoolMatrix[1].push(diamondId);\r\n        dpools memory dpool = dpools({\r\n            id: 1, // userID\r\n            wid: diamondId, // autopoolID\r\n            myAddress: ownerAddress, // user address\r\n            currectID: 0, // refe ID\r\n            currectRefAddress: address(0), // refe address\r\n            id1: 0, // user 1 \r\n            id2: 0, // user 2\r\n            id3: 0 // user 3\r\n        });\r\n        diamondIds[diamondId] = ownerAddress;\r\n        Dpools[diamondId] = dpool;\r\n        diamondId++;\r\n        \r\n        DiamondUsers[ownerAddress].activeDiamond[1] = true;\r\n    }\r\n    \r\n    function buyDiamondPackage(address referrerAddress,uint256 amount,uint id) external {\r\n        require(id != 0, \"ID cannot be zero.\");\r\n        require(id \u003e 0, \"ID cannot be zero.\");\r\n        require(!DiamondUsers[msg.sender].activeDiamond[1], \"Already activated.\");\r\n        require(amount == diamondPackagePrice, \"Package cost not valid\");        \r\n        require(usdt.allowance(msg.sender, address(this)) \u003e= amount, \"Insufficient allowance\");\r\n        require(usdt.transferFrom(msg.sender, address(this), amount), \"Transfer failed\");\r\n        \r\n        DiamondUser memory user = DiamondUser({\r\n            id: id, \r\n            referrer: referrerAddress,\r\n            diamondBonus: 0,\r\n            diamondLevelBonus: 0,\r\n            totalEarn: 0\r\n        });\r\n        DiamondUsers[msg.sender] = user;\r\n        userIds[id] = msg.sender;\r\n        DiamondUsers[msg.sender].activeDiamond[1] = true;\r\n        uint freex3AutoPoolReferrer_diamond = findFreex3AutoPoolReferrer_diamond();\r\n        updateX3AutoPoolReferrer_diamond(msg.sender, freex3AutoPoolReferrer_diamond);\r\n    }\r\n\r\n    function levelIncomeDistribute(address userAddress, uint referrerId, uint8 level, uint8 types) internal {\r\n        address user;\r\n        uint currentRecipient;\r\n        uint myID;\r\n        address currentRecipient_1;\r\n        uint recipient = referrerId;\r\n\r\n        for (uint8 i = 1; i \u003c= 15; i++) {\r\n            if (types == 2) {\r\n                currentRecipient = recipient;\r\n                user = userAddress;\r\n                currentRecipient_1 = Dpools[currentRecipient].myAddress;\r\n                myID = currentRecipient;\r\n            }\r\n\r\n            if (currentRecipient_1 != address(0) \u0026\u0026 currentRecipient_1 != address(0x0)) {\r\n                    LevelIncomeReport memory newLevelReport = LevelIncomeReport({\r\n                        fromid: DiamondUsers[user].id,\r\n                        fromaddress: user,\r\n                        slot: level,\r\n                        level: i,\r\n                        amount: uplinesComm,\r\n                        timestamp: block.timestamp,\r\n                        types: types\r\n                    });\r\n\r\n                    LevelIncomeTransactions[currentRecipient_1].push(newLevelReport);\r\n                    transferAmount(currentRecipient_1, uplinesComm, 2);\r\n                \r\n            } else {\r\n                transferAmount(owner, uplinesComm, 0);\r\n            }\r\n\r\n            if(types == 2) {\r\n                recipient = Dpools[myID].currectID;\r\n            }\r\n        }\r\n    }\r\n\r\n     // Diamondpool payout code start //\r\n    function updateX3AutoPoolReferrer_diamond(address userAddress, uint referrerId) private{\r\n        uint256 newIndex=x3Index_diamond[1]+1;\r\n        x3vId_number_diamond[1][newIndex]=diamondId;\r\n        x3Index_diamond[1]=newIndex;\r\n        uint256 diamondpoolincome=diamondPackagePrice;\r\n\r\n        DiamondUsers[userAddress].diamondpoolMatrix[1].push(diamondId);\r\n        dpools memory dpool = dpools({\r\n            id: DiamondUsers[userAddress].id, // userID\r\n            wid: diamondId, // autopoolID\r\n            myAddress: userAddress, // user address\r\n            currectID: Dpools[referrerId].wid, // refe ID\r\n            currectRefAddress: Dpools[referrerId].myAddress, // // refe address\r\n            id1: 0, // user 1 \r\n            id2: 0, // user 2\r\n            id3: 0 // user 3\r\n        });\r\n        diamondIds[diamondId] = userAddress;\r\n        Dpools[diamondId] = dpool;        \r\n\r\n        if(Dpools[referrerId].id1==0){\r\n          Dpools[referrerId].id1 = diamondId;\r\n\r\n          uint256 sponsorUplineIncome = (diamondpoolincome*20)/100;  \r\n          if (DiamondUsers[userAddress].referrer != address(0) \u0026\u0026 DiamondUsers[userAddress].referrer != address(0x0)) {\r\n            transferAmount(DiamondUsers[userAddress].referrer, sponsorUplineIncome, 3); \r\n          }\r\n          else{\r\n            transferAmount(owner, sponsorUplineIncome, 0);\r\n          }\r\n\r\n          uint256 sponsorIncome = (diamondpoolincome*80)/100;   \r\n          transferAmount(Dpools[referrerId].myAddress, sponsorIncome, 1);\r\n          diamondId++;  \r\n        }\r\n        else if(Dpools[referrerId].id2==0){\r\n          Dpools[referrerId].id2 = diamondId;\r\n          uint upline = Dpools[Dpools[referrerId].currectID].wid;\r\n          levelIncomeDistribute(userAddress,upline,1,2);\r\n          diamondId++;   \r\n        }\r\n        else if(Dpools[referrerId].id3==0){\r\n          Dpools[referrerId].id3 = diamondId;  \r\n          diamondId++;\r\n          x3CurrentvId_diamond[1]=x3CurrentvId_diamond[1]+1;     \r\n          uint freeAutoPoolReferrer = findFreex3AutoPoolReferrer_diamond();\r\n          updateX3AutoPoolReferrer_diamond(Dpools[referrerId].myAddress, freeAutoPoolReferrer);\r\n        }   \r\n    }  \r\n\r\n    function findFreex3AutoPoolReferrer_diamond() public view returns(uint){\r\n            uint256 id=x3CurrentvId_diamond[1];\r\n            return x3vId_number_diamond[1][id];\r\n    } \r\n\r\n    function usersDiamondAutoPool(address userAddress, uint8 level) public view returns (uint, uint[] memory) {\r\n        return (DiamondUsers[userAddress].diamondpoolMatrix[level].length,DiamondUsers[userAddress].diamondpoolMatrix[level]);\r\n    }\r\n    // Diamondpool payout code end //\r\n   \r\n    function usersactiveDiamond(address userAddress, uint8 level) public view returns(bool) {\r\n        return DiamondUsers[userAddress].activeDiamond[level];\r\n    }\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (DiamondUsers[user].id != 0);\r\n    }\r\n\r\n    function transferAmount(address receiver, uint dividend, uint types) private {\r\n        if (types == 1) {\r\n            DiamondUsers[receiver].diamondBonus += dividend;\r\n        }\r\n        else if (types == 2) {\r\n            DiamondUsers[receiver].diamondLevelBonus += dividend;\r\n        } \r\n        else if (types == 3) {\r\n            DiamondUsers[receiver].diamondBonus += dividend;\r\n            diamondUplineBonus[receiver] += dividend;\r\n        }\r\n        else {\r\n           lapsedIncome += dividend;\r\n        }\r\n\r\n        DiamondUsers[receiver].totalEarn += dividend;\r\n        require(usdt.transfer(receiver, dividend), \"USDT transfer failed\");\r\n    }\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e=0.4.23 \u003c0.9.0;\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n"}}