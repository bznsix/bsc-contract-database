// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract ChangeQJK {

//    address public QJK_old = 0x75637FCA457BE3A4b702cEe31cA59Ce4a23351A7;
    address public QJK_new;
    address public DeadAddress = address(0xdead);

    uint256 public burnTime = 1705666080; // 2024-01-19 20:08:00

    bool public flag = false;
    bool public flag2 = false;
    //如果到了时间还没换，转点bnb到这个合约余下的qjk就直接打入黑洞
    receive() external payable {
//        if (block.timestamp > burnTime) {
//            IERC20(QJK_new).transfer(DeadAddress, IERC20(QJK_new).balanceOf(address(this)));
////            IERC20(QJK_old).transfer(DeadAddress, IERC20(QJK_old).balanceOf(address(this)));
//        }
    }

//    function changeNow() external {
////        uint256 amount = IERC20(QJK_old).balanceOf(msg.sender);
////        IERC20(QJK_old).transferFrom(msg.sender, DeadAddress, amount);
//        IERC20(QJK_new).transfer(msg.sender, amount * 1031927835 / 1000000000);// 去掉3个点的滑点
//    }

    function toOldLp() external {

        require(flag == false, "one time");//只能发放一次

        address[15] memory to = [0xFE36f051D7b10d5D31832f93d11c12e2374Ed948, 0x867f77741C518b5A1112756C853da6E049E979F2, 0xfBB871744B3807cbA6bB47FE2c176C0cA4795810, 0x9b08e7CE96cC8e8fc41e85D6F6111f1C07Fef311, 0x7fB121b14d9711a6649fD8BE8C807d044Dfd407a, 0x289e6c18a5935Cc825a7C3FAb9d36746c5e8cc64, 0x3cf794FFDf0193084DF9BfefaFeCf58C30deb245, 0x616fC87241681F36414CCEAEf3A1207Cf2f18d70, 0x29a1165E793F4fC75f6C4c5eE03682eF76187Dda, 0xC3c0e1A4ebCc36Bc65aB9D64eC3789D646c30003, 0x4c7375c9291b7214ff7d20884Bccd03A52ec1520, 0x98A828135a61B91F9249a83f5AcbC09683F1fd34, 0xccE9C1CDD614A7cD2f1Aec59F30376f7e612848f, 0xAe36947dd0564b8c1e19A1c20E723857c96D220c, 0xfDC3730aE6Ead4727cbAC8DA4C69272a16De28CF];

        uint256[15] memory amount = [uint256(2753791380), uint256(413848035), uint256(392924065), uint256(322552652), uint256(127833789), uint256(78420615), uint256(63657526), uint256(49513707), uint256(48499999), uint256(45831483), uint256(36683303), uint256(28936339), uint256(9991000), uint256(9691270), uint256(3712230)];

        for (uint256 i = 0; i < to.length; i++) {
            uint256 a = amount[i] * (10 ** 18) * 1031927835 / 1000000000;//补回之前加池子3个点
            a = a * 1031927835 / 1000000000;//去掉这次兑换3个点
            IERC20(QJK_new).transfer(to[i], a);
        }

        flag = true;
    }

    function toOldLp2() external {

        require(flag2 == false, "one time");//只能发放一次

        address[146] memory to = [0x45A9655F50f76f863FbFc56041FFfeDc6009FB72,0x71b40cb2d519b4d62E5C604c586b9568cb265e40,0xFE36f051D7b10d5D31832f93d11c12e2374Ed948,0x75637FCA457BE3A4b702cEe31cA59Ce4a23351A7,0x110f6919818B12C88727CFa4505941aD77f4d507,0x8edE45ba4590cB5200D81a9b4a7a83138a780c48,0xD9378e9e6A1ce0E632EbC475cd22e8F91Ba0faF5,0xf68B83ff7F01E06cFDAdDf4cF70247A298888888,0x7fB121b14d9711a6649fD8BE8C807d044Dfd407a,0xbed7414Ae32a375F5d4466871CeDA0B4CC21Ef33,0xF2CAf77e7a2a81e1890a9e46086dB8cD8ef661Df,0x98AaAF1199c8e05910b43Ed86D3b42FAb69eb7d0,0x474dFf2530Af93efEA85e6F2361D30c1E81212Cc,0xe7B694993Ea7779Cc1A2D3fAFF25A10331B60E73,0x11570a24FC4d7893045867E407843FfC262922Cf,0xc991d45367FE8B474760C6D1c03A9131EdcF208E,0x045271944D2C17D63B5738AFF75C45829Cb5bE87,0xd583281dE2e5B74B43cD9542f0e55cEF058bFbd2,0x0Dd12980cF4119718Bf29f71A5a71F5c5D936789,0x0928443bf9AF2159560389d5DeB25FF948796C1b,0x616fC87241681F36414CCEAEf3A1207Cf2f18d70,0xA00F3925EB02a0deDc9d0762053ab19D7ec13023,0x867f77741C518b5A1112756C853da6E049E979F2,0x02387850686de6e9a9FA7a165D5B4f6cecB132FA,0x81b6d565D49AD3480EC9267d3Da11668C8ec51Fb,0x94D78BF8cB34CF8d70Bf39862B62205971585b2A,0xfE4BD5E5E26e4946Eb211436c9a0617B2f7B8C5D,0xfDC3730aE6Ead4727cbAC8DA4C69272a16De28CF,0xF71088E788aB346C9fB92d8632719426784E7010,0xcD960506846F145a040901190f8Fc2531DabBf47,0x5D5525e17E3ee5F390CCfbC2710DF98F137fAF61,0x9C109A47f1f3Cc6CeeF71F81a8aE278beb6Cb61B,0xEb7B8f48af01579ADFD4Eb5dc742ea9C9253F959,0x61D4c6a572C598B5d7E39ca9b5444Ed3bA85B572,0xB33c1444E4cD190f7b7125d055B182E0D5457173,0xfBB871744B3807cbA6bB47FE2c176C0cA4795810,0x5464Cb20108bc6EE10c72ad4cCD0BCdf334f4D8a,0x9b08e7CE96cC8e8fc41e85D6F6111f1C07Fef311,0xcB89cFD0A88a3D1039d2bB6fd7f130A268Ec9907,0x2002D21b9bd4847e6350af914E85Ae35fdFC2778,0xDf2Ca07238B1E2f7A5E9952044590eFeFa02b709,0x0d2646f628629D1BB7a949D42F69d4f5c806b1c7,0x362B87Dfa7ee7c9B9A34706499e90880E3A9Af57,0x5Bec33fEaD43e0e7243F2E4054B8dde53De73e79,0xC5dD1EA992dF8b0daC1f1FbC5FCF81Bde675aB89,0xAe36947dd0564b8c1e19A1c20E723857c96D220c,0x0315AFD8aD415f1a09057d6111306670eD333C58,0x49507Ab21f3a0f3338FEb563f119dB36365e1E73,0x7A211230f8F012E733759726524FFE3BF55d555D,0x745e1CbB09DF405C1B378749b8302080bfBeD457,0x93FE715603DEb05F7f218aeb221872bb31Ad3425,0x63C092cF69F666311538DC206A5aB8Af4F364599,0x4811b049606fa271C880610D51E316A83cbBb094,0x8c8e0dbB264d7df8Cc5054Cd30928Be1B620CbD3,0xA6533e5612C893bec32977fbd3892825eD68D505,0x0099FdE6416EB144BF6245A367621102f5E73E06,0xDFe25d3b22Dd8f518E472Cc7824fD25342a475C0,0x1a79C8d8183Ee87C5F47180F8Fa42C360A9769F4,0xDC56FCDA6060c9DC18e43671b8d4D94b6cF430be,0x6fbb80fF7f9C833ECA74A90F10699acF9520537E,0x4c7375c9291b7214ff7d20884Bccd03A52ec1520,0xE7aF9D551503819A0ea4B84a1Dea97a046E333dd,0x2055814341842eb9f89A2EE90Ff0790CB2b7D812,0x3E552558df4c06dA5A28053aDae208De11c41Bdd,0x04FeC502B7cadD9541b482dA97297fC2e6b9f8Ed,0xC9694e9cAE0618e3578918184509e47e87a9372e,0x114108f0630c4f9cfeadd97476B624fE025948c3,0x8037CE4aD6c0548AdC4947EE501F805813Dc17c0,0x75dC8aFd73100EE99de6cf73aB9150df4aD09EB6,0xc94F17aE40f18AF4424bcbaf30A1ebB7d71a3537,0x4EE512FfC5813369ec9E532368aE846C65506a66,0xf7eCC7Ab7ff00417ea4786357C33E49b17b80000,0x02f430D11aE6953498f746a66d32952E1Ea2cb8F,0x826632597609Fd5C6Dfcb6BbfcfF100F8Ecf74C4,0x878a8f870Df0456239CEE9122b0E9D2878866275,0x214Ff7483e2781f77cD06a535842b335FA16D065,0xeDE7342E5Ae3cb20Af1c633E3a2b5c95dE177Ea7,0x3F0b9dcF016A889711A39eE221b134598aAF78Cd,0x46b74D32f43b464476e7331447a6D50B2c903375,0x02463bA58b742E4aF90DDD0754716466263202e4,0x8bE559e2Ff26cf2631212F5149585334E687D63E,0xf9eA640521E3D6F4786dC480cCA3Ad51C60099cf,0x43888D64A9cc1708A6D925Ee34C5058F58d9F82c,0xA4eE0CdBB98acd8618cc564bd8cF122a58EAa698,0x8764F9966aaa3DB0d9115246e696a0ff3D782D17,0x4C70b0943458aAa73424775E4ddfc0eF58E683ce,0xF71a15c1FeB98e51Cd9f1A8e7C4ac7450Da073eb,0xEB559A4fF7Cac4dd5abeFc1c5AdA025947E3FBC1,0x67cD140CB57BA79513DC5eeA74145dE8766dB748,0x651Bf33df0D24b6755192fa8d6bB35Ce0E276a18,0x5b5723142BB6Fa3F007d32257470B6df64134939,0x0207d3FBBa7924C1199e68D7391A48ae2080AE4E,0xE279EE6845A3d8E047cb4314893C0C367c27422A,0xe6e075087ef3B8bd4426155466245a6D157ca5B2,0x8bfA4420B27c12194142B17dF0AbAa0B912D0844,0x311A585b364089372E16FEC3C113F4295A36FD52,0x46f48e523d52e840a1981471C721D6CBAe7FCbfA,0x746B6bD5C616fE30192989CD3Fb7856da305ffaB,0x68d6E2538A53e457cea4a121059437dE2C190DF3,0x235eaFf37FabE743C0C43C42c79E1000eE1E8a03,0x9eA2B0e71f7031A641dCe15AF0b38464F341314b,0xbc240F683254A09f647449d5d24B4F8e17E81d36,0xAd4C9fd913786658655B26B2f5E4DCd84B6d1BD0,0xF026c1885820222faC4C4adC7130BE96E840b7Bb,0x2774e6C7CDF8a323ed2FBb45773b8e397BE96719,0x493507dA45196264ad2E74C798A7C25B629D9343,0x547583B70a04A446545BBf1ff81F17424CaF27af,0xC0C81F5Fd696539C06Ab3a0517c5e9FB323C309C,0x4Dc59707Ff6CD5b4F7fb580cC12C5115FCD0a03D,0x4B46B437537E52598993D69fDC081EF5ba5f7eC8,0xccE9C1CDD614A7cD2f1Aec59F30376f7e612848f,0x29a1165E793F4fC75f6C4c5eE03682eF76187Dda,0xea74E517987C60cA6c84b3106edEED5bf5Dd5631,0xac1b47F9c6F06213349a869adfDf5898FDAA6F27,0xaAFD086Ddf280960FF2Ad2B7741C00d8dB03287d,0x98A828135a61B91F9249a83f5AcbC09683F1fd34,0xAb0ACcC4737eEE3AA71912a3a426ec0F42f38Ba7,0x6317206278e2eA8eb894Eba814d9e2D8b5518d2d,0xEdd9EB04d1C70cd5aE651DAA9b4DDE3883B19379,0x94d5F9c7C576162c60077Af177Ecb423B9F9DED8,0x68A96A67a6bd961548c51E6fE25E85ef137c675F,0x770497166bC3C224E883dD50b0878609699276A9,0x92e40B110625729134B313FA9d030A32643D5e06,0xd928ed9f95f0889D5611171D24bf293fF0fF56B6,0xd9df211b66e4746a217E93281a9Cc44Ad4f1111c,0x8b8479075b49181B7A0897Baf2ec63f8366824B4,0x77E3C56449AFD9329D11Ead7e84eeBb9A816078D,0x62c3558C0cC7BdC86ba6a1c83330F6a8E188B0D4,0x83eA61aDB3F1C8bf4ce51b21699531aD6A2EcAad,0x3cf794FFDf0193084DF9BfefaFeCf58C30deb245,0x98269450d3b28Bf9C19012F936d1aE5cd63399CF,0xA34246FdeD7bC254380043B71FADda84A8393EB5,0x3CD836c0cbaE2716dCD46cAC08c230958d3280FD,0x7DdfccFC7dD738A4aeD2F5f5363f1215670128ab,0xba37d5C00a982340E54BF1bE9dc0428DCCF1806b,0xff6A0615444f29Ab48527A61786f319F81939384,0xd4BD4669f2C161e13dD81Fc647dB7153a5326030,0x80DCEd678b4321b08BF88A506897c294C3A6EA15,0xB9b03D173f8DB43a8A9794CB4c89317208f755EB,0xfEf3142dA86A36942B76e75C20085CcCBF483C89,0x9Bb42D4d63D7bC0cab9028BD3C0e9003685f6507,0xFc461070aa8D070F33778fBef0aeF0dbF8d9D87d,0xc7aCB7DAf91933cAC5f4BCEC34B602B1CF30460F,0x9d0D01205D26B8Be8431a47727A5A5EF35e5e2a9,0xBc6F8C81ccBA9a710a16adfb426c4e6Aa870D909,0x8da08B067083281e0713B55BeDFB34d9C27C1b0f];
        uint256[146] memory amount =[uint256(3649742863), uint256(1771109520), uint256(1593281433), uint256(1475515823), uint256(1408428497), uint256(1047932938), uint256(952632612), uint256(792441985), uint256(775192676), uint256(758351710), uint256(699615140), uint256(679022470), uint256(673666825), uint256(669321429), uint256(604598106), uint256(586468801), uint256(586372017), uint256(556968432), uint256(537381932), uint256(528764093), uint256(504348976), uint256(494020399), uint256(485834526), uint256(480065443), uint256(471515878), uint256(455260389), uint256(418681962), uint256(360130892), uint256(348844183), uint256(330837126), uint256(323712145), uint256(317479736), uint256(309322582), uint256(305606324), uint256(284418188), uint256(274045975), uint256(269898610), uint256(267471492), uint256(260187939), uint256(259528561), uint256(256454293), uint256(255022995), uint256(248611489), uint256(231675773), uint256(218356900), uint256(214353922), uint256(206146782), uint256(200000001), uint256(199757356), uint256(196406846), uint256(187400063), uint256(181587476), uint256(179933719), uint256(176177866), uint256(175514208), uint256(163723237), uint256(163101750), uint256(157310608), uint256(137530851), uint256(135726284), uint256(133170471), uint256(116400000), uint256(115803352), uint256(107924220), uint256(105345730), uint256(104391178), uint256(103411068), uint256(101616762), uint256(101483659), uint256(101443239), uint256(96647149), uint256(96043758), uint256(92751423), uint256(92129015), uint256(92046634), uint256(83811030), uint256(83483995), uint256(81058686), uint256(77852228), uint256(72191392), uint256(68856998), uint256(68855520), uint256(62262004), uint256(61462924), uint256(60999802), uint256(60721371), uint256(60647139), uint256(58732459), uint256(58219951), uint256(54788759), uint256(51254309), uint256(48960898), uint256(45635218), uint256(40076740), uint256(38312700), uint256(35128037), uint256(32363877), uint256(29100000), uint256(28726896), uint256(28397035), uint256(24818329), uint256(24670871), uint256(19837449), uint256(18524941), uint256(15760097), uint256(15566424), uint256(13777923), uint256(12319917), uint256(11287986), uint256(9446542), uint256(9111071), uint256(8200000), uint256(7462132), uint256(3407428), uint256(2901268), uint256(2873883), uint256(2654123), uint256(2179556), uint256(1802698), uint256(1797343), uint256(1456895), uint256(1456895), uint256(1359895), uint256(1165895), uint256(1165895), uint256(1068895), uint256(874895), uint256(709995), uint256(680895), uint256(668479), uint256(292895), uint256(197776), uint256(149897), uint256(98895), uint256(98895), uint256(98895), uint256(98895), uint256(98895), uint256(74252), uint256(49448), uint256(49448), uint256(49448), uint256(44850), uint256(9700), uint256(7011), uint256(6014)];
        for (uint256 i = 0; i < to.length; i++) {
            uint256 a = amount[i] * (10 ** 18) * 1031927835 / 1000000000;//补回之前加池子3个点
            a = a * 1031927835 / 1000000000;//去掉这次兑换3个点
            IERC20(QJK_new).transfer(to[i], a);
        }

        flag2 = true;

        IERC20(QJK_new).transfer(DeadAddress, IERC20(QJK_new).balanceOf(address(this)));
    }



    function setQJK_new(address _QJK_new) external {
        if (QJK_new == address(0)) {
            QJK_new = _QJK_new;

        }

    }

}
