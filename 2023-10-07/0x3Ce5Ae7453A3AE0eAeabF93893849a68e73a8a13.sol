{"lib.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BaseMath {\n    uint constant public DECIMAL_PRECISION = 1e18;\n}\n/**\n * Based on OpenZeppelin\u0027s SafeMath:\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\n *\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor ()  {\n        _owner = msg.sender;\n\n        emit OwnershipTransferred(address(0), msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     *\n     * NOTE: This function is not safe, as it doesn\u001at check owner is calling it.\n     * Make sure you check it before calling it.\n     */\n    function _renounceOwnership() internal {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success,) = recipient.call{value : amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value : value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n    unchecked {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n        uint256 newAllowance = oldAllowance - value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract CheckContract {\n    /**\n     * Check that the account is an already deployed non-destroyed contract.\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\n     */\n    function checkContract(address _account) internal view {\n        require(_account != address(0), \"Account cannot be zero address\");\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(_account) }\n        require(size \u003e 0, \"Account code size cannot be zero\");\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n/**\n * @title Helps contracts guard agains rentrancy attacks.\n * @author Remco Bloemen\n * @notice If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /**\n   * @dev We use a single lock for the whole contract.\n   */\n  bool private rentrancy_lock = false;\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * @notice If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one nonReentrant function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and a `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    require(!rentrancy_lock);\n    rentrancy_lock = true;\n    _;\n    rentrancy_lock = false;\n  }\n\n}\n"},"StakingPool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./lib.sol\";\n\ninterface LockToken {\n    struct LockRecord {\n        address user;\n        uint256 tokenAmount;\n        uint256 lockTokenAmount;\n        uint256 lockBlockNumber;\n        uint256 unlockBlockNumber;\n        bool unlocked;\n    }\n    function denominator() external view returns(uint256);\n    function stakeTokenRatio() external view returns(uint256);\n    function totalLockTokenAmount() external view returns(uint256 _totalLockTokenAmount);\n    function getUserAllStakedToken(address _user) external view returns (uint256 _tokenAmount, uint256 _lockTokenAmount);\n    function getLockRecord(uint256 _id) view external returns (address _user, uint256 _tokenAmount,\n    uint256 _lockTokenAmount, uint256 _lockBlockNumber, uint256 _unlockBlockNumber, bool _unlocked);\n    function lock(address _forUser, uint256 _amount, uint256 _lockTokenBlockNumber) external returns (uint256 _id) ;\n    function unlock(address _forUser,uint256 _lockRecordId) external;\n    function forceUnlockAll(uint256 _fromLockRecordId, uint256 _toLockRecordId) external;\n    function forceUnlock(uint256 _lockRecordId) external;\n    function stake(address _forUser, uint256 _tokenAmount) external;\n    function unstake(address _forUser, uint256 _tokenAmount) external;\n}\n\ncontract StakingPool is Ownable, CheckContract, BaseMath, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    uint256 public constant REWARD_PRECISION = 1e18;\n    IERC20 public token;\n    IERC20 public lockToken;\n    LockToken public lockContract;\n    uint256 public startBlock;\n    uint256 public minimumLockAmount;\n\n    mapping(IERC20 =\u003e uint256) public totalRewards;\n    // the total rewards of tokens for per stake\n    mapping(IERC20 =\u003e uint256) public totalRewardsPerStaked;\n    mapping(IERC20 =\u003e bool) public isRewardTokenMap;\n\n    // all the tokens being reward\n    IERC20[] public rewardTokens;\n    mapping(address =\u003e mapping (uint256 =\u003e bool)) public userLockId;\n    mapping(address =\u003e mapping(IERC20 =\u003e uint256)) public userRewardSnapshots;\n\n    // --- Events ---\n    event LockTokenSet(IERC20 _lockToken);\n    event TokenSet(IERC20 _token);\n    event LockContractSet(LockToken _lockToken);\n    event StartBlockSet(uint256 _startBlock);\n    event AdminSet(address _account, bool _isAdmin);\n    event MinimumLockQuantitySet(uint256 _minimumLockAmount);\n    event Restart();\n    event StakeChanged(address _staker, uint256 _newStake);\n    event HarvestAll(address _staker);\n    event Harvest(address _staker, IERC20 _tokenAddress, uint256 _tokenReward);\n    event RewardUpdated(IERC20 _rewardtokenAddress, uint256 _reward, uint256 _tokenReward, uint256 addedTokenRewardPerLockToken);\n    event totalLockTokenUpdated(uint256 _totalLockToken);\n    event StakerSnapshotsUpdated(address _staker, IERC20 _rewardToken, uint256 _reward);\n    event EmergencyStop(address _user, address _to);\n    event UnstakeWithoutReward(address _user, uint256 _lockTokenAmount);\n    event UnlockWithoutReward(address _user, uint256 _lockId);\n    event AddRewardToken(IERC20 _newToken);\n    event DelRewardToken(IERC20 _delToken);\n\n    bool public stopped;\n    modifier notStopped virtual {\n        require(!stopped, \"StakingPool: this pool is stopped!\");\n        _;\n    }\n\n    mapping(address =\u003e bool) public admins;\n    modifier onlyAdmin virtual {\n        require(admins[msg.sender] || msg.sender == owner());\n        _;\n    }\n\n    modifier started virtual {\n        require(startBlock \u003c= block.number, \"StakingPool: Pool not start!\");\n        _;\n    }\n\n    constructor(uint256 _startBlock, uint256 _minimumLockAmount)  {\n        startBlock = _startBlock;\n        minimumLockAmount = _minimumLockAmount;\n        admins[msg.sender] = true;\n        emit AdminSet(msg.sender, true);\n    }\n\n    function setStartBlock(uint256 _startBlock) external onlyOwner{\n        startBlock = _startBlock;\n        emit StartBlockSet(_startBlock);\n    }\n\n    function setAddresses\n    (\n        IERC20 _token,\n        LockToken _lockContract,\n        IERC20 _lockToken\n    )\n        external\n        onlyOwner\n\n    {\n        checkContract(address(_token));\n        checkContract(address(_lockContract));\n        checkContract(address(_lockToken));\n        token = _token;\n        lockContract = _lockContract;\n        lockToken = _lockToken;\n        emit LockTokenSet(_lockToken);\n        emit TokenSet(_token);\n        emit LockContractSet(_lockContract);\n    }\n\n    function setAdmin(address _account, bool _isAdmin) external onlyOwner {\n        admins[_account] = _isAdmin;\n        emit AdminSet(_account, _isAdmin);\n    }\n\n    function setMinimumLockQuantity(uint256 _minimumLockAmount) external onlyOwner {\n        minimumLockAmount = _minimumLockAmount;\n        emit MinimumLockQuantitySet(_minimumLockAmount);\n    }\n\n    function lock(address _forUser, uint256 _amount, uint256 _lockTokenBlockNumber) external started notStopped {\n        _requireNonZeroAmount(_amount);\n        require(_forUser != address(0), \u0027StakingPool : _forUser can not be Zero\u0027);\n        if (!admins[msg.sender]){\n            require(_amount \u003e= minimumLockAmount, \u0027StakingPool: token amount must be greater than minimumLockAmount\u0027);\n        }\n        harvestAll(_forUser);\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n        token.safeIncreaseAllowance(address(lockContract), _amount);\n        lockContract.lock(_forUser, _amount, _lockTokenBlockNumber);\n    }\n\n    // If requested amount \u003e stake, send their entire stake.\n    function unlock(address _forUser, uint256 _lockRecordId) external {\n        harvestAll(_forUser);\n        unlockWithoutReward(_forUser, _lockRecordId);\n    }\n\n    function unlockWithoutReward(address _forUser, uint256 _lockRecordId) public nonReentrant {\n        require(_forUser != address(0), \u0027StakingPool : _forUser can not be Zero\u0027);\n        (, uint256 _userLockTokenAmount) = lockContract.getUserAllStakedToken(_forUser);\n        if (_userHasStake(_userLockTokenAmount)){\n            (,,uint256 _lockTokenAmount,,,) = lockContract.getLockRecord(_lockRecordId);\n            lockToken.safeTransferFrom(msg.sender, address(this), _lockTokenAmount);\n            lockContract.unlock(_forUser,_lockRecordId);\n            emit UnlockWithoutReward(_forUser, _lockRecordId);\n        }\n    }\n    \n    //force check and unlock all the lock record which can be unlocked for all the users.\n    function forceUnlockAll(uint256 _fromLockRecordId, uint256 _toLockRecordId) external {\n        lockContract.forceUnlockAll(_fromLockRecordId, _toLockRecordId);\n    }\n    \n    //force check and unlock one lock record if it can be unlocked.\n    function forceUnlock(uint256 _lockRecordId) public nonReentrant {\n        lockContract.forceUnlock(_lockRecordId);\n    }\n\n    function stake(address _forUser, uint256 _amount) external started notStopped {\n        require(_forUser != address(0), \u0027StakingPool : _forUser can not be Zero\u0027);\n        _requireNonZeroAmount(_amount);\n        // require(_amount \u003e= minimumLockAmount, \u0027StakingPool :  token amount must be greater than minimumLockAmount\u0027);\n        harvestAll(_forUser);\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n        token.safeIncreaseAllowance(address(lockContract), _amount);\n        lockContract.stake(_forUser, _amount);\n    }\n\n    //unstake by token amount\n    function unstake(address _forUser, uint256 _lockTokenAmount) external {\n        harvestAll(_forUser);\n        unstakeWithoutReward(_forUser, _lockTokenAmount);\n    }\n\n    //unstake by token amount\n    function unstakeWithoutReward(address _forUser, uint256 _amount) public nonReentrant {\n        require(_forUser != address(0), \u0027StakingPool: _forUser can not be Zero\u0027);\n        require(_amount \u003e= 0, \u0027StakingPool: token amount must be greater than Zero\u0027);\n        uint256 lockTokenAmount = _amount.mul(lockContract.stakeTokenRatio()).div(lockContract.denominator());\n        lockToken.safeTransferFrom(msg.sender, address(this), lockTokenAmount);\n        lockContract.unstake(_forUser, _amount);\n        emit UnstakeWithoutReward(_forUser, _amount);\n    }\n\n    function harvest(address _forUser, IERC20 _rewardToken) public nonReentrant{\n        require(_forUser != address(0), \u0027StakingPool: _forUser can not be Zero\u0027);\n        require(address(_rewardToken) != address(0), \u0027StakingPool: _rewardToken can not be Zero\u0027);\n        require(isRewardTokenMap[_rewardToken], \"StakingPool: _rewardToken not support!\");\n        (,uint256 _lockTokenAmount) = lockContract.getUserAllStakedToken(_forUser);\n        if (_userHasStake(_lockTokenAmount)){\n            uint256 reward = _pendingReward(_rewardToken, _forUser);\n            if(reward \u003e 0){\n                _rewardToken.safeTransfer(_forUser, reward);\n                emit Harvest(_forUser, _rewardToken, reward);\n            }\n        }\n        _updateUserSnapshot(_forUser, _rewardToken);\n    }\n\n    function harvestAll(address _forUser) public {\n        require(_forUser != address(0), \u0027StakingPool: _forUser can not be Zero\u0027);\n        for (uint256 i = 0; i \u003c rewardTokens.length; i++){\n            harvest(_forUser, rewardTokens[i]);\n        }\n        emit HarvestAll(_forUser);\n    }\n\n    function increaseTokenReward(IERC20 _rewardToken, uint256 _reward) external nonReentrant notStopped started onlyAdmin {\n        require(address(_rewardToken) != address(0), \u0027StakingPool: _rewardToken can not be Zero\u0027);\n        _requireNonZeroAmount(_reward);\n        require(isRewardTokenMap[_rewardToken], \"StakingPool : _rewardToken not supported!\");\n        require(_rewardToken.balanceOf(msg.sender) \u003e= _reward, \"StakingPool : reward is not enough!\");\n        _rewardToken.safeTransferFrom(msg.sender, address(this), _reward);\n        totalRewards[_rewardToken] = totalRewards[_rewardToken].add(_reward);\n        uint256 addedTokenRewardPerLockToken = 0;\n        if (lockContract.totalLockTokenAmount() \u003e 0) {\n            addedTokenRewardPerLockToken = _reward.mul(REWARD_PRECISION).div(lockContract.totalLockTokenAmount());\n            totalRewardsPerStaked[_rewardToken] = totalRewardsPerStaked[_rewardToken].add(addedTokenRewardPerLockToken);\n        }\n        emit RewardUpdated(_rewardToken, _reward, totalRewardsPerStaked[_rewardToken], addedTokenRewardPerLockToken);\n    }\n\n    // --- Pending reward functions ---\n    function pendingReward(IERC20 _rewardToken, address _user) external view returns (uint256) {\n        return _pendingReward(_rewardToken, _user);\n    }\n\n    function _pendingReward(IERC20 _rewardToken, address _user) internal view returns (uint256) {\n        require(address(_rewardToken) != address(0), \u0027StakingPool: _rewardToken can not be Zero\u0027);\n        require(address(_user) != address(0), \u0027StakingPool: _user can not be Zero\u0027);\n        uint256 tokenSnapshot = userRewardSnapshots[_user][_rewardToken];\n        (, uint256 _lockTokenAmount) = lockContract.getUserAllStakedToken(_user);\n         if (_userHasStake(_lockTokenAmount)){\n             return _lockTokenAmount.mul(totalRewardsPerStaked[_rewardToken].sub(tokenSnapshot)).div(REWARD_PRECISION);\n         }else{\n             return 0;\n         }\n    }\n\n    function _updateUserSnapshot(address _user, IERC20 _rewardToken) internal {\n        if (address(_user) != address(0) \u0026\u0026 address(_rewardToken) != address(0)){\n            userRewardSnapshots[_user][_rewardToken] = totalRewardsPerStaked[_rewardToken];\n            emit StakerSnapshotsUpdated(_user, _rewardToken, totalRewardsPerStaked[_rewardToken]);\n        }\n    }\n\n    // --- Account auth functions ---\n    function addRewardToken(IERC20 _newToken) external nonReentrant onlyOwner {\n        require(!isRewardTokenMap[_newToken], \"StakingPool : Token is existing!\");\n        require(address(_newToken) != address(0), \"StakingPool : _newToken cannot be zero address\");\n        rewardTokens.push(_newToken);\n        isRewardTokenMap[_newToken] = true;\n        emit AddRewardToken(_newToken);\n    }\n\n    function delRewardToken(IERC20 _delToken) external nonReentrant onlyOwner {\n        require(address(_delToken) != address(0), \"StakingPool : _delToken cannot be zero address\");\n        require(totalRewards[_delToken] == 0, \"StakingPool : this token have rewards!\");\n        isRewardTokenMap[_delToken] = false;\n        for (uint256 i = 0; i \u003c rewardTokens.length; i++){\n            if (rewardTokens[i] == _delToken){\n                for (uint256 j = i; j \u003c rewardTokens.length - 1; j++) {\n                    rewardTokens[j] = rewardTokens[j + 1];\n                }\n                rewardTokens.pop();\n                break;\n            }\n        }\n        emit DelRewardToken(_delToken);\n    }\n\n    function emergencyStop(address _to) external nonReentrant onlyOwner {\n        if (_to == address(0)) {\n            _to = msg.sender;\n        }\n         for (uint256 i = 0; i \u003c rewardTokens.length; i++){\n            if (address(rewardTokens[i]) != address(0) \u0026\u0026 address(rewardTokens[i]) != address(token) \u0026\u0026 address(rewardTokens[i]) != address(lockToken)){\n                uint256 addrBalance = rewardTokens[i].balanceOf(address(this));\n                if (addrBalance \u003e 0) {\n                   rewardTokens[i].safeTransfer(_to, addrBalance);\n                }\n                totalRewardsPerStaked[rewardTokens[i]] = 0;\n            }\n        }\n        stopped = true;\n        emit EmergencyStop(msg.sender, _to);\n    }\n\n    function restart() external onlyOwner{\n        stopped = true;\n        emit Restart();\n    }\n\n    function _userHasStake(uint256 _currentStake) internal pure returns(bool) {\n         if (_currentStake \u003e 0) {\n            return true;\n        }else{\n            return false;\n        }\n    }\n\n    function _requireNonZeroAmount(uint256 _amount) internal pure {\n        require(_amount \u003e 0, \u0027StakingPool : Amount must be non-zero\u0027);\n    }\n}\n"}}